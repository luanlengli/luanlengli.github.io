{"meta":{"title":"luanlengli's Blog","subtitle":"“不知道”的五大理由，不读，不查，不试，理解能力差，满脑子想着怎么利用他人","description":"just do it!","author":"乱愣黎","url":"https://luanlengli.github.io","root":"/"},"pages":[{"title":"about","date":"2018-12-11T01:57:28.000Z","updated":"2018-12-11T01:58:02.000Z","comments":true,"path":"about/index.html","permalink":"https://luanlengli.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-12-11T01:57:18.000Z","updated":"2018-12-11T01:58:16.000Z","comments":true,"path":"categories/index.html","permalink":"https://luanlengli.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-11T01:57:23.000Z","updated":"2018-12-11T01:58:25.000Z","comments":true,"path":"tags/index.html","permalink":"https://luanlengli.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PostgreSQL10搭建时间序列数据库TimescaleDB","slug":"PostgreSQL10搭建时间序列数据库TimescaleDB","date":"2019-05-25T06:05:38.000Z","updated":"2019-05-28T06:32:30.696Z","comments":true,"path":"2019/05/25/PostgreSQL10搭建时间序列数据库TimescaleDB.html","link":"","permalink":"https://luanlengli.github.io/2019/05/25/PostgreSQL10搭建时间序列数据库TimescaleDB.html","excerpt":"","text":"说明这里只记录搭建和简单测试过程不保证ctrl+c和ctrl+v能完整跑起来操作系统使用的CentOS-7.6.1810 x86_64PostgreSQL版本号10.8TimescaleDB版本号1.3.0虚拟机配置1CPU 2G内存 20G系统盘postgres用户默认情况下PGDATA变量是/var/lib/pgsql/10/data这里没有使用数据盘，有需要的可以自行调整！TimescaleDB简介这段介绍是来自德哥的Github文档TimescaleDB介绍TimescaleDB是基于PostgreSQL数据库打造的一款时序数据库，插件化的形式，随着PostgreSQL的版本升级而升级。架构图环境准备安装PostgreSQL这个参考PostgreSQL10安装部署和初始化TimescaleDB安装TimescaleDB的YUM包已经被集成到PostgreSQL社区源里面，所以直接装就是了安装软件包1yum install -y timescaledb_10配置PostgreSQL切换到postgres用户1su - postgres在$PGDATA/postgresql.conf添加配置1shared_preload_libraries = 'timescaledb'重启PostgreSQL切换到postgres用户12su - postgrespg_ctl restart -D $PGDATA验证TimescaleDB功能登录PostgreSQL1psql -U postgres创建名为tutorial的数据库1CREATE database tutorial;切换到tutorial数据库1\\c tutorial加载TimescaleDB的extensions1CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;示例输出12345678910111213141516171819WARNING:WELCOME TO _____ _ _ ____________|_ _(_) | | | _ \\ ___ \\ | | _ _ __ ___ ___ ___ ___ __ _| | ___| | | | |_/ / | | | | _ ` _ \\ / _ \\/ __|/ __/ _` | |/ _ \\ | | | ___ \\ | | | | | | | | | __/\\__ \\ (_| (_| | | __/ |/ /| |_/ / |_| |_|_| |_| |_|\\___||___/\\___\\__,_|_|\\___|___/ \\____/ Running version 1.3.0For more information on TimescaleDB, please visit the following links: 1. Getting started: https://docs.timescale.com/getting-started 2. API reference documentation: https://docs.timescale.com/api 3. How TimescaleDB is designed: https://docs.timescale.com/introduction/architectureNote: TimescaleDB collects anonymous reports to better understand and assist our users.For more information and how to disable, please see our docs https://docs.timescaledb.com/using-timescaledb/telemetry.CREATE EXTENSION创建一个普通SQL标准的表123456CREATE TABLE conditions ( time TIMESTAMPTZ NOT NULL, location TEXT NOT NULL, temperature DOUBLE PRECISION NULL, humidity DOUBLE PRECISION NULL);查看表结构12345678tutorial=# \\d conditions Table \"public.conditions\" Column | Type | Collation | Nullable | Default-------------+--------------------------+-----------+----------+--------- time | timestamp with time zone | | not null | location | text | | not null | temperature | double precision | | | humidity | double precision | | |使用create_hypertable创建hypertable12345SELECT create_hypertable('conditions', 'time'); create_hypertable------------------------- (1,public,conditions,t)(1 row)这时再看表结构的时候，会发现不一样了123456789101112tutorial=# \\d conditions Table \"public.conditions\" Column | Type | Collation | Nullable | Default-------------+--------------------------+-----------+----------+--------- time | timestamp with time zone | | not null | location | text | | not null | temperature | double precision | | | humidity | double precision | | |Indexes: \"conditions_time_idx\" btree (\"time\" DESC)Triggers: ts_insert_blocker BEFORE INSERT ON conditions FOR EACH ROW EXECUTE PROCEDURE _timescaledb_internal.insert_blocker()插入数据1tutorial=# INSERT INTO conditions(time, location, temperature, humidity) VALUES (NOW(), 'office', 70.0, 50.0);查询数据12345tutorial=# SELECT * FROM conditions ORDER BY time DESC LIMIT 100; time | location | temperature | humidity-------------------------------+----------+-------------+---------- YYYY-MM-DD HH:mm:SS.354351+08 | office | 70 | 50(1 row)TimescaleDB Tutorials这里使用TimescaleDB官方的测试样例地址在这里纽约TAXI数据透视分析测试数据这里直接下载的同时解压压缩包1wget -O - https://timescaledata.blob.core.windows.net/datasets/nyc_data.tar.gz | tar xz解压出来有三个文件nyc_data_contagg.sqlnyc_data.sqlnyc_data_rides.csv创建数据库123CREATE DATABASE nyc_data;\\c nyc_dataCREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;创建表结构1psql -U postgres -d nyc_data -h localhost &lt; nyc_data.sql导入数据1psql -U postgres -d nyc_data -h localhost -c \"\\COPY rides FROM nyc_data_rides.csv CSV\"查看表12345678nyc_data=# \\dt List of relations Schema | Name | Type | Owner--------+---------------+-------+---------- public | payment_types | table | postgres public | rates | table | postgres public | rides | table | postgres(3 rows)查看表结构payments123456nyc_data=# \\d payment_types Table \"public.payment_types\" Column | Type | Collation | Nullable | Default--------------+---------+-----------+----------+--------- payment_type | integer | | | description | text | | |rates123456nyc_data=# \\d rates Table \"public.rates\" Column | Type | Collation | Nullable | Default-------------+---------+-----------+----------+--------- rate_code | integer | | | description | text | | |rides1234567891011121314151617181920212223242526272829303132333435363738394041postgres=# \\d+ rides; Table \"public.rides\" Column | Type | Collation | Nullable | Default | Storage | Stats target | Description-----------------------+-----------------------------+-----------+----------+---------+----------+--------------+------------- vendor_id | text | | | | extended | | pickup_datetime | timestamp without time zone | | not null | | plain | | dropoff_datetime | timestamp without time zone | | not null | | plain | | passenger_count | numeric | | | | main | | trip_distance | numeric | | | | main | | pickup_longitude | numeric | | | | main | | pickup_latitude | numeric | | | | main | | rate_code | integer | | | | plain | | dropoff_longitude | numeric | | | | main | | dropoff_latitude | numeric | | | | main | | payment_type | integer | | | | plain | | fare_amount | numeric | | | | main | | extra | numeric | | | | main | | mta_tax | numeric | | | | main | | tip_amount | numeric | | | | main | | tolls_amount | numeric | | | | main | | improvement_surcharge | numeric | | | | main | | total_amount | numeric | | | | main | |Indexes: \"rides_passenger_count_pickup_datetime_idx\" btree (passenger_count, pickup_datetime DESC) \"rides_pickup_datetime_vendor_id_idx\" btree (pickup_datetime DESC, vendor_id) \"rides_rate_code_pickup_datetime_idx\" btree (rate_code, pickup_datetime DESC) \"rides_vendor_id_pickup_datetime_idx\" btree (vendor_id, pickup_datetime DESC)Triggers: ts_insert_blocker BEFORE INSERT ON rides FOR EACH ROW EXECUTE PROCEDURE _timescaledb_internal.insert_blocker()Child tables: _timescaledb_internal._hyper_2_10_chunk, _timescaledb_internal._hyper_2_11_chunk, _timescaledb_internal._hyper_2_12_chunk, _timescaledb_internal._hyper_2_1_chunk, _timescaledb_internal._hyper_2_2_chunk, _timescaledb_internal._hyper_2_3_chunk, _timescaledb_internal._hyper_2_4_chunk, _timescaledb_internal._hyper_2_5_chunk, _timescaledb_internal._hyper_2_6_chunk, _timescaledb_internal._hyper_2_7_chunk, _timescaledb_internal._hyper_2_8_chunk, _timescaledb_internal._hyper_2_9_chunk查询数据普通查询1月1日至1月10日，同车超过两人，每天平均计费是多少1234567891011121314151617nyc_data=# SELECT date_trunc('day', pickup_datetime) as day, avg(fare_amount)nyc_data-# FROM ridesnyc_data-# WHERE passenger_count &gt; 1 AND (pickup_datetime &gt;= '2016-01-01' AND pickup_datetime &lt;= '2016-01-10')nyc_data-# GROUP BY day ORDER BY day; day | avg---------------------+--------------------- 2016-01-01 00:00:00 | 13.3990821679715529 2016-01-02 00:00:00 | 13.0224687415181399 2016-01-03 00:00:00 | 13.5382068607068607 2016-01-04 00:00:00 | 12.9618895561740149 2016-01-05 00:00:00 | 12.6614611935518309 2016-01-06 00:00:00 | 12.5775245695086098 2016-01-07 00:00:00 | 12.5868802584437019 2016-01-08 00:00:00 | 12.4288630909742120 2016-01-09 00:00:00 | 11.8049625897430078 2016-01-10 00:00:00 | 27.2500000000000000(10 rows)查询每天交易了多少笔，只显示头五个记录1234567891011nyc_data=# SELECT date_trunc('day', pickup_datetime) as day, COUNT(*) FROM ridesnyc_data-# GROUP BY day ORDER BY daynyc_data-# LIMIT 5; day | count---------------------+-------- 2016-01-01 00:00:00 | 345037 2016-01-02 00:00:00 | 312831 2016-01-03 00:00:00 | 302878 2016-01-04 00:00:00 | 316171 2016-01-05 00:00:00 | 343251(5 rows)使用TimescaleDB内置函数每5分钟间隔为一个BUCKET，输出每个间隔产生了多少笔订单1234567891011121314151617181920212223242526272829303132nyc_data=# SELECT time_bucket('5 minute', pickup_datetime) as five_min, count(*) nyc_data=# FROM rides nyc_data=# WHERE pickup_datetime &lt; '2016-01-01 02:00' nyc_data=# GROUP BY five_min ORDER BY five_min; five_min | count---------------------+------- 2016-01-01 00:00:00 | 703 2016-01-01 00:05:00 | 1482 2016-01-01 00:10:00 | 1959 2016-01-01 00:15:00 | 2200 2016-01-01 00:20:00 | 2285 2016-01-01 00:25:00 | 2291 2016-01-01 00:30:00 | 2349 2016-01-01 00:35:00 | 2328 2016-01-01 00:40:00 | 2440 2016-01-01 00:45:00 | 2372 2016-01-01 00:50:00 | 2388 2016-01-01 00:55:00 | 2473 2016-01-01 01:00:00 | 2395 2016-01-01 01:05:00 | 2510 2016-01-01 01:10:00 | 2412 2016-01-01 01:15:00 | 2482 2016-01-01 01:20:00 | 2428 2016-01-01 01:25:00 | 2433 2016-01-01 01:30:00 | 2337 2016-01-01 01:35:00 | 2366 2016-01-01 01:40:00 | 2325 2016-01-01 01:45:00 | 2257 2016-01-01 01:50:00 | 2316 2016-01-01 01:55:00 | 2250(24 rows)每个城市的TAXI交易量12345678910111213nyc_data=# SELECT rates.description, COUNT(vendor_id) as num_trips FROM ridesnyc_data-# JOIN rates on rides.rate_code = rates.rate_codenyc_data-# WHERE pickup_datetime &lt; '2016-01-08'nyc_data-# GROUP BY rates.description ORDER BY rates.description; description | num_trips-----------------------+----------- group ride | 17 JFK | 54832 Nassau or Westchester | 967 negotiated fare | 7193 Newark | 4126 standard rate | 2266401(6 rows)查看select执行计划1234567891011121314151617postgres=# EXPLAIN SELECT * FROM rides; QUERY PLAN---------------------------------------------------------------------------------- Append (cost=0.00..282354.03 rows=5963403 width=258) -&gt; Seq Scan on _hyper_2_1_chunk (cost=0.00..23485.78 rows=781178 width=113) -&gt; Seq Scan on _hyper_2_2_chunk (cost=0.00..36322.06 rows=1187506 width=115) -&gt; Seq Scan on _hyper_2_3_chunk (cost=0.00..32909.67 rows=1075467 width=116) -&gt; Seq Scan on _hyper_2_4_chunk (cost=0.00..15601.72 rows=518772 width=112) -&gt; Seq Scan on _hyper_2_5_chunk (cost=0.00..20396.28 rows=281328 width=472) -&gt; Seq Scan on _hyper_2_6_chunk (cost=0.00..41670.68 rows=574768 width=472) -&gt; Seq Scan on _hyper_2_7_chunk (cost=0.00..20921.76 rows=288576 width=472) -&gt; Seq Scan on _hyper_2_8_chunk (cost=0.00..42966.40 rows=592640 width=472) -&gt; Seq Scan on _hyper_2_9_chunk (cost=0.00..15160.04 rows=209104 width=472) -&gt; Seq Scan on _hyper_2_10_chunk (cost=0.00..32896.44 rows=453744 width=472) -&gt; Seq Scan on _hyper_2_11_chunk (cost=0.00..11.60 rows=160 width=472) -&gt; Seq Scan on _hyper_2_12_chunk (cost=0.00..11.60 rows=160 width=472)(13 rows)TimescaleDB+PostGIS实现时间+空间数据库安装PostGIS1yum install -y postgis25_10加载PostGIS12postgres=# create extension postgis;CREATE EXTENSION修改表结构12345678postgres=# ALTER TABLE rides ADD COLUMN pickup_geom geometry(POINT,2163);ALTER TABLEpostgres=# ALTER TABLE rides ADD COLUMN dropoff_geom geometry(POINT,2163);ALTER TABLEpostgres=# UPDATE rides SET pickup_geom = ST_Transform(ST_SetSRID(ST_MakePoint(pickup_longitude,pickup_latitude),4326),2163);UPDATE 10906860postgres=# UPDATE rides SET dropoff_geom = ST_Transform(ST_SetSRID(ST_MakePoint(dropoff_longitude,dropoff_latitude),4326),2163);UPDATE 10906860查询数据查询在(lat, long) (40.7589,-73.9851)附近400米范围内，每30分钟有多少辆的士被乘坐123456789101112131415161718192021222324252627282930313233343536postgres=# SELECT time_bucket('30 minutes', pickup_datetime) AS thirty_min, COUNT(*) AS near_times_sqpostgres-# FROM ridespostgres-# WHERE ST_Distance(pickup_geom, ST_Transform(ST_SetSRID(ST_MakePoint(-73.9851,40.7589),4326),2163)) &lt; 400postgres-# AND pickup_datetime &lt; '2016-01-01 14:00'postgres-# GROUP BY thirty_min ORDER BY thirty_min; thirty_min | near_times_sq---------------------+--------------- 2016-01-01 00:00:00 | 74 2016-01-01 00:30:00 | 102 2016-01-01 01:00:00 | 120 2016-01-01 01:30:00 | 98 2016-01-01 02:00:00 | 112 2016-01-01 02:30:00 | 109 2016-01-01 03:00:00 | 163 2016-01-01 03:30:00 | 181 2016-01-01 04:00:00 | 214 2016-01-01 04:30:00 | 185 2016-01-01 05:00:00 | 158 2016-01-01 05:30:00 | 113 2016-01-01 06:00:00 | 102 2016-01-01 06:30:00 | 91 2016-01-01 07:00:00 | 88 2016-01-01 07:30:00 | 58 2016-01-01 08:00:00 | 72 2016-01-01 08:30:00 | 94 2016-01-01 09:00:00 | 115 2016-01-01 09:30:00 | 118 2016-01-01 10:00:00 | 135 2016-01-01 10:30:00 | 160 2016-01-01 11:00:00 | 212 2016-01-01 11:30:00 | 229 2016-01-01 12:00:00 | 244 2016-01-01 12:30:00 | 230 2016-01-01 13:00:00 | 235 2016-01-01 13:30:00 | 238(28 rows)","categories":[],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://luanlengli.github.io/tags/PostgreSQL/"}]},{"title":"PostgreSQL10流复制配合PGPool-II实现数据库HA主备切换","slug":"PostgreSQL10流复制-PGPool-II实现数据库HA主备切换","date":"2019-05-24T03:01:59.000Z","updated":"2019-05-27T03:23:00.007Z","comments":true,"path":"2019/05/24/PostgreSQL10流复制-PGPool-II实现数据库HA主备切换.html","link":"","permalink":"https://luanlengli.github.io/2019/05/24/PostgreSQL10流复制-PGPool-II实现数据库HA主备切换.html","excerpt":"","text":"说明这里只记录搭建和简单测试过程不保证ctrl+c和ctrl+v能完整跑起来操作系统使用的CentOS-7.6.1810 x86_64PostgreSQL版本号10.8PGPool版本号4.0.5虚拟机配置1CPU 2G内存 20G系统盘postgres用户默认情况下PGDATA变量是/var/lib/pgsql/10/data这里没有使用数据盘，有需要的可以自行调整！由watchdog通过ARP协议提供的VIP切换来保证服务可用性，这里不涉及负载均衡！注意！在某些公有云环境不一定支持基于ARP协议做VIP架构图环境准备主机清单主机名IP地址角色监听端口vip172.16.80.200vippg1172.16.80.201master5432pg2172.16.80.202slave5432准备基于stream的主从集群这里可以看这个链接PostgreSQL10基于stream复制搭建主从集群修改hosts文件把每个服务器的主机IP地址做静态解析123172.16.80.200 vip172.16.80.201 pg1172.16.80.202 pg2配置系统命令权限切换脚本需要使用root权限运行1chmod u+s /usr/sbin/ip /usr/sbin/arping配置SSH密钥修改postgres用户的密码1passwd postgres切换到postgres用户1su - postgres生成SSH密钥1ssh-keygen -t ecdsa -b 521 -N '' -f ~/.ssh/id_ecdsa配置SSH免密登录12ssh-copy-id pg1ssh-copy-id pg2PGPool创建PGPool健康检查用户12create user pgpool_check with password 'pgpool_password';grant all privileges on database postgres to pgpool_check;安装PGPoolPGPool在PostgreSQL社区提供的YUM源里面有，直接装就是了1yum install -y pgpool-II-10-4.0.5-1.rhel7 pgpool-II-10-extensions-4.0.5-1.rhel7PGPool也提供了WebUI方便管理，按需安装1yum install -y pgpoolAdmin配置PGPool配置文件的目录在/etc/pgpool-II-10配置pcp.confpcp.conf是配置pgpool-II自己的用户名和密码使用pg_md5命令加密密码1pg_md5 pgpool_password输出示例14aa0cb9673e84b06d4c8a848c80eb5d0添加到pcp.conf1postgres:4aa0cb9673e84b06d4c8a848c80eb5d0配置pool_hba.confpool_hba.conf跟PostgreSQL里面的pg_hba.conf作用一样，可以拷贝pg_hba.conf的内容过来123456# TYPE DATABASE USER ADDRESS METHOD# 默认配置数据库主机以socket、127.0.0.1、::1的方式连接数据库可以跳过认证阶段直接登录数据库local all all trusthost all all 127.0.0.1/32 trusthost all all ::1/128 trusthost all all 172.16.80.0/24 md5配置pgpool.confpgpool.conf可以参考/etc/pgpool-II-10/pgpool.conf.sample的配置需要注意的几个点！master节点123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250# ----------------------------# pgPool-II configuration file# ----------------------------#------------------------------------------------------------------------------# CONNECTIONS#------------------------------------------------------------------------------listen_addresses = '*'port = 9999socket_dir = '/tmp'listen_backlog_multiplier = 2serialize_accept = offpcp_listen_addresses = '*'pcp_port = 9898pcp_socket_dir = '/tmp'# - Backend Connection Settings -backend_hostname0 = 'pg1'backend_port0 = 5432# load_balance_mode为off时不生效backend_weight0 = 1backend_data_directory0 = '/var/lib/pgsql/10/data'backend_flag0 = 'ALLOW_TO_FAILOVER'backend_hostname1 = 'pg2'backend_port1 = 5432# load_balance_mode为off时不生效backend_weight1 = 1backend_data_directory1 = '/var/lib/pgsql/10/data'backend_flag1 = 'ALLOW_TO_FAILOVER'# - Authentication -enable_pool_hba = on# 定义pool_hba.conf读取password文件pool_passwd = 'pool_passwd'authentication_timeout = 30allow_clear_text_frontend_auth = off# - SSL Connections -ssl = offssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'ssl_prefer_server_ciphers = off#------------------------------------------------------------------------------# POOLS#------------------------------------------------------------------------------# - Concurrent session and pool size -# num_init_children * max_pool的值为PGPool可以接收多少客户端并发连接，计算方式# (max_pool * num_init_children) &lt; (max_connections - superuser_reserved_connections)num_init_children = 32max_pool = 4# - Life time -child_life_time = 600child_max_connections = 0connection_life_time = 0client_idle_limit = 0#------------------------------------------------------------------------------# LOGS#------------------------------------------------------------------------------# - Where to log -log_destination = 'stderr'# - What to log -log_line_prefix = '%t PID=%p: 'log_connections = onlog_hostname = onlog_statement = onlog_per_node_statement = onlog_client_messages = onlog_standby_delay = 'none'# - Syslog specific -syslog_facility = 'LOCAL0'syslog_ident = 'pgpool'# - Debug -log_error_verbosity = verbose#client_min_messages = notice#log_min_messages = warning#------------------------------------------------------------------------------# FILE LOCATIONS#------------------------------------------------------------------------------pid_file_name = '/var/run/pgpool-II-10/pgpool.pid'logdir = '/var/log/pgpool-II-10'#------------------------------------------------------------------------------# CONNECTION POOLING#------------------------------------------------------------------------------connection_cache = onreset_query_list = 'ABORT; DISCARD ALL'#reset_query_list = 'ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT'#------------------------------------------------------------------------------# REPLICATION MODE#------------------------------------------------------------------------------replication_mode = offreplicate_select = offinsert_lock = onlobj_lock_table = ''# - Degenerate handling -replication_stop_on_mismatch = offfailover_if_affected_tuples_mismatch = off#------------------------------------------------------------------------------# LOAD BALANCING MODE#------------------------------------------------------------------------------load_balance_mode = offignore_leading_white_space = onwhite_function_list = ''black_function_list = 'currval,lastval,nextval,setval'black_query_pattern_list = ''database_redirect_preference_list = ''app_name_redirect_preference_list = ''allow_sql_comments = offdisable_load_balance_on_write = 'transaction'#------------------------------------------------------------------------------# MASTER/SLAVE MODE#------------------------------------------------------------------------------master_slave_mode = onmaster_slave_sub_mode = 'stream'# - Streaming -sr_check_period = 3sr_check_user = 'repluser'sr_check_password = 'repluser_password'sr_check_database = 'postgres'delay_threshold = 'always'# - Special commands -follow_master_command = ''#------------------------------------------------------------------------------# HEALTH CHECK GLOBAL PARAMETERS#------------------------------------------------------------------------------health_check_period = 10health_check_timeout = 3health_check_user = 'pgpool_check'health_check_password = 'pgpool_password'health_check_database = 'postgres'health_check_max_retries = 3health_check_retry_delay = 1connect_timeout = 3#------------------------------------------------------------------------------# HEALTH CHECK PER NODE PARAMETERS (OPTIONAL)#------------------------------------------------------------------------------#health_check_period0 = 0#health_check_timeout0 = 20#health_check_user0 = 'nobody'#health_check_password0 = ''#health_check_database0 = ''#health_check_max_retries0 = 0#health_check_retry_delay0 = 1#connect_timeout0 = 10000#------------------------------------------------------------------------------# FAILOVER AND FAILBACK#------------------------------------------------------------------------------failover_command = '/etc/pgpool-II-10/failover_stream.sh -d %d -h %h -p %p -D %D -M %M -m %m -H %H -P %P -r %r -R %R &gt; /var/lib/pgsql/10/data/log/failover.log'failback_command = ''failover_on_backend_error = ondetach_false_primary = offsearch_primary_node_timeout = 60#------------------------------------------------------------------------------# ONLINE RECOVERY#------------------------------------------------------------------------------recovery_user = 'nobody'recovery_password = ''recovery_1st_stage_command = ''recovery_2nd_stage_command = ''recovery_timeout = 90client_idle_limit_in_recovery = 0#------------------------------------------------------------------------------# WATCHDOG#------------------------------------------------------------------------------# - Enabling -use_watchdog = on# -Connection to up stream servers -trusted_servers = ''ping_path = '/bin'# - Watchdog communication Settings -wd_hostname = 'pg1'wd_port = 9000wd_priority = 1wd_authkey = 'pgpool_watchdog'wd_ipc_socket_dir = '/tmp'# - Virtual IP control Setting -delegate_IP = '172.16.80.200'if_cmd_path = '/usr/sbin'if_up_cmd = 'ip addr add $_IP_$/24 dev ens33 label ens33:0'if_down_cmd = 'ip addr del $_IP_$/24 dev ens33'arping_path = '/usr/sbin'arping_cmd = 'arping -U $_IP_$ -w 1'# - Behaivor on escalation Setting -clear_memqcache_on_escalation = onwd_escalation_command = ''wd_de_escalation_command = ''# - Watchdog consensus settings for failover -failover_when_quorum_exists = onfailover_require_consensus = onallow_multiple_failover_requests_from_node = off# - Lifecheck Setting -# -- common --wd_monitoring_interfaces_list = 'ens33'wd_lifecheck_method = 'heartbeat'wd_interval = 3# -- heartbeat mode --wd_heartbeat_port = 9694wd_heartbeat_keepalive = 2wd_heartbeat_deadtime = 30heartbeat_destination0 = 'pg2'heartbeat_destination_port0 = 9694heartbeat_device0 = 'ens33'# -- query mode --wd_life_point = 3wd_lifecheck_query = 'SELECT 1'wd_lifecheck_dbname = 'template1'wd_lifecheck_user = 'nobody'wd_lifecheck_password = ''# - Other pgpool Connection Settings -other_pgpool_hostname0 = 'pg2'other_pgpool_port0 = 9999other_wd_port0 = 9000#------------------------------------------------------------------------------# OTHERS#------------------------------------------------------------------------------relcache_expire = 0relcache_size = 256check_temp_table = oncheck_unlogged_table = on#------------------------------------------------------------------------------# IN MEMORY QUERY MEMORY CACHE#------------------------------------------------------------------------------memory_cache_enabled = offmemqcache_method = 'shmem'memqcache_memcached_host = 'localhost'memqcache_memcached_port = 11211memqcache_total_size = 67108864memqcache_max_num_cache = 1000000memqcache_expire = 0memqcache_auto_cache_invalidation = onmemqcache_maxcache = 409600memqcache_cache_block_size = 1048576memqcache_oiddir = '/var/log/pgpool/oiddir'white_memqcache_table_list = ''black_memqcache_table_list = ''slave节点可以照抄master节点的配置注意以下几个地方要做对应变更123wd_hostname = 'pg2'heartbeat_destination0 = 'pg1'other_pgpool_hostname0 = 'pg1'生成pool_passwd文件在/etc/pgpool-II-10/pool_passwd添加连接到后端PostgreSQL数据库的用户密码会提示输入密码，这里的密码请填写PostgreSQL数据库用户对应的密码12pg_md5 -p -m -u postgres pool_passwdpg_md5 -p -m -u appuser pool_passwd修改权限1chmod a+r /etc/pgpool-II-10/pool_passwd创建切换脚本/etc/pgpool-II-10/failover_stream.sh12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/bin/bashset -ex# 获取参数while getopts 'd:D:h:H:m:M:p:P:r:R:' OPT; do case $OPT in d) NODE_ID=\"$OPTARG\" ;; D) DATABASE_CLUSTER_PATH=\"$OPTARG\" ;; h) HOSTNAME=\"$OPTARG\" ;; H) NEW_MASTER_HOSTNAME=\"$OPTARG\" ;; m) NEW_MASTER_NODE_ID=\"$OPTARG\" ;; M) OLD_MASTER_NODE_ID=\"$OPTARG\" ;; p) PORT_NUM=\"$OPTARG\" ;; P) OLD_PRIMARY_NODE_ID=\"$OPTARG\" ;; r) NEW_MASTER_PORT_NUM=\"$OPTARG\" ;; R) NEW_MASTER_DATABASE_CLUSTER_PATH=\"$OPTARG\" ;; ?) echo \"Usage: `basename $0` -d NODE_ID -D DATABASE_CLUSTER_PATH -h HOSTNAME -H NEW_MASTER_NODE_HOSTNAME -m NEW_MASTER_NODE_ID -M OLD_MASTER_NODE_ID -p PORT_NUM -P OLD_PRIMARY_NODE_ID -r NEW_MASTER_PORT_NUM -R NEW_MASTER_DATABASE_PATH\" esacdone# 大型变量打印现场echo \"HOSTNAME: $&#123;HOSTNAME&#125;\"echo \"NODE_ID: $&#123;NODE_ID&#125;\"echo \"PORT_NUM: $&#123;PORT_NUM&#125;\"echo \"DATABASE_CLUSTER_PATH: $&#123;DATABASE_CLUSTER_PATH&#125;\"echo \"OLD_MASTER_NODE_ID: $&#123;OLD_MASTER_NODE_ID&#125;\"echo \"OLD_PRIMARY_NODE_ID: $&#123;OLD_PRIMARY_NODE_ID&#125;\"echo \"NEW_MASTER_HOSTNAME: $&#123;NEW_MASTER_HOSTNAME&#125;\"echo \"NEW_MASTER_NODE_ID: $&#123;NEW_MASTER_NODE_ID&#125;\"echo \"NEW_MASTER_PORT_NUM: $&#123;NEW_MASTER_PORT_NUM&#125;\"echo \"NEW_MASTER_DATABASE_CLUSTER_PATH: $&#123;NEW_MASTER_DATABASE_CLUSTER_PATH&#125;\"# 定义PostgreSQL家目录，默认是/usr/pgsql-10PGHOME='/usr/pgsql-10'# 定义PGDATA，默认是/var/lib/pgsql/10/data，这里使用pgpool.conf定义的backend_data_directoryPGDATA=$&#123;NEW_MASTER_DATABASE_CLUSTER_PATH&#125;# 拼凑字符串命令TRIGGER_COMMAND=\"$PGHOME/bin/pg_ctl promote -D $PGDATA\"# pg_ctl promote的功能是让备份服务器退出恢复进程并且转为读写模式/usr/bin/ssh -T $&#123;NEW_MASTER_HOSTNAME&#125; $&#123;TRIGGER_COMMAND&#125;exit 0;增加执行权限1chmod a+rx /etc/pgpool-II-10/failover_stream.sh启动PGPool12systemctl enable pgpool-II-10.servicesystemctl start pgpool-II-10.service验证PGPool使用psql连接PGPool1psql -U postgres -h vip -p 9999查看PGPool节点123456postgres=# show pool_nodes; node_id | hostname | port | status | lb_weight | role | select_cnt | load_balance_node | replication_delay | last_status_change ---------+----------+------+--------+-----------+---------+------------+-------------------+-------------------+--------------------- 0 | pg1 | 5432 | up | 0.500000 | primary | 2 | true | 0 | 2019-05-26 20:40:44 1 | pg2 | 5432 | up | 0.500000 | standby | 0 | false | 0 | 2019-05-26 20:40:44(2 rows)PGPool节点重启查看watchdog的VIP所在主机1ip address重启前查看PGPool节点信息1234567891011121314151617181920212223postgres=# show pool_nodes;-[ RECORD 1 ]------+--------------------node_id | 0hostname | pg1port | 5432status | uplb_weight | 0.500000role | primaryselect_cnt | 7load_balance_node | truereplication_delay | 0last_status_change | 2019-05-26 20:40:44-[ RECORD 2 ]------+--------------------node_id | 1hostname | pg2port | 5432status | uplb_weight | 0.500000role | standbyselect_cnt | 0load_balance_node | falsereplication_delay | 0last_status_change | 2019-05-26 20:40:44登录VIP所在主机直接重启1reboot再次查看节点信息可以看到VIP所在主机重启之后SQL连接会提示连接不可用在watchdog的作用下，VIP会自动切换到另一个PGPool节点SQL连接再次重新连接成功！12345678910111213141516171819202122232425262728postgres=# show pool_nodes;server closed the connection unexpectedly This probably means the server terminated abnormally before or while processing the request.The connection to the server was lost. Attempting reset: Succeeded.postgres=# show pool_nodes;-[ RECORD 1 ]------+--------------------node_id | 0hostname | pg1port | 5432status | uplb_weight | 0.500000role | primaryselect_cnt | 0load_balance_node | truereplication_delay | 0last_status_change | 2019-05-26 20:46:48-[ RECORD 2 ]------+--------------------node_id | 1hostname | pg2port | 5432status | downlb_weight | 0.500000role | standbyselect_cnt | 0load_balance_node | falsereplication_delay | 0last_status_change | 2019-05-26 20:46:42PGPool进程被杀查看watchdog的VIP所在主机1ip address查看PGPool节点信息12345678910111213141516171819202122232425postgres=# \\xExpanded display is on.postgres=# show pool_nodes;-[ RECORD 1 ]------+--------------------node_id | 0hostname | pg1port | 5432status | uplb_weight | 0.500000role | primaryselect_cnt | 0load_balance_node | truereplication_delay | 0last_status_change | 2019-05-26 20:46:48-[ RECORD 2 ]------+--------------------node_id | 1hostname | pg2port | 5432status | downlb_weight | 0.500000role | standbyselect_cnt | 0load_balance_node | falsereplication_delay | 0last_status_change | 2019-05-26 20:46:42找PGPool的进程123ps -ef | grep pgpool# 示例输出postgres 12641 1 0 20:39 ? 00:00:00 /usr/pgpool-10/bin/pgpool -f /etc/pgpool-II-10/pgpool.conf -n -D杀PGPool进程1kill -9 12641PGPool进程日志可以看到PGPool的watchdog几乎立刻就反应过来了1234567891011121314151617181920212223242526272829May 26 20:53:14 pg2 pgpool[9607]: LOG: watchdog node state changed from [STANDBY] to [JOINING]May 26 20:53:14 pg2 pgpool[9607]: LOCATION: watchdog.c:6360May 26 20:53:18 pg2 pgpool[9607]: LOG: watchdog node state changed from [JOINING] to [INITIALIZING]May 26 20:53:18 pg2 pgpool[9607]: LOCATION: watchdog.c:6360May 26 20:53:19 pg2 pgpool[9607]: LOG: I am the only alive node in the watchdog clusterMay 26 20:53:19 pg2 pgpool[9607]: HINT: skipping stand for coordinator stateMay 26 20:53:19 pg2 pgpool[9607]: LOCATION: watchdog.c:5231May 26 20:53:19 pg2 pgpool[9607]: LOG: watchdog node state changed from [INITIALIZING] to [MASTER]May 26 20:53:19 pg2 pgpool[9607]: LOCATION: watchdog.c:6360May 26 20:53:19 pg2 pgpool[9607]: LOG: I am announcing my self as master/coordinator watchdog nodeMay 26 20:53:19 pg2 pgpool[9607]: LOCATION: watchdog.c:5420May 26 20:53:23 pg2 pgpool[9607]: LOG: I am the cluster leader nodeMay 26 20:53:23 pg2 pgpool[9607]: DETAIL: our declare coordinator message is accepted by all nodesMay 26 20:53:23 pg2 pgpool[9607]: LOCATION: watchdog.c:5454May 26 20:53:23 pg2 pgpool[9607]: LOG: setting the local node \"pg2:9999 Linux pg2\" as watchdog cluster masterMay 26 20:53:23 pg2 pgpool[9607]: LOCATION: watchdog.c:7087May 26 20:53:23 pg2 pgpool[9607]: LOG: I am the cluster leader node. Starting escalation processMay 26 20:53:23 pg2 pgpool[9607]: LOCATION: watchdog.c:5473May 26 20:53:23 pg2 pgpool[9607]: LOG: escalation process started with PID:10118May 26 20:53:23 pg2 pgpool[9607]: LOCATION: watchdog.c:6000May 26 20:53:23 pg2 pgpool[9607]: LOG: new IPC connection receivedMay 26 20:53:23 pg2 pgpool[9607]: LOCATION: watchdog.c:3147May 26 20:53:23 pg2 pgpool[9607]: LOG: watchdog: escalation startedMay 26 20:53:23 pg2 pgpool[9607]: LOCATION: wd_escalation.c:93May 26 20:53:27 pg2 pgpool[9607]: LOG: successfully acquired the delegate IP:\"172.16.80.200\"May 26 20:53:27 pg2 pgpool[9607]: DETAIL: 'if_up_cmd' returned with successMay 26 20:53:27 pg2 pgpool[9607]: LOCATION: wd_if.c:169May 26 20:53:27 pg2 pgpool[9607]: LOG: watchdog escalation process with pid: 10118 exit with SUCCESS.May 26 20:53:27 pg2 pgpool[9607]: LOCATION: watchdog.c:2976模拟master节点宕机查看节点信息123456postgres=# show pool_nodes; node_id | hostname | port | status | lb_weight | role | select_cnt | load_balance_node | replication_delay | last_status_change ---------+----------+------+--------+-----------+---------+------------+-------------------+-------------------+--------------------- 0 | pg1 | 5432 | up | 0.500000 | primary | 0 | true | 0 | 2019-05-26 20:58:11 1 | pg2 | 5432 | up | 0.500000 | standby | 0 | false | 0 | 2019-05-26 20:59:22(2 rows)master节点直接关机1shutdown -h now查看PGPool日志1234567891011121314151617181920212223242526272829303132333435363738394041May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: new IPC connection receivedMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:3147May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: watchdog received the failover command from local pgpool-II on IPC interfaceMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:2570May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: watchdog is processing the failover command [DEGENERATE_BACKEND_REQUEST] received from local pgpool-II on IPC interfaceMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:2491May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: we have got the consensus to perform the failoverMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: DETAIL: 1 node(s) voted in the favorMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:2363May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOG: Pgpool-II parent process has received failover requestMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOCATION: pgpool_main.c:1594May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: new IPC connection receivedMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:3147May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: received the failover indication from Pgpool-II on IPC interfaceMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:2716May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOG: watchdog is informed of failover start by the main processMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10801 USER=[No Connection] DB=[No Connection]: LOCATION: watchdog.c:2784May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOG: starting degeneration. shutdown host pg1(5432)May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOCATION: pgpool_main.c:1873May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOG: Restart all childrenMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOCATION: pgpool_main.c:2023May 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOG: execute command: /etc/pgpool-II-10/failover_stream.sh 0 pg1 5432 /var/lib/pgsql/10/data 0 1 pg2 0 5432 /var/lib/pgsql/10/data &gt; /var/lib/pgsql/10/data/log/failover.logMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10800 USER=[No Connection] DB=[No Connection]: LOCATION: pgpool_main.c:3070May 26 21:06:02 pg2 pgpool[10800]: + getopts d:D:h:H:m:M:p:P:r:R: OPTMay 26 21:06:02 pg2 pgpool[10800]: + echo 'HOSTNAME: pg2'May 26 21:06:02 pg2 pgpool[10800]: + echo 'NODE_ID: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'PORT_NUM: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'DATABASE_CLUSTER_PATH: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'OLD_MASTER_NODE_ID: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'OLD_PRIMARY_NODE_ID: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'NEW_MASTER_HOSTNAME: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'NEW_MASTER_NODE_ID: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'NEW_MASTER_PORT_NUM: 'May 26 21:06:02 pg2 pgpool[10800]: + echo 'NEW_MASTER_DATABASE_CLUSTER_PATH: 'May 26 21:06:02 pg2 pgpool[10800]: + PGHOME=/usr/pgsql-10May 26 21:06:02 pg2 pgpool[10800]: + PGDATA=May 26 21:06:02 pg2 pgpool[10800]: + TRIGGER_COMMAND='/usr/pgsql-10/bin/pg_ctl promote -D 'May 26 21:06:02 pg2 pgpool[10800]: + /usr/bin/ssh -T /usr/pgsql-10/bin/pg_ctl promote -DMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10871 USER=postgres DB=postgres: WARNING: failover/failback is in progressMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10871 USER=postgres DB=postgres: DETAIL: executing failover or failback on backendMay 26 21:06:02 pg2 pgpool[10800]: 2019-05-26 21:06:02 PID=10871 USER=postgres DB=postgres: HINT: In a moment you should be able to reconnect to the database查看PGPool节点可以看到PGPool帮我们自动将standby节点切换为primary123456postgres=# show pool_nodes; node_id | hostname | port | status | lb_weight | role | select_cnt | load_balance_node | replication_delay | last_status_change ---------+----------+------+--------+-----------+---------+------------+-------------------+-------------------+--------------------- 0 | pg1 | 5432 | down | 0.500000 | standby | 0 | false | 0 | 2019-05-26 21:09:59 1 | pg2 | 5432 | up | 0.500000 | primary | 0 | true | 0 | 2019-05-26 21:12:56(2 rows)启动master节点在master登录到自己的PostgreSQL1psql -U postgres查看pg_is_in_recovery()发现master节点上面的PostgreSQL状态为f，没有自动转换为pg2的从库12345postgres=# select pg_is_in_recovery(); pg_is_in_recovery ------------------- f(1 row)手动处理一下切换用户12su - postgrescd $PGDATA创建recovery.conf文件12345678910# 指定timeline为latest，保证主从数据差异尽可能小recovery_target_timeline = 'latest'# 此选项会让PostgreSQL一直处于数据恢复状态# 不断去请求primary_conninfo定义的主节点的WAL日志# 并将这些WAL日志恢复到本地数据库中standby_mode = on# 定义主库的连接方式primary_conninfo = 'host=pg2 port=5432 user=repluser password=repluser_password'# 这个文件是用于触发停止流复制的操作！不需要手动创建trigger_file = '/var/lib/pgsql/10/data/pg.trigger'重启PostgreSQL1pg_ctl restart登录数据库查看状态，可以看到状态变成了t12345postgres=# select pg_is_in_recovery(); pg_is_in_recovery ------------------- t(1 row)手动加入PGPool集群这里输入之前pcp.conf定义的用户密码参数解析如下-h这里指定pcp的IP地址，这里用VIP-p这里指定pcp的端口，默认是9898-U这里指定登录pcp的用户，在/etc/pgpool-II-10/pcp.conf里面定义的-n这里指定节点ID，可以在show pool_nodes里面查到节点对应的ID号-d输出debug日志12345678pcp_attach_node -U postgres -h vip -p 9898 -n 0 -dPassword: DEBUG: recv: tos=\"m\", len=8DEBUG: recv: tos=\"r\", len=21DEBUG: send: tos=\"C\", len=6DEBUG: recv: tos=\"c\", len=20pcp_attach_node -- Command SuccessfulDEBUG: send: tos=\"X\", len=4查看PGPool节点状态，可以看到pg1状态是waiting，过一阵之后就变成up了123456postgres=# show pool_nodes; node_id | hostname | port | status | lb_weight | role | select_cnt | load_balance_node | replication_delay | last_status_change ---------+----------+------+---------+-----------+---------+------------+-------------------+-------------------+--------------------- 0 | pg1 | 5432 | up | 0.500000 | standby | 0 | false | 4200 | 2019-05-26 21:19:05 1 | pg2 | 5432 | up | 0.500000 | primary | 0 | true | 0 | 2019-05-26 21:12:56(2 rows)维护操作PGPool节点down检查PostgreSQL是否正常启动查看$PGDATA目录是否有recovery.conf或者recovery.done，一般情况下，只存在一个文件其中recovery.done会让数据库启动时以主库形式启动recovery.conf会让数据库作为从库启动在发生主从切换的时候，recovery.conf会被重命名为recovery.done如确认当前down节点是要作为从库启动，则重命名recovery.done为recovery.conf，然后重启数据库需要确认一下是否能从新的主库同步数据PGPool节点waiting节点还在做主从同步PGPool还在创建子进程用于连接此节点，子进程数量多，耗时会相应变长如果登录很久都是waiting，可以尝试重启一下PGPool的服务PGPool重新添加节点确保主从数据库都已正常，但是节点状态还是down，就需要手工添加到集群中了使用pcp_attach_node命令，输入pcp.conf定义的密码之后即可将节点重新加入PGPool参数解析如下-h这里指定pcp的IP地址，这里用VIP-p这里指定pcp的端口，默认是9898-U这里指定登录pcp的用户，在/etc/pgpool-II-10/pcp.conf里面定义的-n这里指定节点ID，可以在show pool_nodes里面查到节点对应的ID号-d输出debug日志12345678pcp_attach_node -h vip -p 9898 -U postgres -n NODE_ID -dPassword:DEBUG: recv: tos=\"m\", len=8DEBUG: recv: tos=\"r\", len=21DEBUG: send: tos=\"C\", len=6DEBUG: recv: tos=\"c\", len=20pcp_attach_node -- Command SuccessfulDEBUG: send: tos=\"X\", len=4","categories":[],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://luanlengli.github.io/tags/PostgreSQL/"}]},{"title":"PostgreSQL10基于stream复制搭建主从集群","slug":"PostgreSQL10基于stream复制搭建主从集群","date":"2019-05-21T03:00:47.000Z","updated":"2019-05-26T12:17:44.000Z","comments":true,"path":"2019/05/21/PostgreSQL10基于stream复制搭建主从集群.html","link":"","permalink":"https://luanlengli.github.io/2019/05/21/PostgreSQL10基于stream复制搭建主从集群.html","excerpt":"","text":"说明这里只记录搭建和简单测试过程不保证ctrl+c和ctrl+v能完整跑起来操作系统使用的CentOS-7.6.1810 x86_64PostgreSQL版本号10.8虚拟机配置1CPU 2G内存 20G系统盘postgres用户默认情况下PGDATA变量是/var/lib/pgsql/10/data这里没有使用数据盘，有需要的可以自行调整！环境准备主机清单主机名IP地址角色监听端口pg1172.16.80.201master5432pg2172.16.80.202slave5432配置/etc/hosts12345cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1 localhost172.16.80.201 pg1172.16.80.202 pg2EOF安装PostgreSQL参照此链接在两个节点上面安装好PostgreSQL，但是先不初始化数据库！！！！PostgreSQL10安装部署和初始化基于stream主从复制配置master节点创建数据库如果是有业务在跑，已经有数据了就不要做这一步操作！直接从创建复制用户那一步开始1/usr/pgsql-10/bin/postgresql-10-setup initdb启动数据库1systemctl enable --now postgres-10.service登录数据库1psql -U postgres创建复制用户1CREATE USER repluser REPLICATION LOGIN CONNECTION LIMIT 2 ENCRYPTED PASSWORD 'repluser_password';创建.pgpass文件12345su - postgrescat &gt; ~/.pgpass &lt;&lt;EOFpg2:5432:replication:repluser:repluser_passwordEOFchmod 0600 ~/.pgpass编辑pg_hba.conf增加配置如下1host replication repluser 172.16.80.0/24 md5编辑postgres.conf增加配置参数如下1234wal_level = replica# 有多少个slave节点，max_wal_senders就设置为多少max_wal_senders = 1wal_keep_segments = 32重启数据库12su - postgresql/usr/pgsql-10/bin/pg_ctl restart -D $PGDATAslave节点创建.pgpass文件12345su - postgrescat &gt; ~/.pgpass &lt;&lt;EOFpg1:5432:replication:repluser:repluser_passwordEOFchmod 0600 ~/.pgpasspg_basebackup生成备库文件把master节点的数据以物理备份的方式，保存到slave节点。备份过程不影响其他客户端访问。备份出来的内容是整个数据库的所有数据，包括配置文件！-D指定PostgreSQL数据目录-Fp指定输出格式为plain，这里是缩写，相当于--format=plain-Xs指定传输WAL日志的方法为stream，这里是缩写，相当于--wal-method=stream-h指定PostgreSQL master节点-p指定端口-U指定用户12su - postgrespg_basebackup -D $PGDATA -Fp -Xs -v -P -h pg1 -p 5432 -U repluser配置recovery.conf从master节点拷贝过来的数据文件是没有recovery.conf的需要手动创建好在PostgreSQL安装的时候是有这个配置文件的模板里面都是注释12su - postgrescp /usr/pgsql-10/share/recovery.conf.sample $PGDATA/recovery.conf修改之后，内容如下12345678910# 指定timeline为latest，保证主从数据差异尽可能小recovery_target_timeline = 'latest'# 此选项会让PostgreSQL一直处于数据恢复状态# 不断去请求primary_conninfo定义的主节点的WAL日志# 并将这些WAL日志恢复到本地数据库中standby_mode = on# 定义主库的连接方式primary_conninfo = 'host=pg1 port=5432 user=repluser password=repluser_password'# 这个文件是用于触发停止流复制的操作！不需要手动创建trigger_file = '/var/lib/pgsql/10/data/pg.trigger'启动备库1systemctl enable --now postgresql-10.service验证master节点查看进程1ps -ef | grep postgres查看是否有postgres: wal sender process查看recovery状态登录数据库1psql -U postgres -h pg1输入sql语句，主库返回f12345postgres=# select pg_is_in_recovery(); pg_is_in_recovery ------------------- f(1 row)查看主备同步状态登录数据库1psql -U postgres -h pg1修改一下输出格式，将每列数据以键值对的方式显示，类似于MySQL的\\G这里是输入一次，当前会话有效，想取消就再输入一次1\\x查看同步状态这里可以看到sync_state是async，即异步流复制123456789101112131415161718192021postgres=# select * from pg_stat_replication;-[ RECORD 1 ]----+-----------------------------pid | 10178usesysid | 16384usename | replapplication_name | walreceiverclient_addr | 172.16.80.202client_hostname | client_port | 41220backend_start | YYYY-MM-DD HH:mm:ss.78404+08backend_xmin | state | streamingsent_lsn | 0/7000060write_lsn | 0/7000060flush_lsn | 0/7000060replay_lsn | 0/7000060write_lag | flush_lag | replay_lag | sync_priority | 0sync_state | asyncslave节点查看进程1ps -ef | grep postgres查看是否有postgres: wal receiver process查看recovery状态登录数据库1psql -U postgres -h pg2输入sql语句，从库返回t12345postgres=# select pg_is_in_recovery(); pg_is_in_recovery ------------------- t(1 row)","categories":[],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://luanlengli.github.io/tags/PostgreSQL/"}]},{"title":"PostgreSQL10安装部署和初始化","slug":"PostgreSQL10安装部署和初始化","date":"2019-05-20T03:03:26.000Z","updated":"2019-05-28T06:25:08.963Z","comments":true,"path":"2019/05/20/PostgreSQL10安装部署和初始化.html","link":"","permalink":"https://luanlengli.github.io/2019/05/20/PostgreSQL10安装部署和初始化.html","excerpt":"","text":"说明仅记录安装部署和初始化过程操作系统使用的CentOS-7.6.1810 x86_64PostgreSQL版本号为10.8虚拟机配置1CPU 2G内存 20G系统盘 30G数据盘【根据自己的环境灵活调整，生产环境请务必提供独立数据盘！】环境准备关闭防火墙1systemctl disable --now firewalld.service关闭SELINUX12setenforce 0sed -e 's,^SELINUX=.*,SELINUX=disabled,' -i /etc/selinux/configsysctl参数12345678910111213141516171819202122232425262728293031323334cat &gt; /etc/sysctl.d/99-pgsql.conf &lt;&lt;EOF# 表示最大限度使用物理内存，物理内存用满再用swapvm.swappiness = 0# 端口最大的监听队列的长度，默认值128net.core.somaxconn=4096# 最大文件句柄数fs.file-max=‭1048576‬# 最大文件打开数fs.nr_open=1048576# 单个共享内存段的最大值，这里设置为物理内存大小的一半# 计算方式 2048 / 2 * 1024 * 1024 = 1073741824kernel.shmmax=1073741824# kernel.sem对应四个值分别为SEMMSL、SEMMNS、SEMOPM、SEMMNI# SEMMSL 每个信号集的最大信号数量# SEMMNS 用于控制整个 Linux 系统中信号（而不是信号集）的最大数# SEMOPM 内核参数用于控制每个 semop 系统调用可以执行的信号操作的数量# SEMMNI 内核参数用于控制整个 Linux 系统中信号集的最大数量# 这里套用Oracle 11gR2的最小要求值kernel.sem = 250 32000 100 128# 最大的TCP数据接收窗口（字节）net.core.rmem_max = 4194304# 最大的TCP数据发送窗口（字节）net.core.wmem_max = 4194304# 默认的TCP数据接收窗口大小（字节）net.core.rmem_default = 262144# 默认的TCP数据发送窗口大小（字节）net.core.wmem_default = 262144# 配置主动发起连接时，端口范围，默认值32768-60000net.ipv4.ip_local_port_range = 9000 65535# 当系统pagecache脏页达到系统内存dirty_ratio的百分比值时，会阻塞新的写请求# 直到内存脏页落盘# 默认值为30vm.dirty_ratio = 80EOFlimits参数12345678910cat &gt; /etc/security/limits.d/99-pgsql.conf &lt;&lt;EOF* soft nofile 655360* hard nofile 655360* soft nproc 655360* hard nproc 655360* soft stack unlimited* hard stack unlimited* soft memlock 250000000* hard memlock 250000000EOF准备数据盘确认数据盘1234567lsblk# 输出示例NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 20G 0 disk├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 19G 0 part /sdb 8:16 0 30G 0 disk分区使用fdisk /dev/sdb格式化硬盘，默认已做4K对齐1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950fdisk /dev/sdb# 输出示例Welcome to fdisk (util-linux 2.23.2).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.Device does not contain a recognized partition tableBuilding a new DOS disklabel with disk identifier 0xa5fd5a2b.Command (m for help): pDisk /dev/sdb: 32.2 GB, 32212254720 bytes, 62914560 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0xa5fd5a2b Device Boot Start End Blocks Id SystemCommand (m for help): nPartition type: p primary (0 primary, 0 extended, 4 free) e extendedSelect (default p): pPartition number (1-4, default 1): 1First sector (2048-62914559, default 2048):Using default value 2048Last sector, +sectors or +size&#123;K,M,G&#125; (2048-62914559, default 62914559):Using default value 62914559Partition 1 of type Linux and of size 30 GiB is setCommand (m for help): pDisk /dev/sdb: 32.2 GB, 32212254720 bytes, 62914560 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0xa5fd5a2b Device Boot Start End Blocks Id System/dev/sdb1 2048 62914559 31456256 83 LinuxCommand (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks.12345678lsblk# 输出示例NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 20G 0 disk├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 19G 0 part /sdb 8:16 0 30G 0 disk└─sdb1 8:17 0 30G 0 part格式化分区1234567891011mkfs.xfs -f -b size=4096 /dev/sdb1# 输出示例meta-data=/dev/sdb1 isize=512 agcount=4, agsize=1966016 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0, sparse=0data = bsize=4096 blocks=7864064, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal log bsize=4096 blocks=3839, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0创建数据目录1mkdir -p /data挂载数据盘1mount -t xfs -o nolargeio,noatime,nodiratime /dev/sdb1 /data修改/etc/fstab追加一行记录1/dev/sdb1 /data xfs nolargeio,noatime,nodiratime 0 0安装PostgreSQL准备YUM源社区配置YUM源的文档1yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm由于默认的源服务器地址在国外，修改为国内镜像地址可以改善下载速度1yum install -y https://mirrors.tuna.tsinghua.edu.cn/postgresql/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm默认源服务器地址是PostgreSQL社区的服务器，这里替换成清华大学的镜像源地址1sed -e 's,download.postgresql.org/pub,mirrors4.tuna.tsinghua.edu.cn/postgresql,g' -i /etc/yum.repos.d/pgdg-redhat-all.repo安装PostgreSQL10必装1yum install -y postgresql10 postgresql10-server选装1yum install -y postgresql10-contrib postgresql10-testPostgreSQL也有基于WebUI的图形管理工具pgAdmin，具体怎么用，自己看文档windows版的看这里容器化部署看这里1yum install -y pgadmin4初始化数据库使用默认数据目录默认数据目录在/var/lib/pgsql/10/data1/usr/pgsql-10/bin/postgresql-10-setup initdb使用自定义数据目录这里自定义数据目录为/data1234567891011121314151617181920# 修改数据目录权限chown -R postgres:postgres /data# 修改服务启动脚本的数据目录# 服务脚本默认的Environment=PGDATA=/var/lib/pgsql/10/data# 不改这个会导致服务启动失败sed -e 's,^Environment=PGDATA=.*,Environment=PGDATA=/data,' -i /usr/lib/systemd/system/postgresql-10.servicesystemctl daemon-reload# 切换到postgres用户su - postgres# 修改默认PGDATA环境变量sed -e 's,^PGDATA.*,PGDATA=/data,' -i ~/.bash_profile# 应用变量source ~/.bash_profile# 初始化数据库/usr/pgsql-10/bin/initdb --encoding=UTF-8 \\ --local=en_US.UTF8 \\ --username=postgres \\ --pwprompt \\ --pgdata=$PGDATA \\ --data-checksums启动PostgreSQL12systemctl enable postgresql-10.servicesystemctl start postgresql-10.service验证数据库查看数据库进程12345678910ps -ef | grep postgres# 输出示例postgres 13558 1 0 13:25 ? 00:00:00 /usr/pgsql-10/bin/postmaster -D /datapostgres 13560 13558 0 13:25 ? 00:00:00 postgres: logger processpostgres 13562 13558 0 13:25 ? 00:00:00 postgres: checkpointer processpostgres 13563 13558 0 13:25 ? 00:00:00 postgres: writer processpostgres 13564 13558 0 13:25 ? 00:00:00 postgres: wal writer processpostgres 13565 13558 0 13:25 ? 00:00:00 postgres: autovacuum launcher processpostgres 13566 13558 0 13:25 ? 00:00:00 postgres: stats collector processpostgres 13567 13558 0 13:25 ? 00:00:00 postgres: bgworker: logical replication launcher查看数据库监听端口1234netstat -antupl | grep 5432# 输出示例tcp 0 0 127.0.0.1:5432 0.0.0.0:* LISTEN 13558/postmastertcp6 0 0 ::1:5432 :::* LISTEN 13558/postmaster切换用户1su - postgres登录数据库在postgres用户下可以直接免密码登录到数据库1psql -U postgres查看数据库12345678910111213postgres=# \\conninfoYou are connected to database \"postgres\" as user \"postgres\" via socket in \"/var/run/postgresql\" at port \"5432\".postgres=# \\l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges-----------+----------+----------+------------+------------+----------------------- postgres | postgres | UTF8 | zh_CN.UTF8 | zh_CN.UTF8 | template0 | postgres | UTF8 | zh_CN.UTF8 | zh_CN.UTF8 | =c/postgres + | | | | | postgres=CTc/postgres template1 | postgres | UTF8 | zh_CN.UTF8 | zh_CN.UTF8 | =c/postgres + | | | | | postgres=CTc/postgres(3 rows)配置PostgreSQL数据库配置文件路径配置文件是放在数据目录，懒得记路径可以这么做123456789su - postgresqlcd $PGDATAls# 输出示例base pg_dynshmem pg_notify pg_stat_tmp pg_wal postmaster.pidcurrent_logfiles pg_hba.conf pg_replslot pg_subtrans pg_xactglobal pg_ident.conf pg_serial pg_tblspc postgresql.auto.conflog pg_logical pg_snapshots pg_twophase postgresql.confpg_commit_ts pg_multixact pg_stat PG_VERSION postmaster.opts配置文件说明postgresql.conf数据库服务的配置文件默认配置文件条目非常多，可以根据注释来配置对应选项也可以查看在线版本这里简单做一下配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405# -----------------------------# PostgreSQL configuration file# -----------------------------## This file consists of lines of the form:## name = value## (The \"=\" is optional.) Whitespace may be used. Comments are introduced with# \"#\" anywhere on a line. The complete list of parameter names and allowed# values can be found in the PostgreSQL documentation.## The commented-out settings shown in this file represent the default values.# Re-commenting a setting is NOT sufficient to revert it to the default value;# you need to reload the server.## This file is read on server startup and when the server receives a SIGHUP# signal. If you edit the file on a running system, you have to SIGHUP the# server for the changes to take effect, run \"pg_ctl reload\", or execute# \"SELECT pg_reload_conf()\". Some parameters, which are marked below,# require a server shutdown and restart to take effect.## Any parameter can also be given as a command-line option to the server, e.g.,# \"postgres -c log_connections=on\". Some parameters can be changed at run time# with the \"SET\" SQL command.## Memory units: kB = kilobytes Time units: ms = milliseconds# MB = megabytes s = seconds# GB = gigabytes min = minutes# TB = terabytes h = hours# d = days#------------------------------------------------------------------------------# FILE LOCATIONS#------------------------------------------------------------------------------#data_directory = 'ConfigDir'#hba_file = 'ConfigDir/pg_hba.conf'#ident_file = 'ConfigDir/pg_ident.conf'#external_pid_file = ''#------------------------------------------------------------------------------# CONNECTIONS AND AUTHENTICATION#------------------------------------------------------------------------------# - Connection Settings -listen_addresses = '*'port = 5432# max_connections默认是100max_connections = 500superuser_reserved_connections = 3# - TCP settings -# 默认值为0，即使用系统默认值#tcp_keepalives_idle = 0#tcp_keepalives_interval = 0#tcp_keepalives_count = 0#tcp_user_timeout = 0# - Authentication -# 认证超时时间，默认1minauthentication_timeout = 30s# 密码加密算法，默认md5password_encryption = md5# GSSAPI using Kerberos#krb_server_keyfile = ''#krb_caseins_users = off# - SSL -ssl = off#ssl_ca_file = ''#ssl_cert_file = 'server.crt'#ssl_crl_file = ''#ssl_key_file = 'server.key'#ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers#ssl_prefer_server_ciphers = on#ssl_ecdh_curve = 'prime256v1'#ssl_min_protocol_version = 'TLSv1'#ssl_max_protocol_version = ''#ssl_dh_params_file = ''#ssl_passphrase_command = ''#ssl_passphrase_command_supports_reload = off#------------------------------------------------------------------------------# RESOURCE USAGE (except WAL)#------------------------------------------------------------------------------# - Memory -shared_buffers = 128MB#huge_pages = try#temp_buffers = 8MB#max_prepared_transactions = 0#work_mem = 4MB#maintenance_work_mem = 64MB#autovacuum_work_mem = -1#max_stack_depth = 2MB#shared_memory_type = mmapdynamic_shared_memory_type = posix# - Disk -#temp_file_limit = -1# - Kernel Resources -#max_files_per_process = 1000#shared_preload_libraries = ''# - Cost-Based Vacuum Delay -#vacuum_cost_delay = 0#vacuum_cost_page_hit = 1#vacuum_cost_page_miss = 10#vacuum_cost_page_dirty = 20#vacuum_cost_limit = 200# - Background Writer -#bgwriter_delay = 200ms#bgwriter_lru_maxpages = 100#bgwriter_lru_multiplier = 2.0#bgwriter_flush_after = 0# - Asynchronous Behavior -#effective_io_concurrency = 1#max_worker_processes = 8#max_parallel_maintenance_workers = 2#max_parallel_workers_per_gather = 2#parallel_leader_participation = on#max_parallel_workers = 8#old_snapshot_threshold = -1#backend_flush_after = 0#------------------------------------------------------------------------------# WRITE AHEAD LOG#------------------------------------------------------------------------------# - Settings -wal_level = replicafsync = onsynchronous_commit = onwal_sync_method = fdatasync#full_page_writes = on#wal_compression = off# 如需要用pg_rewind修复WAL的timeline, 需要打开wal_log_hints# 但是开启它会导致写wal变多, 请斟酌wal_log_hints = off#wal_init_zero = on#wal_recycle = on#wal_buffers = -1#wal_writer_delay = 200ms#wal_writer_flush_after = 1MB#commit_delay = 0#commit_siblings = 5# - Checkpoints -#checkpoint_timeout = 5minmax_wal_size = 1GBmin_wal_size = 80MB#checkpoint_completion_target = 0.5#checkpoint_flush_after = 0#checkpoint_warning = 30s# - Archiving -#archive_mode = off#archive_command = ''#archive_timeout = 0#------------------------------------------------------------------------------# REPLICATION#------------------------------------------------------------------------------# - Sending Server(s) -max_wal_senders = 10wal_keep_segments = 32wal_sender_timeout = 60s#max_replication_slots = 10#track_commit_timestamp = off# - Master Server -#synchronous_standby_names = ''#vacuum_defer_cleanup_age = 0# - Standby Servers -#hot_standby = on#max_standby_archive_delay = 30s#max_standby_streaming_delay = 30s#wal_receiver_status_interval = 10s#hot_standby_feedback = off#wal_receiver_timeout = 60ss#wal_retrieve_retry_interval = 5s# - Subscribers -#max_logical_replication_workers = 4#max_sync_workers_per_subscription = 2#------------------------------------------------------------------------------# QUERY TUNING#------------------------------------------------------------------------------# - Planner Method Configuration -#enable_bitmapscan = on#enable_hashagg = on#enable_hashjoin = on#enable_indexscan = on#enable_indexonlyscan = on#enable_material = on#enable_mergejoin = on#enable_nestloop = on#enable_seqscan = on#enable_sort = on#enable_tidscan = on# - Planner Cost Constants -#seq_page_cost = 1.0#random_page_cost = 4.0#cpu_tuple_cost = 0.01#cpu_index_tuple_cost = 0.005#cpu_operator_cost = 0.0025#parallel_tuple_cost = 0.1#parallel_setup_cost = 1000.0#min_parallel_table_scan_size = 8MB#min_parallel_index_scan_size = 512kB#effective_cache_size = 4GB# - Genetic Query Optimizer -#geqo = on#geqo_threshold = 12#geqo_effort = 5#geqo_pool_size = 0#geqo_generations = 0#geqo_selection_bias = 2.0#geqo_seed = 0.0# - Other Planner Options -#default_statistics_target = 100#constraint_exclusion = partition#cursor_tuple_fraction = 0.1#from_collapse_limit = 8#join_collapse_limit = 8#force_parallel_mode = off#------------------------------------------------------------------------------# ERROR REPORTING AND LOGGING#------------------------------------------------------------------------------# - Where to Log -log_destination = 'stderr'logging_collector = onlog_directory = 'log'log_filename = 'postgresql-%Y%m%d.log'#log_file_mode = 0600log_truncate_on_rotation = offlog_rotation_age = 1dlog_rotation_size = 0# These are relevant when logging to syslog:#syslog_facility = 'LOCAL0'#syslog_ident = 'postgres'#syslog_sequence_numbers = on#syslog_split_messages = on# - When to Log -#log_min_messages = warning #log_min_error_statement = errorlog_min_duration_statement = 0 # - What to Log -#debug_print_parse = off#debug_print_rewritten = off#debug_print_plan = off#debug_pretty_print = onlog_checkpoints = on log_connections = on log_disconnections = on log_duration = on log_error_verbosity = verbose#log_hostname = offlog_line_prefix = '%m [%p]: user=%u,db=%d 'log_lock_waits = on#log_statement = 'none'#log_replication_commands = off#log_temp_files = -1log_timezone = 'PRC'# - Process Title -#cluster_name = ''#update_process_title = on#------------------------------------------------------------------------------# RUNTIME STATISTICS#------------------------------------------------------------------------------# - Query/Index Statistics Collector -track_activities = ontrack_counts = ontrack_io_timing = ontrack_functions = nonetrack_activity_query_size = 1024stats_temp_directory = 'pg_stat_tmp'# - Statistics Monitoring -log_parser_stats = onlog_planner_stats = onlog_executor_stats = onlog_statement_stats = on#------------------------------------------------------------------------------# AUTOVACUUM PARAMETERS#------------------------------------------------------------------------------#autovacuum = on#log_autovacuum_min_duration = -1#autovacuum_max_workers = 3#autovacuum_naptime = 1min#autovacuum_vacuum_threshold = 50#autovacuum_analyze_threshold = 50#autovacuum_vacuum_scale_factor = 0.2#autovacuum_analyze_scale_factor = 0.1#autovacuum_freeze_max_age = 200000000#autovacuum_multixact_freeze_max_age = 400000000#autovacuum_vacuum_cost_delay = 20ms#autovacuum_vacuum_cost_limit = -1#------------------------------------------------------------------------------# CLIENT CONNECTION DEFAULTS#------------------------------------------------------------------------------# - Statement Behavior -#client_min_messages = notice#search_path = '\"$user\", public'#default_tablespace = ''#temp_tablespaces = ''#check_function_bodies = on#default_transaction_isolation = 'read committed'#default_transaction_read_only = off#default_transaction_deferrable = off#session_replication_role = 'origin'#statement_timeout = 0#lock_timeout = 0#idle_in_transaction_session_timeout = 0#vacuum_freeze_min_age = 50000000#vacuum_freeze_table_age = 150000000#vacuum_multixact_freeze_min_age = 5000000#vacuum_multixact_freeze_table_age = 150000000#bytea_output = 'hex'#xmlbinary = 'base64'#xmloption = 'content'#gin_fuzzy_search_limit = 0#gin_pending_list_limit = 4MB# - Locale and Formatting -datestyle = 'iso, ymd'#intervalstyle = 'postgres'timezone = 'PRC'#timezone_abbreviations = 'Default'#extra_float_digits = 0#client_encoding = sql_ascii# These settings are initialized by initdb, but they can be changed.lc_messages = 'en_US.UTF-8' # locale for system error message stringslc_monetary = 'en_US.UTF-8' # locale for monetary formattinglc_numeric = 'en_US.UTF-8' # locale for number formattinglc_time = 'en_US.UTF-8' # locale for time formatting# default configuration for text searchdefault_text_search_config = 'pg_catalog.english'# - Other Defaults -#dynamic_library_path = '$libdir'#local_preload_libraries = ''#session_preload_libraries = ''#------------------------------------------------------------------------------# LOCK MANAGEMENT#------------------------------------------------------------------------------#deadlock_timeout = 1s#max_locks_per_transaction = 64#max_pred_locks_per_transaction = 64#max_pred_locks_per_relation = -2#max_pred_locks_per_page = 2#------------------------------------------------------------------------------# VERSION/PLATFORM COMPATIBILITY#------------------------------------------------------------------------------# - Previous PostgreSQL Versions -#array_nulls = on#backslash_quote = safe_encoding#default_with_oids = off#escape_string_warning = on#lo_compat_privileges = off#operator_precedence_warning = off#quote_all_identifiers = off#standard_conforming_strings = on#synchronize_seqscans = on# - Other Platforms and Clients -#transform_null_equals = off#------------------------------------------------------------------------------# ERROR HANDLING#------------------------------------------------------------------------------#exit_on_error = off#restart_after_crash = on#data_sync_retry = off#------------------------------------------------------------------------------# CONFIG FILE INCLUDES#------------------------------------------------------------------------------#include_dir = ''#include_if_exists = ''#include = ''#------------------------------------------------------------------------------# CUSTOMIZED OPTIONS#------------------------------------------------------------------------------# Add settings for extensions herepg_hba.conf基于主机认证的配置文件默认的配置文件好多注释，看着不方便简化之后如下123456789# TYPE DATABASE USER ADDRESS METHOD# 默认配置数据库主机以socket、127.0.0.1、::1的方式连接数据库可以跳过认证阶段直接登录数据库local all all trusthost all all 127.0.0.1/32 trusthost all all ::1/128 trust# 配置app_user可以基于用户名密码+MD5加密算法从0.0.0.0/0访问数据库服务，并且是能访问所有databaseshost all all 0.0.0.0/0 md5# 配置app_user可以基于用户名密码+MD5加密算法从*.exmpale.com访问数据库服务，只能访问app_db1和app_db2host app_db1,app_db2 app_user .exmpale.com md5pg_hba.conf的配置选项非常多，更详细的资料可以查看配置文件自带的注释或者查看pgsql中文社区PostgreSQL10的中文版手册，链接在这激活数据库配置注释里没提及change requires restart，可以通过reload的方式加载配置12su - postgresql/usr/pgsql-10/bin/pg_ctl reload -D $PGDATA注释里明确列明了change requires restart，只能restart的方式重启数据库才能生效12su - postgresql/usr/pgsql-10/bin/pg_ctl restart -D $PGDATAPostgreSQL日志日志路径默认路径在数据目录的log目录里面，%PGDATA/log1log_filename = 'postgresql-%a.log'其中%a是指星期几的缩写作为标识，例如postgresql-Mon.log、postgresql-Tue.log自定义文件名postgresql.conf里面的参数控制日志的文件名1log_filename = 'postgresql-%Y%m%d.log'日志轮转在postgresql.conf可以定义这些参数每天生成一个日志文件1234log_filename = 'postgresql-%Y%m%d.log'log_truncate_on_rotation = offlog_rotation_age = 1dlog_rotation_size = 0每天一个日志文件，只保留7天日志，循环覆盖之前的日志1234log_filename = 'postgresql-%a.log'log_truncate_on_rotation = onlog_rotation_age = 1dlog_rotation_size = 0增加PATH变量切换到postgres用户1su - postgres修改~/.bash_profile12PGHOME='/usr/pgsql-10'export PATH=$&#123;PGHOME&#125;/bin:$&#123;PATH&#125;","categories":[],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://luanlengli.github.io/tags/PostgreSQL/"}]},{"title":"Prometheus搭建简单的监控告警系统","slug":"Prometheus搭建简单的监控告警系统","date":"2019-05-01T02:26:45.000Z","updated":"2019-05-21T07:16:12.347Z","comments":true,"path":"2019/05/01/Prometheus搭建简单的监控告警系统.html","link":"","permalink":"https://luanlengli.github.io/2019/05/01/Prometheus搭建简单的监控告警系统.html","excerpt":"","text":"说明使用的操作系统为CentOS 7.6.1810，其他系统请自己根据差异做对应调整仅用于记录部署过程告警通知对接了邮件和钉钉机器人安装在监控告警系统主机上安装prometheus、alertmanager和grafana被监控的主机安装各种各样的exporter，每个exporter只监控自身的服务状态环境准备123456# 创建prometheus配置目录mkdir -p /etc/prometheus /etc/prometheus/rules.d# 创建prometheus用户useradd prometheus# 修改属主属组chown -R prometheus:prometheus /etc/prometheus软件包prometheusprometheus-v2.9.2123456789101112# 下载解压wget -O - https://github.com/prometheus/prometheus/releases/download/v2.9.2/prometheus-2.9.2.linux-amd64.tar.gz | tar xz# 创建数据目录mkdir -p /var/lib/prometheuschwon -R prometheus:prometheus /var/lib/prometheus# 拷贝文件到对应位置cd prometheus-2.9.2.linux-amd64chown -R prometheus:prometheus prometheus promtool console_libraries consoles prometheus.ymlmv prometheus promtool /usr/local/bin/mv console_libraries consoles prometheus.yml /etc/prometheus/alertmanageralertmanager-v0.17.0123456789101112# 下载解压wget -O - https://github.com/prometheus/alertmanager/releases/download/v0.17.0/alertmanager-0.17.0.linux-amd64.tar.gz | tar xz# 创建数据目录mkdir -p /var/lib/prometheuschwon -R prometheus:prometheus /var/lib/prometheus# 拷贝文件cd alertmanager-0.17.0.linux-amd64chown -R prometheus:prometheus alertmanager alertmanager.yml amtoolmv alertmanager amtool /usr/local/bin/mv alertmanager.yml /etc/prometheusnode_exporternode_exporter-v0.18.0123456# 下载解压wget -O - https://github.com/prometheus/node_exporter/releases/download/v0.18.0/node_exporter-0.18.0.linux-amd64.tar.gz | tar xzcd node_exporter-0.18.0.linux-amd64chown prometheus:prometheus node_exporter# 拷贝文件mv node_exporter /usr/local/bin/mysqld_exportermysqld_exporter-v0.11.0123456# 下载解压wget -O - https://github.com/prometheus/mysqld_exporter/releases/download/v0.11.0/mysqld_exporter-0.11.0.linux-amd64.tar.gz | tar xzcd mysqld_exporter-0.11.0.linux-amd64chown prometheus:prometheus mysqld_exporter# 拷贝文件mv mysqld_exporter /usr/local/bin/postgresql_exporter123456# 下载解压wget -O - https://github.com/wrouesnel/postgres_exporter/releases/download/v0.4.7/postgres_exporter_v0.4.7_linux-amd64.tar.gz | tar xzcd postgres_exporter_v0.4.7_linux-amd64chown prometheus:prometheus postgres_exporter# 拷贝文件mv postgres_exporter /usr/local/bin/blackbox_exporterblackbox_exporter-v0.14.01234567# 下载解压wget -O - https://github.com/prometheus/blackbox_exporter/releases/download/v0.14.0/blackbox_exporter-0.14.0.linux-amd64.tar.gz | tar xzcd blackbox_exporter-0.14.0.linux-amd64chown prometheus:prometheus blackbox_exporter blackbox.yml# 拷贝文件mv blackbox_exporter /usr/local/bin/mv blackbox.yml /etc/prometheus/grafanagrafana-v6.1.6123# 下载wget https://dl.grafana.com/oss/release/grafana-6.1.6-1.x86_64.rpmyum localinstall grafana-6.1.6-1.x86_64.rpm配置Prometheus/etc/prometheus/prometheus.yml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950global: scrape_interval: 15s scrape_timeout: 10s evaluation_interval: 15salerting: alertmanagers: - static_configs: - targets: - localhost:9093 scheme: http timeout: 10srule_files:- /etc/prometheus/rules.d/*.rulesscrape_configs:- job_name: prometheus honor_timestamps: true scrape_interval: 5s scrape_timeout: 5s metrics_path: /metrics scheme: http static_configs: - targets: - localhost:9090- job_name: node-exporter honor_timestamps: true scrape_interval: 5s scrape_timeout: 5s metrics_path: /metrics scheme: http static_configs: - targets: - localhost:9100- job_name: mysqld-exporter honor_timestamps: true scrape_interval: 5s scrape_timeout: 5s metrics_path: /metrics scheme: http static_configs: - targets: - localhost:9104- job_name: postgresql-exporter honor_timestamps: true scrape_interval: 5s scrape_timeout: 5s metrics_path: /metrics scheme: http static_configs: - targets: - localhost:9187/etc/prometheus/rules.d/host-status.rules12345678910111213141516171819202122232425262728293031323334353637383940414243groups: - name: host-status-rule rules: - alert: NodeFilesystemSpaceUsage expr: ( 1 - (node_filesystem_avail_bytes&#123;fstype=~\"ext[234]|btrfs|xfs|zfs\"&#125; / node_filesystem_size_bytes&#123;fstype=~\"ext[234]|btrfs|xfs|zfs\"&#125;) ) * 100 &gt; 85 for: 1m labels: team: node annotations: summary: \"&#123;&#123;$labels.instance&#125;&#125;: 文件系统空间使用率过高\" description: \"&#123;&#123;$labels.instance&#125;&#125;: 文件系统空间使用率超过 85% (当前使用率: &#123;&#123; $value &#125;&#125;)\" - alert: NodeFilesystemInodeUsage expr: ( 1 - (node_filesystem_files_free&#123;fstype=~\"ext[234]|btrfs|xfs|zfs\"&#125; / node_filesystem_files&#123;fstype=~\"ext[234]|btrfs|xfs|zfs\"&#125;) ) * 100 &gt; 80 for: 1m labels: team: node annotations: summary: \"&#123;&#123;$labels.instance&#125;&#125;: 文件系统inode使用率过高\" description: \"&#123;&#123;$labels.instance&#125;&#125;: 文件系统inode使用率超过 80% (当前使用率: &#123;&#123; $value &#125;&#125;)\" - alert: NodeFilesystemReadOnly expr: node_filesystem_readonly&#123;job=\"node-exporter\",device!~'rootfs'&#125; == 1 for: 1m labels: team: node annotations: summary: \"&#123;&#123;$labels.instance&#125;&#125;: 文件系统只读状态\" description: \"&#123;&#123;$labels.instance&#125;&#125;: 文件系统只读状态\" - alert: NodeMemoryUsage expr: (node_memory_MemTotal - (node_memory_MemFree+node_memory_Buffers+node_memory_Cached )) / node_memory_MemTotal * 100 &gt; 80 for: 1m labels: team: node annotations: summary: \"&#123;&#123;$labels.instance&#125;&#125;: 内存使用率过高\" description: \"&#123;&#123;$labels.instance&#125;&#125;: 内存使用率过高超过80% (当前使用率: &#123;&#123; $value &#125;&#125;)\" - alert: NodeCPUUsage expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total&#123;mode='idle',job=\"node-exporter\"&#125;[1m])) * 100)) &gt; 80 for: 1m labels: team: node annotations: summary: \"&#123;&#123;$labels.instance&#125;&#125;: CPU使用率过高\" description: \"&#123;&#123;$labels.instance&#125;&#125;: CPU使用率超过80% (当前使用率: &#123;&#123; $value &#125;&#125;)\"/etc/prometheus/rules.d/mysql-status.rules123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131groups: - name: MySQLStatsAlert rules: - alert: MySQL is down expr: mysql_up == 0 for: 1m labels: severity: critical annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; MySQL is down\" description: \"MySQL database is down. This requires immediate action!\" - alert: open files high expr: mysql_global_status_innodb_num_open_files &gt; (mysql_global_variables_open_files_limit) * 0.75 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; open files high\" description: \"Open files is high. Please consider increasing open_files_limit.\" - alert: Read buffer size is bigger than max. allowed packet size expr: mysql_global_variables_read_buffer_size &gt; mysql_global_variables_slave_max_allowed_packet for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Read buffer size is bigger than max. allowed packet size\" description: \"Read buffer size (read_buffer_size) is bigger than max. allowed packet size (max_allowed_packet).This can break your replication.\" - alert: Sort buffer possibly missconfigured expr: mysql_global_variables_innodb_sort_buffer_size &lt;256*1024 or mysql_global_variables_read_buffer_size &gt; 4*1024*1024 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Sort buffer possibly missconfigured\" description: \"Sort buffer size is either too big or too small. A good value for sort_buffer_size is between 256k and 4M.\" - alert: Thread stack size is too small expr: mysql_global_variables_thread_stack &lt;196608 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Thread stack size is too small\" description: \"Thread stack size is too small. This can cause problems when you use Stored Language constructs for example. A typical is 256k for thread_stack_size.\" - alert: Used more than 80% of max connections limited expr: mysql_global_status_max_used_connections &gt; mysql_global_variables_max_connections * 0.8 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Used more than 80% of max connections limited\" description: \"Used more than 80% of max connections limited\" - alert: InnoDB Force Recovery is enabled expr: mysql_global_variables_innodb_force_recovery != 0 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; InnoDB Force Recovery is enabled\" description: \"InnoDB Force Recovery is enabled. This mode should be used for data recovery purposes only. It prohibits writing to the data.\" - alert: InnoDB Log File size is too small expr: mysql_global_variables_innodb_log_file_size &lt; 16777216 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; InnoDB Log File size is too small\" description: \"The InnoDB Log File size is possibly too small. Choosing a small InnoDB Log File size can have significant performance impacts.\" - alert: InnoDB Flush Log at Transaction Commit expr: mysql_global_variables_innodb_flush_log_at_trx_commit != 1 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; InnoDB Flush Log at Transaction Commit\" description: \"InnoDB Flush Log at Transaction Commit is set to a values != 1. This can lead to a loss of commited transactions in case of a power failure.\" - alert: Table definition cache too small expr: mysql_global_status_open_table_definitions &gt; mysql_global_variables_table_definition_cache for: 1m labels: severity: page annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Table definition cache too small\" description: \"Your Table Definition Cache is possibly too small. If it is much too small this can have significant performance impacts!\" - alert: Table open cache too small expr: mysql_global_status_open_tables &gt;mysql_global_variables_table_open_cache * 99/100 for: 1m labels: severity: page annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Table open cache too small\" description: \"Your Table Open Cache is possibly too small (old name Table Cache). If it is much too small this can have significant performance impacts!\" - alert: Thread stack size is possibly too small expr: mysql_global_variables_thread_stack &lt; 262144 for: 1m labels: severity: page annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Thread stack size is possibly too small\" description: \"Thread stack size is possibly too small. This can cause problems when you use Stored Language constructs for example. A typical is 256k for thread_stack_size.\" - alert: InnoDB Plugin is enabled expr: mysql_global_variables_ignore_builtin_innodb == 1 for: 1m labels: severity: page annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; InnoDB Plugin is enabled\" description: \"InnoDB Plugin is enabled\" - alert: Binary Log is disabled expr: mysql_global_variables_log_bin != 1 for: 1m labels: severity: warning annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Binary Log is disabled\" description: \"Binary Log is disabled. This prohibits you to do Point in Time Recovery (PiTR).\" - alert: Binlog Cache size too small expr: mysql_global_variables_binlog_cache_size &lt; 1048576 for: 1m labels: severity: page annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Binlog Cache size too small\" description: \"Binlog Cache size is possibly to small. A value of 1 Mbyte or higher is OK.\" - alert: Binlog Transaction Cache size too small expr: mysql_global_variables_binlog_cache_size &lt; 1048576 for: 1m labels: severity: page annotations: summary: \"Instance &#123;&#123; $labels.instance &#125;&#125; Binlog Transaction Cache size too small\" description: \"Binlog Transaction Cache size is possibly to small. A value of 1 Mbyte or higher is typically OK.\"/etc/prometheus/rules.d/postgresql-status.rulesgroups:- name: PostgreSQL-Status-Alert rules: ########## EXPORTER RULES ########## - alert: PGExporterScrapeError expr: pg_exporter_last_scrape_error &gt; 0 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: summary: 'Postgres Exporter running on &#123;&#123; $labels.job &#125;&#125; (instance: &#123;&#123; $labels.instance &#125;&#125;) is encountering scrape errors processing queries. Error count: ( &#123;&#123; $value &#125;&#125; )' - alert: NodeExporterScrapeError expr: node_textfile_scrape_error &gt; 0 for: 60s labels: service: system severity: critical severity_num: 300 annotations: summary: 'Node Exporter running on &#123;&#123; $labels.job &#125;&#125; (instance: &#123;&#123; $labels.instance &#125;&#125;) is encountering scrape errors processing custom metrics. Error count: ( &#123;&#123; $value &#125;&#125; )'########## POSTGRESQL RULES ########## - alert: PGIsUp expr: pg_up &lt; 1 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: summary: 'postgres_exporter running on &#123;&#123; $labels.job &#125;&#125; is unable to communicate with the configured database'# Whether a system switches from primary to replica or vice versa must be configured per named job.# No way to tell what value a system is supposed to be without a rule expression for that specific system# 2 to 1 means it changed from primary to replica. 1 to 2 means it changed from replica to primary# Set this alert for each system that you want to monitor a recovery status change# Below is an example for a target job called \"Replica\" and watches for the value to change above 1 which means it's no longer a replica## - alert: PGRecoveryStatusSwitch_Replica # expr: ccp_is_in_recovery_status&#123;job=\"Replica\"&#125; &gt; 1 # for: 60s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# summary: '&#123;&#123; $labels.job &#125;&#125; has changed from replica to primary'# Absence alerts must be configured per named job, otherwise there's no way to know which job is down# Below is an example for a target job called \"Prod\"# - alert: PGConnectionAbsent# expr: absent(ccp_connection_stats_max_connections&#123;job=\"Prod\"&#125;)# for: 10s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# description: 'Connection metric is absent from target (Prod). Check that postgres_exporter can connect to PostgreSQL.' - alert: PGIdleTxn expr: ccp_connection_stats_max_idle_in_txn_time &gt; 300 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: '&#123;&#123; $labels.job &#125;&#125; has at least one session idle in transaction for over 5 minutes.' summary: 'PGSQL Instance idle transactions' - alert: PGIdleTxn expr: ccp_connection_stats_max_idle_in_txn_time &gt; 900 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: '&#123;&#123; $labels.job &#125;&#125; has at least one session idle in transaction for over 15 minutes.' summary: 'PGSQL Instance idle transactions' - alert: PGQueryTime expr: ccp_connection_stats_max_query_time &gt; 43200 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: '&#123;&#123; $labels.job &#125;&#125; has at least one query running for over 12 hours.' summary: 'PGSQL Max Query Runtime' - alert: PGQueryTime expr: ccp_connection_stats_max_query_time &gt; 86400 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: '&#123;&#123; $labels.job &#125;&#125; has at least one query running for over 1 day.' summary: 'PGSQL Max Query Runtime' - alert: PGConnPerc expr: 100 * (ccp_connection_stats_total / ccp_connection_stats_max_connections) &gt; 75 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: '&#123;&#123; $labels.job &#125;&#125; is using 75% or more of available connections (&#123;&#123; $value &#125;&#125;%)' summary: 'PGSQL Instance connections' - alert: PGConnPerc expr: 100 * (ccp_connection_stats_total / ccp_connection_stats_max_connections) &gt; 90 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: '&#123;&#123; $labels.job &#125;&#125; is using 90% or more of available connections (&#123;&#123; $value &#125;&#125;%)' summary: 'PGSQL Instance connections' - alert: PGDBSize expr: ccp_database_size &gt; 1.073741824e+11 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; over 100GB in size: &#123;&#123; $value &#125;&#125; bytes' summary: 'PGSQL Instance size warning' - alert: PGDBSize expr: ccp_database_size &gt; 2.68435456e+11 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; over 250GB in size: &#123;&#123; $value &#125;&#125; bytes' summary: 'PGSQL Instance size critical' - alert: PGReplicationByteLag expr: ccp_replication_status_byte_lag &gt; 5.24288e+07 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; has at least one replica lagging over 50MB behind.' summary: 'PGSQL Instance replica lag warning' - alert: PGReplicationByteLag expr: ccp_replication_status_byte_lag &gt; 1.048576e+08 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; has at least one replica lagging over 100MB behind.' summary: 'PGSQL Instance replica lag warning' - alert: PGReplicationSlotsInactive expr: ccp_replication_slots_active == 0 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; has one or more inactive replication slots' summary: 'PGSQL Instance inactive replication slot' - alert: PGXIDWraparound expr: ccp_transaction_wraparound_percent_towards_wraparound &gt; 50 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; is over 50% towards transaction id wraparound.' summary: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; transaction id wraparound imminent' - alert: PGXIDWraparound expr: ccp_transaction_wraparound_percent_towards_wraparound &gt; 75 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; is over 75% towards transaction id wraparound.' summary: 'PGSQL Instance transaction id wraparound imminent' - alert: PGEmergencyVacuum expr: ccp_transaction_wraparound_percent_towards_emergency_autovac &gt; 75 for: 60s labels: service: postgresql severity: warning severity_num: 200 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; is over 75% towards emergency autovacuum processes beginning' summary: 'PGSQL Instance emergency vacuum imminent' - alert: PGEmergencyVacuum expr: ccp_transaction_wraparound_percent_towards_emergency_autovac &gt; 90 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; is over 90% towards emergency autovacuum processes beginning' summary: 'PGSQL Instance emergency vacuum imminent' - alert: PGArchiveCommandStatus expr: ccp_archive_command_status_seconds_since_last_fail &gt; 300 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'PGSQL Instance &#123;&#123; $labels.job &#125;&#125; has a recent failing archive command' summary: 'Seconds since the last recorded failure of the archive_command' - alert: PGSequenceExhaustion expr: ccp_sequence_exhaustion_count &gt; 0 for: 60s labels: service: postgresql severity: critical severity_num: 300 annotations: description: 'Count of sequences on instance &#123;&#123; $labels.job &#125;&#125; at over 75% usage: &#123;&#123; $value &#125;&#125;. Run following query to see full sequence status: SELECT * FROM monitor.sequence_status() WHERE percent &gt;= 75'########## SYSTEM RULES ########## - alert: ExporterDown expr: avg_over_time(up[5m]) &lt; 0.9 for: 10s labels: service: system severity: critical severity_num: 300 annotations: description: 'Metrics exporter service for &#123;&#123; $labels.job &#125;&#125; running on &#123;&#123; $labels.instance &#125;&#125; has been down at least 50% of the time for the last 5 minutes. Service may be flapping or down.' summary: 'Prometheus Exporter Service Down' - alert: DiskUsagePerc expr: (100 - 100 * sum(node_filesystem_avail_bytes&#123;device!~\"tmpfs|by-uuid\",fstype=~\"xfs|ext\"&#125; / node_filesystem_size_bytes&#123;device!~\"tmpfs|by-uuid\",fstype=~\"xfs|ext\"&#125;) BY (job,device)) &gt; 70 for: 2m labels: service: system severity: warning severity_num: 200 annotations: description: 'Disk usage on target &#123;&#123; $labels.job &#125;&#125; at &#123;&#123; $value &#125;&#125;%' - alert: DiskUsagePerc expr: (100 - 100 * sum(node_filesystem_avail_bytes&#123;device!~\"tmpfs|by-uuid\",fstype=~\"xfs|ext\"&#125; / node_filesystem_size_bytes&#123;device!~\"tmpfs|by-uuid\",fstype=~\"xfs|ext\"&#125;) BY (job,device)) &gt; 85 for: 2m labels: service: system severity: critical severity_num: 300 annotations: description: 'Disk usage on target &#123;&#123; $labels.job &#125;&#125; at &#123;&#123; $value &#125;&#125;%' - alert: DiskFillPredict expr: predict_linear(node_filesystem_free_bytes&#123;device!~\"tmpfs|by-uuid\",fstype=~\"xfs|ext\"&#125;[1h], 4 * 3600) &lt; 0 for: 5m labels: service: system severity: warning severity_num: 200 annotations: description: '(EXPERIMENTAL) Disk &#123;&#123; $labels.device &#125;&#125; on target &#123;&#123; $labels.job &#125;&#125; is predicted to fill in 4 hrs based on current usage' - alert: SystemLoad5m expr: node_load5 &gt; 5 for: 10m labels: service: system severity: warning severity_num: 200 annotations: description: 'System load for target &#123;&#123; $labels.job &#125;&#125; is high (&#123;&#123; $value &#125;&#125;)' - alert: SystemLoad5m expr: node_load5 &gt; 10 for: 10m labels: service: system severity: critical severity_num: 300 annotations: description: 'System load for target &#123;&#123; $labels.job &#125;&#125; is high (&#123;&#123; $value &#125;&#125;)' - alert: MemoryAvailable expr: (100 * (node_memory_Available_bytes) / node_memory_MemTotal_bytes) &lt; 25 for: 1m labels: service: system severity: warning severity_num: 200 annotations: description: 'Memory available for target &#123;&#123; $labels.job &#125;&#125; is at &#123;&#123; $value &#125;&#125;%' - alert: MemoryAvailable expr: (100 * (node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes) &lt; 10 for: 1m labels: service: system severity: critical severity_num: 300 annotations: description: 'Memory available for target &#123;&#123; $labels.job &#125;&#125; is at &#123;&#123; $value &#125;&#125;%' - alert: SwapUsage expr: (100 - (100 * (node_memory_SwapFree_bytes / node_memory_SwapTotal_bytes))) &gt; 60 for: 1m labels: service: system severity: warning severity_num: 200 annotations: description: 'Swap usage for target &#123;&#123; $labels.job &#125;&#125; is at &#123;&#123; $value &#125;&#125;%' - alert: SwapUsage expr: (100 - (100 * (node_memory_SwapFree_byte / node_memory_SwapTotal_bytes))) &gt; 80 for: 1m labels: service: system severity: critical severity_num: 300 annotations: description: 'Swap usage for target &#123;&#123; $labels.job &#125;&#125; is at &#123;&#123; $value &#125;&#125;%'########## PGBACKREST RULES ############ Uncomment and customize one or more of these rules to monitor your pgbackrest backups. # Full backups are considered the equivalent of both differentials and incrementals since both are based on the last full# And differentials are considered incrementals since incrementals will be based off the last diff if one exists# This avoid false alerts, for example when you don't run diff/incr backups on the days that you run a full# Stanza should also be set if different intervals are expected for each stanza. # Otherwise rule will be applied to all stanzas returned on target system if not set.# Otherwise, all backups returned by the pgbackrest info command run from where the database exists will be checked## Relevant metric names are: # ccp_backrest_last_full_time_since_completion_seconds# ccp_backrest_last_incr_time_since_completion_seconds# ccp_backrest_last_diff_time_since_completion_seconds## - alert: PGBackRestLastCompletedFull_main# expr: ccp_backrest_last_full_backup_time_since_completion_seconds&#123;stanza=\"main\"&#125; &gt; 604800# for: 60s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# summary: 'Full backup for stanza [main] on system &#123;&#123; $labels.job &#125;&#125; has not completed in the last week.'## - alert: PGBackRestLastCompletedIncr_main# expr: ccp_backrest_last_incr_backup_time_since_completion_seconds&#123;stanza=\"main\"&#125; &gt; 86400# for: 60s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# summary: 'Incremental backup for stanza [main] on system &#123;&#123; $labels.job &#125;&#125; has not completed in the last 24 hours.'### Runtime monitoring is handled with a single metric:## ccp_backrest_last_runtime_backup_runtime_seconds## Runtime monitoring should have the \"backup_type\" label set. # Otherwise the rule will apply to the last run of all backup types returned (full, diff, incr)# Stanza should also be set if runtimes per stanza have different expected times## - alert: PGBackRestLastRuntimeFull_main# expr: ccp_backrest_last_runtime_backup_runtime_seconds&#123;backup_type=\"full\", stanza=\"main\"&#125; &gt; 14400# for: 60s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# summary: 'Expected runtime of full backup for stanza [main] has exceeded 4 hours'## - alert: PGBackRestLastRuntimeDiff_main# expr: ccp_backrest_last_runtime_backup_runtime_seconds&#123;backup_type=\"diff\", stanza=\"main\"&#125; &gt; 3600# for: 60s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# summary: 'Expected runtime of diff backup for stanza [main] has exceeded 1 hour'##### If the pgbackrest command fails to run, the metric disappears from the exporter output and the alert never fires. ## An absence alert must be configured explicitly for each target (job) that backups are being monitored.## Checking for absence of just the full backup type should be sufficient (no need for diff/incr).## Note that while the backrest check command failing will likely also cause a scrape error alert, the addition of this ## check gives a clearer answer as to what is causing it and that something is wrong with the backups.## - alert: PGBackrestAbsentFull_Prod# expr: absent(ccp_backrest_last_full_backup_time_since_completion_seconds&#123;job=\"Prod\"&#125;)# for: 10s# labels:# service: postgresql# severity: critical# severity_num: 300# annotations:# description: 'Backup Full status missing for Prod. Check that pgbackrest info command is working on target system.'Alertmanager/etc/prometheus/alertmanager.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758global: resolve_timeout: 5m http_config: &#123;&#125; smtp_from: monitor@example.com smtp_hello: localhost smtp_smarthost: smtp.example.com:465 smtp_auth_username: monitor@example.com smtp_auth_password: '这里写密码' smtp_require_tls: false pagerduty_url: https://events.pagerduty.com/v2/enqueue hipchat_api_url: https://api.hipchat.com/ opsgenie_api_url: https://api.opsgenie.com/ wechat_api_url: https://qyapi.weixin.qq.com/cgi-bin/ victorops_api_url: https://alert.victorops.com/integrations/generic/20131114/alert/route: # 这里配置默认路由到'default-receiver' receiver: default-receiver group_by: - alertname - cluster group_wait: 10s group_interval: 10s repeat_interval: 1hinhibit_rules:- source_match: severity: critical target_match: severity: warning equal: - alertname - dev - instancereceivers:- name: default-receiver email_configs: - send_resolved: false to: monitor@example.com from: monitor@example.com hello: localhost smarthost: smtp.example.com:465 auth_username: monitor@example.com auth_password: '这里写密码' headers: From: monitor@example.com Subject: '&#123;&#123; template \"email.default.subject\" . &#125;&#125;' To: monitor@example.com html: '&#123;&#123; template \"email.default.html\" . &#125;&#125;' require_tls: false # 配置钉钉机器人 webhook_configs: - send_resolved: false url: http://localhost:8060/dingtalk/webhook001/send# 配置钉钉机器人- name: dingtalk002 webhook_configs: - send_resolved: false url: http://localhost:8060/dingtalk/webhook002/sendtemplates: []配置dingtalk webhook程序123456789# 这里偷懒用docker跑钉钉的webhookdocker run -d \\ --restart=always \\ --name prometheus-webhook-dingtalk \\ -p 8060:8060 \\ -v /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro \\ timonwong/prometheus-webhook-dingtalk \\ --ding.profile=\"webhook001=https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxxxxx\" \\ --ding.profile=\"webhook002=https://oapi.dingtalk.com/robot/send?access_token=yyyyyyyyyyy\"blackbox_exporter/etc/prometheus/backbox_exporter.yml1没空搞，占个位mysqld_exporter需要创建用于监控的数据库用户123CREATE USER 'prometheus'@'127.0.0.1' IDENTIFIED BY 'prometheus_password' WITH MAX_USER_CONNECTIONS 3;GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'prometheus'@'127.0.0.1';flush privileges;postgresql_exporter根据需求决定是否使用superuser作为postgresql_exporter的数据库用户如果要创建专用用户可以参照下面的方式创建用户12345678910111213141516171819202122232425262728293031# 创建postgresql_exporter专用用户CREATE USER postgres_exporter PASSWORD 'password';ALTER USER postgres_exporter SET SEARCH_PATH TO postgres_exporter,pg_catalog;# 创建schemaCREATE SCHEMA postgres_exporter;# 授权schemaGRANT USAGE ON SCHEMA postgres_exporter TO postgres_exporter;# 创建函数CREATE FUNCTION get_pg_stat_activity() RETURNS SETOF pg_stat_activity AS$$ SELECT * FROM pg_catalog.pg_stat_activity; $$LANGUAGE sqlVOLATILESECURITY DEFINER;# 创建视图CREATE VIEW postgres_exporter.pg_stat_activityAS SELECT * from get_pg_stat_activity();# 视图授权GRANT SELECT ON postgres_exporter.pg_stat_activity TO postgres_exporter;# 创建函数CREATE FUNCTION get_pg_stat_replication() RETURNS SETOF pg_stat_replication AS$$ SELECT * FROM pg_catalog.pg_stat_replication; $$LANGUAGE sqlVOLATILESECURITY DEFINER;# 创建视图CREATE VIEW postgres_exporter.pg_stat_replicationAS SELECT * FROM get_pg_stat_replication();# 视图授权GRANT SELECT ON postgres_exporter.pg_stat_replication TO postgres_exporter;grafana偷懒警告！这里定义管理员用户密码，还有secret_key，记得自己改，别瞎抄作业！生产环境不要用默认密码，不然有你哭的时候[security]admin_user = adminadmin_password = adminsecret_key = SW2YcwTIb9zpOOhoPsMm/etc/grafana/grafana.ini123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172app_mode = production[paths]data = /var/lib/grafanatemp_data_lifetime = 24hlogs = /var/log/grafanaplugins = /var/lib/grafana/plugins[server]protocol = httphttp_port = 3000domain = gkhtroot_url = http://localhost:3000enable_gzip = true[database]log_queries =[remote_cache][session]provider = file[dataproxy][analytics]reporting_enabled = falsecheck_for_updates = false[security]admin_user = adminadmin_password = adminsecret_key = SW2YcwTIb9zpOOhoPsMm[snapshots][dashboards]versions_to_keep = 10[users]default_theme = dark[auth][auth.anonymous]enabled = trueorg_role = Viewer[auth.github][auth.google][auth.generic_oauth][auth.grafana_com][auth.proxy][auth.basic][auth.ldap][smtp][emails][log]mode = console filelevel = info[log.console][log.file]log_rotate = truedaily_rotate = truemax_days = 7[log.syslog][alerting]enabled = trueexecute_alerts = true[explore][metrics]enabled = trueinterval_seconds = 10[metrics.graphite][tracing.jaeger][grafana_com]url = https://grafana.com[external_image_storage][external_image_storage.s3][external_image_storage.webdav][external_image_storage.gcs][external_image_storage.azure_blob][external_image_storage.local][rendering][enterprise][panels]systemd服务prometheus.service/usr/lib/systemd/system/prometheus.service12345678910111213141516171819[Unit]Description=prometheusAfter=network.target[Service]Type=simpleUser=prometheusExecStart=/usr/local/bin/prometheus \\ --config.file=/etc/prometheus/prometheus.yml \\ --storage.tsdb.path=/var/lib/prometheus \\ --storage.tsdb.retention.time=15d \\ --storage.tsdb.retention.size=40GB \\ --web.console.templates=/etc/prometheus/consoles \\ --web.console.libraries=/etc/prometheus/console_librariesExecReload=/bin/kill -HUP $MAINPIDRestart=on-failureRestartSec=60s[Install]WantedBy=multi-user.targetalertmanager.servicce/usr/lib/systemd/system/alertmanager.service1234567891011121314[Unit]Description=alertmanagerAfter=network.target[Service]Type=simpleUser=prometheusExecStart=/usr/local/bin/alertmanager \\ --config.file=/etc/prometheus/alertmanager.yml \\ --storage.path=/var/lib/alertmanager \\ --data.retention=120hRestart=on-failureRestartSec=60s[Install]WantedBy=multi-user.targetnode_exporter.service/usr/lib/systemd/system/node_exporter.service1234567891011[Unit]Description=node_exporterAfter=network.target[Service]Type=simpleUser=prometheusExecStart=/usr/local/bin/node_exporterRestart=on-failureRestartSec=60s[Install]WantedBy=multi-user.targetblackbox_exporter.service/usr/lib/systemd/system/balckbox_exporter.service1234567891011121314[Unit]Description=blackbox_exporterAfter=network.target[Service]Type=simpleUser=prometheusExecStart=/usr/local/bin/blackbox_exporter \\ --config.file=/etc/prometheus/blackbox.yml \\ --web.listen-address=:9115 \\ --log.level=info Restart=on-failureRestartSec=60s[Install]WantedBy=multi-user.targetmysqld_exporter.service/usr/lib/systemd/system/mysqld_exporter.service12345678910111213141516171819202122[Unit]Description=mysqld_exporterAfter=network.target[Service]Type=simpleUser=prometheusEnvironment='DATA_SOURCE_NAME=prometheus:prometheus_password@tcp(127.0.0.1:3306)'ExecStart=/usr/local/bin/mysqld_exporter \\ --collect.engine_innodb_status \\ --collect.info_schema.innodb_metrics \\ --collect.info_schema.userstats \\ --collect.perf_schema.eventsstatements \\ --collect.perf_schema.indexiowaits \\ --collect.perf_schema.tableiowaits \\ --collect.slave_status \\ --log.level=info \\ --web.listen-address=:9104 \\ --web.telemetry-path=/metricsRestart=on-failureRestartSec=60s[Install]WantedBy=multi-user.targetpostgresql_exporter.service/usr/lib/systemd/system/postgresql_exporter.service12345678910111213141516[Unit]Description=postgresql_exporterAfter=network.target[Service]Type=simpleUser=prometheusEnvironment=DATA_SOURCE_NAME=postgresql://postgres_exporter:password@localhost:5432/postgres?sslmode=disableExecStart=/usr/local/bin/postgresql_exporter \\ --web.listen-address=:9187 \\ --web.telemetry-path=/metrics \\ --log.level=info \\ --log.format=logger:stderrRestart=on-failureRestartSec=60s[Install]WantedBy=multi-user.target启动服务修改了systemd脚本之后需要reload一下1systemctl daemon-reloadprometheus1systemctl enable --now prometheus.servicealertmanager1systemctl enable --now alertmanager.servicenode_exporter1systemctl enable --now node_exporter.servicegrafana1systemctl enable --now grafana.service其他其他服务同理，择需启动对应的服务即可验证服务prometheus浏览器访问http://prometheus_server_ip:9090alertmanager浏览器访问http://prometheus_server_ip:9093node_exporter浏览器访问http://prometheus_server_ip:9100grafana浏览器访问http://prometheus_server_ip:3000默认用户密码admin/admin，初次登录需要改密码配置grafana监控面板这里很多作业可以抄，这里简单列举几个我用到的面板抄作业之前，先看看人家的说明！node_exporter面板1 Node Exporter 0.16–0.18 for Prometheus 监控展示看板mysqld_exporter面板Percona出品的dashboard第三方人员提供的dashboardpostgresql_exporter面板Postgres Overviewkong面板kong官方提供的dashboard","categories":[],"tags":[{"name":"Prometheus","slug":"Prometheus","permalink":"https://luanlengli.github.io/tags/Prometheus/"}]},{"title":"Shell处理xml文件的简单方法","slug":"Shell处理xml文件的简单方法","date":"2019-04-09T01:51:59.000Z","updated":"2019-04-09T10:25:55.000Z","comments":true,"path":"2019/04/09/Shell处理xml文件的简单方法.html","link":"","permalink":"https://luanlengli.github.io/2019/04/09/Shell处理xml文件的简单方法.html","excerpt":"","text":"说明工作中遇到需要使用shell命令编辑xml文件，以shell自带的命令去处理非常的不方便，于是乎找了一下处理xml的命令行工具。在此记录一下处理过程准备操作系统CentOS-7.x软件包libxml2、xml2、xmlstarlet操作样例准备一个xml文件，这里以Apache maven的settings.xml为例lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements. See the NOTICE filedistributed with this work for additional informationregarding copyright ownership. The ASF licenses this fileto you under the Apache License, Version 2.0 (the\"License\"); you may not use this file except in compliancewith the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied. See the License for thespecific language governing permissions and limitationsunder the License.--&gt;&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file provides configuration for a single user, | and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -s /path/to/user/settings.xml | | 2. Global Level. This settings.xml file provides configuration for all Maven | users on a machine (assuming they're all using the same Maven | installation). It's normally provided in | $&#123;maven.conf&#125;/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; &lt;!-- interactiveMode | This will determine whether maven prompts you when it needs input. If set to false, | maven will use a sensible default value, perhaps based on some other setting, for | the parameter in question. | | Default: true &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt; &lt;!-- offline | Determines whether maven should attempt to connect to the network when executing a build. | This will have an effect on artifact downloads, artifact deployment, and others. | | Default: false &lt;offline&gt;false&lt;/offline&gt; --&gt; &lt;!-- pluginGroups | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e. | when invoking a command line like \"mvn prefix:goal\". Maven will automatically add the group identifiers | \"org.apache.maven.plugins\" and \"org.codehaus.mojo\" if these are not already contained in the list. |--&gt; &lt;pluginGroups&gt; &lt;!-- pluginGroup | Specifies a further group identifier to use for plugin lookup. &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt; --&gt; &lt;/pluginGroups&gt; &lt;!-- proxies | This is a list of proxies which can be used on this machine to connect to the network. | Unless otherwise specified (by system property or command-line switch), the first proxy | specification in this list marked as active will be used. |--&gt; &lt;proxies&gt; &lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. | &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; --&gt; &lt;/proxies&gt; &lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--&gt; &lt;servers&gt; &lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the 'id' attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; --&gt; &lt;!-- Another sample, using keys to authenticate. &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt; &lt;/server&gt; --&gt; &lt;/servers&gt; &lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt; &lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;/mirrors&gt; &lt;!-- profiles | This is a list of profiles which can be activated in a variety of ways, and which can modify | the build process. Profiles provided in the settings.xml are intended to provide local machine- | specific paths and repository locations which allow the build to work in the local environment. | | For example, if you have an integration testing plugin - like cactus - that needs to know where | your Tomcat instance is installed, you can provide a variable here such that the variable is | dereferenced during the build process to configure the cactus plugin. | | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles | section of this document (settings.xml) - will be discussed later. Another way essentially | relies on the detection of a system property, either matching a particular value for the property, | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'. | Finally, the list of active profiles can be specified directly from the command line. | | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact | repositories, plugin repositories, and free-form properties to be used as configuration | variables for plugins in the POM. | |--&gt; &lt;profiles&gt; &lt;!-- profile | Specifies a set of introductions to the build process, to be activated using one or more of the | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt; | or the command line, profiles have to have an ID that is unique. | | An encouraged best practice for profile identification is to use a consistent naming convention | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc. | This will make it more intuitive to understand what the set of introduced profiles is attempting | to accomplish, particularly when you only have a list of profile id's for debug. | | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo. &lt;profile&gt; &lt;id&gt;jdk-1.4&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jdk14&lt;/id&gt; &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt; &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; --&gt; &lt;!-- | Here is another profile, activated by the system property 'target-env' with a value of 'dev', | which provides a specific path to the Tomcat instance. To use this, your plugin configuration | might hypothetically look like: | | ... | &lt;plugin&gt; | &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt; | &lt;artifactId&gt;myplugin&lt;/artifactId&gt; | | &lt;configuration&gt; | &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt; | &lt;/configuration&gt; | &lt;/plugin&gt; | ... | | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to | anything, you could just leave off the &lt;value/&gt; inside the activation-property. | &lt;profile&gt; &lt;id&gt;env-dev&lt;/id&gt; &lt;activation&gt; &lt;property&gt; &lt;name&gt;target-env&lt;/name&gt; &lt;value&gt;dev&lt;/value&gt; &lt;/property&gt; &lt;/activation&gt; &lt;properties&gt; &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt; &lt;/properties&gt; &lt;/profile&gt; --&gt; &lt;/profiles&gt; &lt;!-- activeProfiles | List of profiles that are active for all builds. | &lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; --&gt;&lt;/settings&gt;在国内使用maven都需要在settings.xml里面配置国内的mirrors，以加速maven下载依赖包的过程。这里以阿里云的为例，需要在settings.xml文件里面添加如下内容12345678910&lt;mirrors&gt; ... &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; ...&lt;/mirrors&gt;操作过程处理settings.xml将settings.xml处理成容易处理的字符串清理注释123456789xmlstarlet ed -d '//comment()' settings.xml | grep -v mirrors | xml2# 输出实例/settings/@xmlns=http://maven.apache.org/SETTINGS/1.0.0/settings/@xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance/settings/@xsi:schemaLocation=http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd/settings/pluginGroups/settings/proxies/settings/servers/settings/profiles处理mirror配置同样使用xml2处理xml12345678910111213141516171819cat &gt; aliyun_mirror.xml &lt;&lt;EOF&lt;settings&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;EOFxml2 &lt; aliyun_mirror.xml# 输出示例settings/mirrors/mirror/id=alimavensettings/mirrors/mirror/name=aliyun mavensettings/mirrors/mirror/url=http://maven.aliyun.com/nexus/content/groups/public/settings/mirrors/mirror/mirrorOf=central合并配置1234567891011121314Settings=$(xmlstarlet ed -d '//comment()' settings.xml | grep -v mirrors | xml2)AliyunMirror=$(xml2 &lt; aliyun_mirror.xml)printf \"$Settings\\n$AliyunMirror\"# 输出示例/settings/@xmlns=http://maven.apache.org/SETTINGS/1.0.0/settings/@xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance/settings/@xsi:schemaLocation=http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd/settings/pluginGroups/settings/proxies/settings/servers/settings/profiles/settings/mirrors/mirror/id=alimaven/settings/mirrors/mirror/name=aliyun maven/settings/mirrors/mirror/url=http://maven.aliyun.com/nexus/content/groups/public//settings/mirrors/mirror/mirrorOf=central将字符串转换成xml格式文件这里将输出结果打印在终端，可以直接重定向到settings.xml文件1234567891011121314151617printf \"$Settings\\n$AliyunMirror\" | 2xml | xmllint --format -# 输出示例&lt;?xml version=\"1.0\"?&gt;&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;pluginGroups/&gt; &lt;proxies/&gt; &lt;servers/&gt; &lt;profiles/&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://luanlengli.github.io/tags/shell/"}]},{"title":"git pull免密码配置","slug":"git-pull免密码配置","date":"2019-04-07T14:25:00.000Z","updated":"2019-04-07T14:29:35.000Z","comments":true,"path":"2019/04/07/git-pull免密码配置.html","link":"","permalink":"https://luanlengli.github.io/2019/04/07/git-pull免密码配置.html","excerpt":"","text":"说明git 拉取代码的时候，如果不使用密钥的方式时，会要求输入用户密码，非常繁琐为此需要配置免账号密码登录配置过程切换到用户家目录1cd ~运行git命令1git config --global credential.helper store此命令会在用户家目录生成一个.gitconfig，内容如下12[credential] helper = store再次运行git pull还是会提示输入用户密码，命令会在用户家目录生成.git-credentials文件，里面会保存刚才输入的用户密码。后续操作git的时候就不会要求输入用户密码了","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://luanlengli.github.io/tags/git/"}]},{"title":"阿里云RDS数据库MySQL5.7实例主从搭建过程","slug":"阿里云RDS数据库MySQL5-7实例主从搭建过程","date":"2019-04-06T03:16:33.000Z","updated":"2019-04-25T15:26:30.000Z","comments":true,"path":"2019/04/06/阿里云RDS数据库MySQL5-7实例主从搭建过程.html","link":"","permalink":"https://luanlengli.github.io/2019/04/06/阿里云RDS数据库MySQL5-7实例主从搭建过程.html","excerpt":"","text":"说明工作中遇到需要搭建阿里云RDS数据库MySQL5.7实例主从集群，在此记录搭建过程主库阿里云RDS数据库MySQL5.7实例从库本地服务器MySQL5.7，通过公网访问阿里云RDS实例阿里云RDS实例准备操作登录阿里云管理控制台选择【云数据库RDS版】切换到【云数据库RDS版】界面，左上角选择【数据中心】，在【实例列表】中找到主库，点击右侧的【管理】在【基本信息】可以看到主库的【外网地址】和端口外网地址示例：rm-xxxxxxxxxxxxxxx.mysql.rds.aliyuncs.com端口：3306切换到【账号管理】，点击【创建账号】用户名：repuser密码：repuserpassword账号类型：普通帐号授权数据库：选择需要同步的数据库，选择完毕后，权限统一设置为【只读】登录阿里云RDS实例，查看主库信息show variables like &#39;%binlog_format%&#39;;show variables like &#39;server_id&#39;;从库安装MySQL5.7，这里网上很多教程，自行解决修改从库my.cnf12345678910111213[mysqld]# 这里的server-id要跟RDS主库查询到的server-id不一样server-id = 3306 log_bin = /data/mysql-dataexpire_logs_days = 7max_binlog_size = 100Mreplicate-ignore-db = ccccc #不想同步的数据库replicate-ignore-db = ddddd #不想同步的数据库# 启动GTID gtid_mode = onenforce_gtid_consistency = onbinlog_format = row #设置 binlog 为 rowlog-slave-updates = 1在从库上对阿里云RDS实例做一次dump备份假设我们要同步的是aaa和bbb两个库12345678mysqldump -u'repuser' \\ -h'rm-xxxxxxxxxxxxxxx.mysql.rds.aliyuncs.com' \\ -P 3306 \\ -p'repuserpassword' \\ --set-gtid-purged=ON \\ --master-data=2 \\ --single-transaction \\ --databases aaa bbb &gt; aliyun_rds_dump.sql从库导入dump备份1234mysql -u'root' \\ -p \\ -P3306 \\ &lt; aliyun_rds_dump.sql设置从库启用基于GTID的主从同步1234567mysql&gt; change master to master_host = &apos;xxxxxxxxxxxxxxx.mysql.rds.aliyuncs.com&apos;, master_port = 3306, master_user = &apos;repuser&apos;, master_password=&apos;repuserpassword&apos;, master_connect_retry=10, master_auto_position=1;mysql&gt; start slave;检查主从同步状态12mysql&gt; show slave status \\Gmysql&gt; show processlist \\G","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://luanlengli.github.io/tags/MySQL/"}]},{"title":"MySQL常用SQL语句","slug":"MySQL常用SQL语句","date":"2019-03-29T01:54:19.000Z","updated":"2019-04-16T13:32:12.000Z","comments":true,"path":"2019/03/29/MySQL常用SQL语句.html","link":"","permalink":"https://luanlengli.github.io/2019/03/29/MySQL常用SQL语句.html","excerpt":"","text":"查看所有数据库大小12345678SELECT table_schema AS '数据库', Sum(table_rows) AS '记录数', Sum(Truncate(data_length / 1024 / 1024, 2)) AS '数据容量(MB)', Sum(Truncate(index_length / 1024 / 1024, 2)) AS '索引容量(MB)'FROM information_schema.tablesGROUP BY table_schemaORDER BY Sum(data_length) DESC, Sum(index_length) DESC;查看数据库各表大小12345678SELECT table_schema AS '数据库', table_name AS '表名', table_rows AS '记录数', TRUNCATE(data_length / 1024 / 1024, 2) AS '数据容量(MB)', TRUNCATE(index_length / 1024 / 1024, 2) AS '索引容量(MB)'FROM information_schema.TABLESORDER BY data_length DESC, index_length DESC;查看指定数据库大小123456SELECT table_schema AS '数据库', Sum(table_rows) AS '记录数', Sum(Truncate(data_length / 1024 / 1024, 2)) AS '数据容量(MB)', Sum(Truncate(index_length / 1024 / 1024, 2)) AS '索引容量(MB)'FROM information_schema.tablesWHERE table_schema = 'mysql';查看指定数据库各表大小123456789SELECT table_schema AS '数据库', table_name AS '表名', table_rows AS '记录数', TRUNCATE(data_length / 1024 / 1024, 2) AS '数据容量(MB)', TRUNCATE(index_length / 1024 / 1024, 2) AS '索引容量(MB)'FROM information_schema.TABLESWHERE table_schema = 'mysql'ORDER BY data_length DESC, index_length DESC;建库时指定字符集和排序规则123CREATE DATABASE DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://luanlengli.github.io/tags/MySQL/"}]},{"title":"Elasticsearch-学习笔记","slug":"Elasticsearch-学习笔记","date":"2019-02-22T15:28:10.000Z","updated":"2019-03-03T14:13:12.000Z","comments":true,"path":"2019/02/22/Elasticsearch-学习笔记.html","link":"","permalink":"https://luanlengli.github.io/2019/02/22/Elasticsearch-学习笔记.html","excerpt":"","text":"_cat APIs通过访问elasticsearch集群的/_cat可以获取很多有用的信息。使用curl -X GET &quot;http://elasticsearch:9200/_cat&quot;可以单独列出所有可用的命令1234567891011121314151617181920212223242526272829curl -X GET \"http://elasticsearch-1:9200/_cat/\"=^.^=/_cat/allocation/_cat/shards/_cat/shards/&#123;index&#125;/_cat/master/_cat/nodes/_cat/tasks/_cat/indices/_cat/indices/&#123;index&#125;/_cat/segments/_cat/segments/&#123;index&#125;/_cat/count/_cat/count/&#123;index&#125;/_cat/recovery/_cat/recovery/&#123;index&#125;/_cat/health/_cat/pending_tasks/_cat/aliases/_cat/aliases/&#123;alias&#125;/_cat/thread_pool/_cat/thread_pool/&#123;thread_pools&#125;/_cat/plugins/_cat/fielddata/_cat/fielddata/&#123;fields&#125;/_cat/nodeattrs/_cat/repositories/_cat/snapshots/&#123;repository&#125;/_cat/templates获取_cat API帮助可以在/_cat/COMMAND后面加上参数help，获取对应的帮助信息12345678910curl -XGET \"http://elasticsearch-1:9200/_cat/allocation?help\"shards | s | number of shards on node disk.indices | di,diskIndices | disk used by ES indices disk.used | du,diskUsed | disk used (total, not just ES)disk.avail | da,diskAvail | disk available disk.total | dt,diskTotal | total capacity of all volumes disk.percent | dp,diskPercent | percent disk used host | h | host of node ip | | ip of node node | n | name of node获取当前master信息123curl -XGET \"http://elasticsearch-1:9200/_cat/master?v\"id host ip nodeJLyKyWH_QnSiXXuRNCj_3g 172.16.80.201 172.16.80.201 elasticsearch-1获取节点信息123456789101112131415curl -XGET \"http://elasticsearch-1:9200/_cat/nodes?format=json&amp;pretty\"[ &#123; \"ip\" : \"172.16.80.201\", \"heap.percent\" : \"7\", \"ram.percent\" : \"85\", \"cpu\" : \"1\", \"load_1m\" : \"0.00\", \"load_5m\" : \"0.08\", \"load_15m\" : \"0.20\", \"node.role\" : \"mdi\", \"master\" : \"*\", \"name\" : \"elasticsearch-1\" &#125;]获取索引信息以json格式返回结果123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475curl -XGET -H \"Accept: application/json\" \"http://elasticsearch-1:9200/_cat/indices?format=json&amp;pretty\"[ &#123; \"health\" : \"yellow\", \"status\" : \"open\", \"index\" : \".kibana\", \"uuid\" : \"V_t2TnJKQ9WV8E1C_uzIfA\", \"pri\" : \"1\", \"rep\" : \"1\", \"docs.count\" : \"6\", \"docs.deleted\" : \"0\", \"store.size\" : \"37.3kb\", \"pri.store.size\" : \"37.3kb\" &#125;, &#123; \"health\" : \"yellow\", \"status\" : \"open\", \"index\" : \"bank\", \"uuid\" : \"3OEfeSwsTyKyC2zKHbuzJQ\", \"pri\" : \"5\", \"rep\" : \"1\", \"docs.count\" : \"1000\", \"docs.deleted\" : \"0\", \"store.size\" : \"640.8kb\", \"pri.store.size\" : \"640.8kb\" &#125;, &#123; \"health\" : \"yellow\", \"status\" : \"open\", \"index\" : \"logstash-2015.05.18\", \"uuid\" : \"h8m1NlTIQS6Z49mHACYokA\", \"pri\" : \"5\", \"rep\" : \"1\", \"docs.count\" : \"4631\", \"docs.deleted\" : \"0\", \"store.size\" : \"27mb\", \"pri.store.size\" : \"27mb\" &#125;, &#123; \"health\" : \"yellow\", \"status\" : \"open\", \"index\" : \"shakespeare\", \"uuid\" : \"xwoP7Pc3Q3ySZ47MosHrFA\", \"pri\" : \"5\", \"rep\" : \"1\", \"docs.count\" : \"111396\", \"docs.deleted\" : \"0\", \"store.size\" : \"29mb\", \"pri.store.size\" : \"29mb\" &#125;, &#123; \"health\" : \"yellow\", \"status\" : \"open\", \"index\" : \"logstash-2015.05.20\", \"uuid\" : \"ewX3DcZHScOK4Mi6lF6Hqg\", \"pri\" : \"5\", \"rep\" : \"1\", \"docs.count\" : \"4750\", \"docs.deleted\" : \"0\", \"store.size\" : \"30.3mb\", \"pri.store.size\" : \"30.3mb\" &#125;, &#123; \"health\" : \"yellow\", \"status\" : \"open\", \"index\" : \"logstash-2015.05.19\", \"uuid\" : \"siQA71vbSYOgE3a8M7HDhg\", \"pri\" : \"5\", \"rep\" : \"1\", \"docs.count\" : \"4624\", \"docs.deleted\" : \"0\", \"store.size\" : \"29.3mb\", \"pri.store.size\" : \"29.3mb\" &#125;]以yaml格式返回结果1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162curl -XGET \"http://elasticsearch-1:9200/_cat/indices?format=yaml&amp;pretty\"---- health: \"yellow\" status: \"open\" index: \".kibana\" uuid: \"V_t2TnJKQ9WV8E1C_uzIfA\" pri: \"1\" rep: \"1\" docs.count: \"6\" docs.deleted: \"0\" store.size: \"37.3kb\" pri.store.size: \"37.3kb\"- health: \"yellow\" status: \"open\" index: \"bank\" uuid: \"3OEfeSwsTyKyC2zKHbuzJQ\" pri: \"5\" rep: \"1\" docs.count: \"1000\" docs.deleted: \"0\" store.size: \"640.8kb\" pri.store.size: \"640.8kb\"- health: \"yellow\" status: \"open\" index: \"logstash-2015.05.18\" uuid: \"h8m1NlTIQS6Z49mHACYokA\" pri: \"5\" rep: \"1\" docs.count: \"4631\" docs.deleted: \"0\" store.size: \"27mb\" pri.store.size: \"27mb\"- health: \"yellow\" status: \"open\" index: \"shakespeare\" uuid: \"xwoP7Pc3Q3ySZ47MosHrFA\" pri: \"5\" rep: \"1\" docs.count: \"111396\" docs.deleted: \"0\" store.size: \"29mb\" pri.store.size: \"29mb\"- health: \"yellow\" status: \"open\" index: \"logstash-2015.05.20\" uuid: \"ewX3DcZHScOK4Mi6lF6Hqg\" pri: \"5\" rep: \"1\" docs.count: \"4750\" docs.deleted: \"0\" store.size: \"30.3mb\" pri.store.size: \"30.3mb\"- health: \"yellow\" status: \"open\" index: \"logstash-2015.05.19\" uuid: \"siQA71vbSYOgE3a8M7HDhg\" pri: \"5\" rep: \"1\" docs.count: \"4624\" docs.deleted: \"0\" store.size: \"29.3mb\" pri.store.size: \"29.3mb\"_cluster APIs官方文档见这里Cluster Health官方文档见这里1234567891011121314151617curl -XGET \"http://elasticsearch-1:9200/_cluster/health?format=yaml&amp;pretty\"---cluster_name: \"elasticsearch\"status: \"yellow\"timed_out: falsenumber_of_nodes: 1number_of_data_nodes: 1active_primary_shards: 26active_shards: 26relocating_shards: 0initializing_shards: 0unassigned_shards: 26delayed_unassigned_shards: 0number_of_pending_tasks: 0number_of_in_flight_fetch: 0task_max_waiting_in_queue_millis: 0active_shards_percent_as_number: 50.0Cluster State显示集群状态，官方文档见这里查看版本信息123456curl -XGET \"http://elasticsearch-1:9200/_cluster/state/version?\" &#123; \"cluster_name\" : \"elasticsearch\", \"version\" : 16, \"state_uuid\" : \"w0Bp1nGfRdCGxhA5zD1BBw\"&#125;查看master节点12345curl -XGET \"http://elasticsearch-1:9200/_cluster/state/master_node?format=json&amp;pretty\"&#123; \"cluster_name\" : \"elasticsearch\", \"master_node\" : \"JLyKyWH_QnSiXXuRNCj_3g\"&#125;查看节点123456789101112curl -XGET \"http://elasticsearch-1:9200/_cluster/state/nodes?format=json&amp;pretty\"&#123; \"cluster_name\" : \"elasticsearch\", \"nodes\" : &#123; \"JLyKyWH_QnSiXXuRNCj_3g\" : &#123; \"name\" : \"elasticsearch-1\", \"ephemeral_id\" : \"qdnVkiizToCVPhmDieH3Mg\", \"transport_address\" : \"172.16.80.201:9300\", \"attributes\" : &#123; &#125; &#125; &#125;&#125;Cluster States显示集群统计信息，官方文档见这里1curl -XGET \"http://elasticsearch-1:9200/_cluster/stats?format=json&amp;pretty\"Cluster Update Settings用于更新集群设置，可以永久persistent和临时transient设置某些参数新启动的集群是没有配置的信息12345curl -XGET \"http://elasticsearch-1:9200/_cluster/settings?format=json&amp;pretty\"&#123; \"persistent\" : &#123; &#125;, \"transient\" : &#123; &#125;&#125;临时修改集群recovery最大速度123456789curl -XPUT \\ -H \"Content-Type: application/json\" \\ \"http://elasticsearch-1:9200/_cluster/settings?format=json&amp;pretty\" \\ -d '&#123; \"persistent\" : &#123; \"indices.recovery.max_bytes_per_sec\" : \"50mb\" &#125;&#125;'Node Stats1curl -XGET \"http://elasticsearch-1:9200/_nodes/stats?format=json&amp;pretty\"Node Info12345678910111213141516171819202122# 不带过滤参数，默认显示所有节点信息GET /_nodes# 获取所有节点信息GET /_nodes/_all# 获取当前节点信息GET /_nodes/_local# 获取master节点信息GET /_nodes/_master# 以主机名作为条件过滤节点，或者使用通配符匹配节点GET /_nodes/node_name_goes_hereGET /_nodes/node_name_goes_*# 可以使用IP地址加通配符过滤节点GET /_nodes/10.0.0.3,10.0.0.4GET /_nodes/10.0.0.*# 以role作为过滤条件GET /_nodes/_all,master:falseGET /_nodes/data:true,ingest:trueGET /_nodes/coordinating_only:true# 根据elasticsearch.yml文件定义的node.attr.rack属性过滤节点，例如`node.attr.rack: 2`GET /_nodes/rack:2GET /_nodes/ra*:2GET /_nodes/ra*:2*插件官方文档见这里二进制文件elasticsearch/bin/elasticsearch-plugin查看默认可用的插件12345678910111213141516171819202122232425262728elasticsearch-plugin install --helpInstall a pluginThe following official plugins may be installed by name: analysis-icu analysis-kuromoji analysis-phonetic analysis-smartcn analysis-stempel analysis-ukrainian discovery-azure-classic discovery-ec2 discovery-file discovery-gce ingest-attachment ingest-geoip ingest-user-agent lang-javascript lang-python mapper-attachments mapper-murmur3 mapper-size repository-azure repository-gcs repository-hdfs repository-s3 store-smb x-packCRUD新增索引12345678910curl -X PUT \"http://elasticsearch-1:9200/twitter\" -H 'Content-Type: application/json' -d'&#123; \"settings\" : &#123; \"index\" : &#123; \"number_of_shards\" : 3, \"number_of_replicas\" : 2 &#125; &#125;&#125;'删除索引1curl -X DELETE \"http://elasticsearch-1:9200/twitter\"获取索引1curl -X GET \"http://elasticsearch-1:9200/twitter\"更新索引123456789curl -X PUT \"http://elasticsearch-1:9200/twitter/_settings\" \\ -H 'Content-Type: application/json' \\ -d'&#123; \"index\" : &#123; \"number_of_replicas\" : 2 &#125;&#125;'新增文档1234567891011121314151617181920212223242526curl -XPUT \"http://elasticsearch-1:9200/students/class1/1?pretty\" -d '&#123; \"first_name\": \"Jing\", \"last_name\": \"Guo\", \"gender\": \"Male\", \"age\": 25, \"courses\": \"Xiang Long Shi Ba Zhang\"&#125;'curl -XPUT \"http://elasticsearch-1:9200/students/class1/2?pretty\" -d '&#123; \"first_name\": \"Rong\", \"last_name\": \"Huang\", \"gender\": \"Female\", \"age\": 23, \"courses\": \"Luo Ying Shen Jian Zhang\"&#125;'curl -XPUT \"http://elasticsearch-1:9200/students/class2/1?pretty\" -d '&#123; \"first_name\": \"Guo\", \"last_name\": \"Yang\", \"gender\": \"Male\", \"age\": 2, \"courses\": \"An Ran Xiao Hun Zhang\"&#125;'获取文档123456789101112131415161718192021222324252627282930curl -XGET \"http://elasticsearch-1:9200/students/class1/1?pretty\"&#123; \"_index\" : \"students\", \"_type\" : \"class1\", \"_id\" : \"1\", \"_version\" : 3, \"found\" : true, \"_source\" : &#123; \"first_name\" : \"Jing\", \"last_name\" : \"Guo\", \"gender\" : \"Male\", \"age\" : 25, \"courses\" : \"Xiang Long Shi Ba Zhang\" &#125;&#125;curl -XGET \"http://elasticsearch-1:9200/students/class1/2?pretty\"&#123; \"_index\" : \"students\", \"_type\" : \"class1\", \"_id\" : \"2\", \"_version\" : 1, \"found\" : true, \"_source\" : &#123; \"first_name\" : \"Rong\", \"last_name\" : \"Huang\", \"gender\" : \"Female\", \"age\" : 23, \"courses\" : \"Luo Ying Shen Jian Zhang\" &#125;&#125;更新文档直接PUT覆盖使用_updateAPI12345678curl -XPOST \"http://elasticsearch-1:9200/students/class1/2/_update?pretty\" \\ -H \"Accept: application/json\" \\ -d '&#123; \"doc\" : &#123; \"age\" : 22 &#125;&#125;'删除文档1curl -XDELETE \"http://elasticsearch-1:9200/students/class1/2?pretty\"查询数据Query DSL官方文档查询操作阶段分散阶段合并阶段查询方式通过Restful API查询，查询参数见官方文档1curl -XGET \"http://elasticsearch-1:9200/students/_search?pretty\"通过发送REST request body查询，查询参数见官方文档1234567891011121314151617181920212223242526# 匹配所有curl -XGET \"http://elasticsearch-1:9200/students/_search?pretty\" -d '&#123; \"query\": &#123; \"match_all\": &#123;&#125; &#125;&#125;'# 匹配年龄curl -XGET \"http://elasticsearch-1:9200/students/_search?pretty\" -d '&#123; \"query\":&#123; \"bool\":&#123; \"must\":[ &#123; \"range\":&#123; \"age\":&#123; \"gt\":\"21\", \"lt\":\"24\" &#125; &#125; &#125; ] &#125; &#125;&#125;'多索引、多类型查询_search：所有索引/INDEX_NAME/_search：单索引/INDEX1,INDEX2/_search：多索引/students/class1/_search：单类型搜索/students/class1,class2/_search：多类型搜索Mapping和AnalysisElasticsearch对每个文档，会取得所有域的所有值，生成一个名为“_all”的域执行查询的时候，如果未指定query_string，则在“_all”域上执行查询操作1234# 在_all域搜索curl /_search?q=\"Keyword\"# 在指定的FIELD_NAME这个域搜索curl /_search?q=FIELD_NAME:\"Keyword\"数据类型见官方文档arraybinaryrangebooleandategeo-pointgeo-shapeIPkeywordnestednumericobjecttexttoken countpercolatrojoin","categories":[],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://luanlengli.github.io/tags/elasticsearch/"}]},{"title":"Elasticsearch-5.6.x安装配置","slug":"Elasticsearch-5-6-x安装配置","date":"2019-02-21T09:57:55.000Z","updated":"2019-05-21T03:15:10.572Z","comments":true,"path":"2019/02/21/Elasticsearch-5-6-x安装配置.html","link":"","permalink":"https://luanlengli.github.io/2019/02/21/Elasticsearch-5-6-x安装配置.html","excerpt":"","text":"系统环境CentOS-7准备两台服务器，做elasticsearch集群1yum update -yhosts静态解析123127.0.0.1 localhost172.16.80.201 elasticsearch-1172.16.80.202 elasticsearch-2Oracle JDK-8u20112345678910111213141516# 切换工作目录cd /usr/local/# 下载JDK并解压wget --no-check-certificate \\ -O - \\ -c \\ --header \"Cookie: oraclelicense=accept-securebackup-cookie\" \"https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz\" \\ | tar xz # 创建软链接ln -sv /usr/local/jdk1.8.0_201 /usr/local/jdk# 设置环境变量cat &gt; /etc/profile.d/java.sh &lt;&lt;EOFexport JAVA_HOME=/usr/local/jdkexport PATH=$JAVA_HOME/bin:$PATH EOFsource /etc/profile.d/java.sh创建elasticsearch用户1useradd esuser修改limits1234cat &gt; /etc/security/limits.d/esuser.conf &lt;&lt;EOFesuser - nofile 262144esuser - memlock unlimitedEOF修改内核参数123456sysctl -w vm.max_map_count=262144cat &gt; /etc/sysctl.d/elasticsearch.conf &lt;&lt;EOFvm.max_map_count=262144# 内存耗尽才使用swap分区vm.swappiness = 0EOF安装elasticsearch下载elasticsearch12345cd /usr/local/wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.15.tar.gztar xzf elasticsearch-5.6.15.tar.gzln -sv /usr/local/elasticsearch-5.6.15 /usr/local/elasticsearchchown -R esuser:esuser /usr/local/elasticsearch /usr/local/elasticsearch-5.6.15配置elasticsearch修改config/elasticsearch.yml1234567891011121314151617181920212223# 定义节点名字node.name: elasticsearch-1# 定义数据目录path.data: /home/esuser/data# 定义日志目录path.logs: /home/esuser/logs# 定义节点为masternode.master = true# 定义节点为datanode.data = true# 启动时锁定内存，避免内存被系统swap# 看情况开启，默认是关闭的#bootstrap.memory_lock: true# 定义监听端口network.host: 0.0.0.0# 定义服务端口http.port: 9200# 定义单播主机discovery.zen.ping.unicast.hosts:- elasticsearch-1- elasticsearch-2http.cors.enabled: truehttp.cors.allow-origin: \"*\"修改config/jvm.options这里只需要修改-Xms和-Xmx，默认是2g，最大不超过32g，两个选项的值保持一致设置elasticsearch系统变量123cat &gt; /home/esuser/elasticsearch &lt;&lt;EOFJAVA_HOME=/usr/local/jdkEOF添加PATH123cat &gt; /etc/profile.d/elasticsearch.sh &lt;&lt;EOFexport ES_HOME=\"/usr/local/elasticsearch\"export PATH=$ES_HOME/bin:$PATH创建systemd服务脚本1234567891011121314[Unit]Description=ElasticSearch ServiceAfter=network.target[Service]Type=simpleEnvironmentFile=-/home/esuser/elasticsearchExecStart=/usr/local/elasticsearch/bin/elasticsearchPIDFile=/usr/local/elasticsearch/run/elasticsearch.pidUser=esuserLimitNOFILE=262144LimitMEMLOCK=infinityRestart=on-failure[Install]WantedBy=default.target启动elasticsearch通过systemd命令启动12systemctl daemon-reloadsystemctl enable --now elasticsearch命令行启动1su -s /bin/sh -c \"/usr/local/elasticsearch/bin/elasticsearch -d\" esuser访问elasticsearch1234567891011121314curl http://127.0.0.1:9200/&#123; \"name\" : \"elasticsearch-1\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"JN0WSrAZQo2qWCaZrbDGjg\", \"version\" : &#123; \"number\" : \"5.6.15\", \"build_hash\" : \"fe7575a\", \"build_date\" : \"2019-02-13T16:21:45.880Z\", \"build_snapshot\" : false, \"lucene_version\" : \"6.6.1\" &#125;, \"tagline\" : \"You Know, for Search\"&#125;安装elasticsearch-head直接用容器启动1docker run --net=host --restart=always -d --name elasticsearch-head mobz/elasticsearch-head:5-alpine访问elasticsearch-headcurl -I http://127.0.0.1:9100","categories":[],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://luanlengli.github.io/tags/Elasticsearch/"}]},{"title":"MySQL5.7学习笔记","slug":"MySQL5-7学习笔记","date":"2019-02-15T10:33:01.000Z","updated":"2019-03-29T05:10:29.000Z","comments":true,"path":"2019/02/15/MySQL5-7学习笔记.html","link":"","permalink":"https://luanlengli.github.io/2019/02/15/MySQL5-7学习笔记.html","excerpt":"","text":"本文基于MySQL 5.7记录一、安装1、二进制安装1234567891011121314151617181920212223# 创建mysql相关的组和用户groupadd mysqluseradd -r -g mysql -s /bin/false mysql# 下载二进制包cd /usr/local/wget --no-check-certificate https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz# 解压tar xvzf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz# 将目录移动到/usr/local/mysqlln -s mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql# 创建数据库数据目录mkdir -p /path/to/mysql_data_dirchown -R mysql:mysql /path/to/mysql_data_dir# 使用叶金荣的配置生成工具创建my.cnf文件放在/etc/my.cnf# http://imysql.com/my-cnf-wizard.htmlchmod a+r /etc/my.cnfchown mysql:mysql /etc/my.cnf/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/mysql_data/usr/local/mysql/bin/mysql_ssl_rsa_setup --datadir=/mysql_data# 查看error.log文件里面的root密码grep password error.log | awk '&#123;print$NF&#125;'# 启动MySQLmysqld_safe --user=mysql &amp;2、rpm/deb软件源安装以CentOS7为例12345678910# 获取MySQL软件源yum install -y https://dev.mysql.com/get/mysql57-community-release-el7-1.noarch.rpm# 更新YUM缓存yum makecache# 安装MySQL5.7yum install mysql-community-server# 启动MySQLsystemctl start mysqld.service# 获取ROOT密码grep 'temporary password' /var/log/mysqld.log3、源码安装以CentOS7为例123456789101112131415161718192021222324252627282930313233343536373839404142# 安装编译环境yum -y install make gcc-c++ cmake bison-devel ncurses-devel# 下载MySQL源代码wget --no-check-certificate https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.24.tar.gz# 创建MySQL相关的组和用户groupadd mysqluseradd -r -g mysql -s /bin/false mysql# 创建MySQL相关文件夹mkdir -p /app/mysqlmkdir -p /app/datamkdir -p /app/etcmkdir -p /app/logchown -R mysql:mysql /app# 解压源代码tar xvzf mysql-boost-5.7.24.tar.gz# 创建cmake编译目录mkdir buildcd build# 使用CMake生成makefilecmake -DCMAKE_INSTALL_PREFIX=/app/mysql/ \\-DMYSQL_USER=mysql \\-DMYSQL_TCP_PORT=3306 \\-DMYSQL_UNIX_ADDR=/app/data/mysql.sock \\-DDEFAULT_CHARSET=utf8mb4 \\-DDEFAULT_COLLATION=utf8_general_ci \\-DEXTRA_CHARSETS=all \\-DWITH_READLINE=1 \\-DWITH_SYSTEMD=1 \\-DWITH_BOOST=/root/mysql-5.7.24/boost/boost_1_59_0/ \\/root/mysql-5.7.24/# 编译安装make &amp;&amp; make install# 使用叶金荣MySQL配置生成工具生成my.cnf放在/app/etc/my.cnf# http://imysql.com/my-cnf-wizard.htmlchown mysql:mysql /app/etc/my.cnf# 初始化MySQL数据库mysqld --initialize --defaults-file=/app/etc/my.cnf --user=mysql --basedir=/app/mysql/ --datadir=/app/data/mysql_ssl_rsa_setup --datadir=/app/data/# 启动MySQL数据库mysqld_safe --defaults-file=/app/etc/my.cnf --user=mysql &amp; # 获取MySQL ROOT密码grep password error.log | awk '&#123;print$NF&#125;'4、安装后设定4.1、安全设置1mysql_secure_installation4.2、建议设置关闭主机名反向解析，在配置文件的[mysqld]里面添加skip_name_resolve = 11234vi /etc/my.cnf[mysqld]...skip_name_resolve = 15、数据库连接5.1、mysql命令行客户端1mysql -uroot -ppassword -h127.0.0.1 -P3306 -D db15.2、MySQL Benchmark图形客户端官方网站下载页面6、获取MySQL编译的参数在MySQL目录的docs/INFO_BIN12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# 例如安装目录为/usr/local/mysql# MySQL官方YUM源安装的路径为/usr/share/doc/packages/MySQL-servercat /usr/local/bin/mysql/docs/INFO_BIN===== Information about the build process: =====Build was run at 2018-10-04 08:26:03 on host 'vitro45'Build was done on Linux-3.8.13-16.2.1.el6uek.x86_64 using x86_64Build was done using cmake 2.8.12 ===== Compiler flags used (from the 'sql/' subdirectory): =====# compile C with /usr/bin/cc# compile CXX with /usr/bin/c++C_FLAGS = -fPIC -Wall -Wextra -Wformat-security -Wvla -Wwrite-strings -Wdeclaration-after-statement -O3 -g -fabi-version=2 -fno-omit-frame-pointer -fno-strict-aliasing -DDBUG_OFF -I/export/home/pb2/build/sb_0-30854123-1538633287.09/release/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/rapidjson/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/release/libbinlogevents/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/libbinlogevents/export -isystem /export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/zlib -isystem /export/home/pb2/build/sb_0-30854123-1538633287.09/release/zlib -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/sql/conn_handler -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/libbinlogevents/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/sql -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/sql/auth -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/regex -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/yassl/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/yassl/taocrypt/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/release/sql -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/lz4 -isystem /export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/include/boost_1_59_0/patches -isystem /usr/global/share/boost_1_59_0 -DHAVE_YASSL -DYASSL_PREFIX -DHAVE_OPENSSL -DMULTI_THREADEDC_DEFINES = -DHAVE_CONFIG_H -DHAVE_LIBEVENT1 -DHAVE_REPLICATION -DMYSQL_SERVER -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCECXX_FLAGS = -fPIC -Wall -Wextra -Wformat-security -Wvla -Woverloaded-virtual -Wno-unused-parameter -O3 -g -fabi-version=2 -fno-omit-frame-pointer -fno-strict-aliasing -DDBUG_OFF -I/export/home/pb2/build/sb_0-30854123-1538633287.09/release/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/rapidjson/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/release/libbinlogevents/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/libbinlogevents/export -isystem /export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/zlib -isystem /export/home/pb2/build/sb_0-30854123-1538633287.09/release/zlib -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/sql/conn_handler -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/libbinlogevents/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/sql -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/sql/auth -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/regex -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/yassl/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/yassl/taocrypt/include -I/export/home/pb2/build/sb_0-30854123-1538633287.09/release/sql -I/export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/extra/lz4 -isystem /export/home/pb2/build/sb_0-30854123-1538633287.09/mysql-5.7.24/include/boost_1_59_0/patches -isystem /usr/global/share/boost_1_59_0 -DHAVE_YASSL -DYASSL_PREFIX -DHAVE_OPENSSL -DMULTI_THREADEDCXX_DEFINES = -DHAVE_CONFIG_H -DHAVE_LIBEVENT1 -DHAVE_REPLICATION -DMYSQL_SERVER -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCEPointer size: 8===== Feature flags used: =====-- Cache valuesBOOST_INCLUDE_DIR:PATH=/usr/global/share/boost_1_59_0BUILD_TESTING:BOOL=ONBUNDLE_MECAB:BOOL=ONCMAKE_BACKWARDS_COMPATIBILITY:STRING=2.4CMAKE_BUILD_TYPE:STRING=RelWithDebInfoCMAKE_INSTALL_PREFIX:PATH=/usr/local/mysqlCOMMUNITY_BUILD:BOOL=ONCTAGS_EXECUTABLE:FILEPATH=/usr/bin/ctagsDEB_CHANGELOG_TIMESTAMP:STRING=Thu, 04 Oct 2018 08:14:16 +0200DEB_CODENAME:STRING=n/aDOWNLOAD_BOOST:BOOL=OFFDOWNLOAD_BOOST_TIMEOUT:STRING=600ENABLED_PROFILING:BOOL=ONENABLE_DOWNLOADS:BOOL=OFFENABLE_GCOV:BOOL=OFFENABLE_GPROF:BOOL=OFFENABLE_MEMCACHED_SASL:BOOL=OFFENABLE_MEMCACHED_SASL_PWDB:BOOL=OFFEXECUTABLE_OUTPUT_PATH:PATH=FEATURE_SET:STRING=communityINSTALL_LAYOUT:STRING=STANDALONEINSTALL_PKGCONFIGDIR:PATH=LIBRARY_OUTPUT_PATH:PATH=LOCAL_BOOST_DIR:FILEPATH=/usr/global/share/boost_1_59_0LOCAL_BOOST_ZIP:FILEPATH=/usr/global/share/boost_1_59_0.tar.gzLOCAL_GMOCK_ZIP:FILEPATH=/usr/global/share/googletest-release-1.8.0.zipMECAB_INCLUDE_DIR:PATH=/export/home/pb2/build/sb_0-30854123-1538633287.09/mecab-0.996-el6-x86-64bit/includeMECAB_LIBRARY:FILEPATH=/export/home/pb2/build/sb_0-30854123-1538633287.09/mecab-0.996-el6-x86-64bit/lib/libmecab.aMERGE_UNITTESTS:BOOL=ONMUTEXTYPE:STRING=eventMYSQL_DATADIR:PATH=/usr/local/mysql/dataMYSQL_KEYRINGDIR:PATH=/usr/local/mysql/keyringMYSQL_MAINTAINER_MODE:BOOL=OFFOPTIMIZER_TRACE:BOOL=ONREPRODUCIBLE_BUILD:BOOL=OFFRPC_INCLUDE_DIR:PATH=/usr/includeSASL_SYSTEM_LIBRARY:FILEPATH=/usr/lib64/libsasl2.soTMPDIR:PATH=P_tmpdirWITH_ARCHIVE_STORAGE_ENGINE:BOOL=ONWITH_ASAN:BOOL=OFFWITH_ASAN_SCOPE:BOOL=OFFWITH_BLACKHOLE_STORAGE_ENGINE:BOOL=ONWITH_BOOST:PATH=/usr/global/shareWITH_CLIENT_PROTOCOL_TRACING:BOOL=ONWITH_DEBUG:BOOL=OFFWITH_DEFAULT_COMPILER_OPTIONS:BOOL=ONWITH_DEFAULT_FEATURE_SET:BOOL=ONWITH_EDITLINE:STRING=bundledWITH_EMBEDDED_SERVER:BOOL=ONWITH_EMBEDDED_SHARED_LIBRARY:BOOL=OFFWITH_EXTRA_CHARSETS:STRING=allWITH_FEDERATED_STORAGE_ENGINE:BOOL=ONWITH_INNODB_EXTRA_DEBUG:BOOL=OFFWITH_INNODB_MEMCACHED:BOOL=1WITH_LIBEVENT:STRING=bundledWITH_LIBWRAP:BOOL=OFFWITH_LZ4:STRING=bundledWITH_MECAB:STRING=/export/home/pb2/build/sb_0-30854123-1538633287.09/mecab-0.996-el6-x86-64bitWITH_MECAB_PATH:PATH=/export/home/pb2/build/sb_0-30854123-1538633287.09/mecab-0.996-el6-x86-64bitWITH_MSAN:BOOL=OFFWITH_NGRAM_PARSER:BOOL=ONWITH_NUMA:BOOL=ONWITH_PARTITION_STORAGE_ENGINE:BOOL=ONWITH_PIC:BOOL=ONWITH_RAPID:BOOL=ONWITH_SASL:STRING=systemWITH_SSL:STRING=bundledWITH_SYSTEMD:BOOL=OFFWITH_TEST_TRACE_PLUGIN:BOOL=OFFWITH_UBSAN:BOOL=OFFWITH_UNIT_TESTS:BOOL=ONWITH_VALGRIND:BOOL=OFFWITH_ZLIB:STRING=bundledXPLUGIN_LOG_PROTOBUF:STRING=1===== EOF =====二、配置数据库1、配置文件路径文件优先级，同一个参数以最后一个为准，启动时可指定–default-file=/path/to/my.cnf/etc/my.cnf/etc/mysql/my.cnf$MYSQL_HOME/my.cnf–default-extra-file=/path/to/*.cnf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139[client]port = 3306socket = /data/mysql/mysql.sock[mysql]prompt=&quot;\\u@mysqldb \\R:\\m:\\s [\\d]&gt; &quot;no-auto-rehash[mysqld]user = mysqlport = 3306basedir = /usr/local/mysqldatadir = /data/mysql/socket = /data/mysql/mysql.sockpid-file = mysqldb.pidcharacter-set-server = utf8mb4skip_name_resolve = 1open_files_limit = 65535back_log = 1024max_connections = 512max_connect_errors = 1000000table_open_cache = 1024table_definition_cache = 1024table_open_cache_instances = 64thread_stack = 512Kexternal-locking = FALSEmax_allowed_packet = 32Msort_buffer_size = 16Mjoin_buffer_size = 16Mthread_cache_size = 768interactive_timeout = 600wait_timeout = 600tmp_table_size = 96Mmax_heap_table_size = 96Mslow_query_log = 1slow_query_log_file = /data/mysql/slow.loglog-error = /data/mysql/error.loglong_query_time = 0.1log_queries_not_using_indexes =1log_throttle_queries_not_using_indexes = 60min_examined_row_limit = 100log_slow_admin_statements = 1log_slow_slave_statements = 1server-id = 3306log-bin = /data/mysql/mybinlogsync_binlog = 1binlog_cache_size = 4Mmax_binlog_cache_size = 2Gmax_binlog_size = 1Gexpire_logs_days = 7master_info_repository = TABLErelay_log_info_repository = TABLEgtid_mode = onenforce_gtid_consistency = 1log_slave_updatesslave-rows-search-algorithms = &apos;INDEX_SCAN,HASH_SCAN&apos;binlog_format = rowbinlog_checksum = 1relay_log_recovery = 1relay-log-purge = 1key_buffer_size = 32Mread_buffer_size = 8Mread_rnd_buffer_size = 16Mbulk_insert_buffer_size = 64Mmyisam_sort_buffer_size = 128Mmyisam_max_sort_file_size = 10Gmyisam_repair_threads = 1lock_wait_timeout = 3600explicit_defaults_for_timestamp = 1innodb_thread_concurrency = 0innodb_sync_spin_loops = 100innodb_spin_wait_delay = 30transaction_isolation = REPEATABLE-READ#innodb_additional_mem_pool_size = 16Minnodb_buffer_pool_size = 45875Minnodb_buffer_pool_instances = 4innodb_buffer_pool_load_at_startup = 1innodb_buffer_pool_dump_at_shutdown = 1innodb_data_file_path = ibdata1:1G:autoextendinnodb_flush_log_at_trx_commit = 1innodb_log_buffer_size = 32Minnodb_log_file_size = 2Ginnodb_log_files_in_group = 2innodb_max_undo_log_size = 2Ginnodb_undo_directory = undologinnodb_undo_tablespaces = 8# 根据您的服务器IOPS能力适当调整# 一般配普通SSD盘的话，可以调整到 10000 - 20000# 配置高端PCIe SSD卡的话，则可以调整的更高，比如 50000 - 80000innodb_io_capacity = 4000innodb_io_capacity_max = 8000innodb_flush_neighbors = 0innodb_write_io_threads = 8innodb_read_io_threads = 8innodb_purge_threads = 4innodb_page_cleaners = 4innodb_open_files = 65535innodb_max_dirty_pages_pct = 50innodb_flush_method = O_DIRECTinnodb_lru_scan_depth = 4000innodb_checksum_algorithm = crc32innodb_lock_wait_timeout = 10innodb_rollback_on_timeout = 1innodb_print_all_deadlocks = 1innodb_file_per_table = 1innodb_online_alter_log_max_size = 2Ginternal_tmp_disk_storage_engine = InnoDBinnodb_stats_on_metadata = 0# some var for MySQL 8log_error_verbosity = 3innodb_print_ddl_logs = 1binlog_expire_logs_seconds = 604800#innodb_dedicated_server = 0innodb_status_file = 1# 注意: 开启 innodb_status_output &amp; innodb_status_output_locks 后, 可能会导致log-error文件增长较快innodb_status_output = 0innodb_status_output_locks = 0#performance_schemaperformance_schema = 1performance_schema_instrument = &apos;%=on&apos;#innodb monitorinnodb_monitor_enable=&quot;module_innodb&quot;innodb_monitor_enable=&quot;module_server&quot;innodb_monitor_enable=&quot;module_dml&quot;innodb_monitor_enable=&quot;module_ddl&quot;innodb_monitor_enable=&quot;module_trx&quot;innodb_monitor_enable=&quot;module_os&quot;innodb_monitor_enable=&quot;module_purge&quot;innodb_monitor_enable=&quot;module_log&quot;innodb_monitor_enable=&quot;module_lock&quot;innodb_monitor_enable=&quot;module_buffer&quot;innodb_monitor_enable=&quot;module_index&quot;innodb_monitor_enable=&quot;module_ibuf_system&quot;innodb_monitor_enable=&quot;module_buffer_page&quot;innodb_monitor_enable=&quot;module_adaptive_hash&quot;[mysqld_safe][mysqld_multi][mysqldump]quickmax_allowed_packet = 32M[server]2、数据库变量2.1、查看数据库全局变量1mysql&gt; show global variables;2.2、查看数据库会话变量1mysql&gt; show session variables;3、开启MySQL SSL功能1234567891011121314151617# 使用MySQL自带工具生成证书mysql_ssl_rsa_setup --datadir=MYSQL_DATA_DIR# 证书默认存放data-dirll /mysql_data/*pem-rw------- 1 root root 1675 Oct 30 13:43 /mysql_data/ca-key.pem-rw-r--r-- 1 root root 1107 Oct 30 13:43 /mysql_data/ca.pem-rw-r--r-- 1 root root 1107 Oct 30 13:43 /mysql_data/client-cert.pem-rw------- 1 root root 1679 Oct 30 13:43 /mysql_data/client-key.pem-rw------- 1 root root 1675 Oct 30 13:43 /mysql_data/private_key.pem-rw-r--r-- 1 root root 451 Oct 30 13:43 /mysql_data/public_key.pem-rw-r--r-- 1 root root 1107 Oct 30 13:43 /mysql_data/server-cert.pem-rw------- 1 root root 1675 Oct 30 13:43 /mysql_data/server-key.pem# 配置文件指明SSL证书路径[mysqld]ssl-ca=/mysql_data/ca.pemssl-cert=/mysql_data/server-cert.pemssl-key=/mysql_data/server-key.pem123456789101112131415161718192021# 查看数据库SSL变量mysql&gt; show global variables like &apos;%ssl%&apos;;+---------------+-----------------------------+| Variable_name | Value |+---------------+-----------------------------+| have_openssl | DISABLED || have_ssl | DISABLED || ssl_ca | /mysql_data/ca.pem || ssl_capath | || ssl_cert | /mysql_data/server-cert.pem || ssl_cipher | || ssl_crl | || ssl_crlpath | || ssl_key | /mysql_data/server-key.pem |+---------------+-----------------------------+# 强制用户使用SSL登录mysql&gt; alter user &apos;username&apos;@&apos;host&apos; require ssl;# 创建用户时要求使用SSL登录mysql&gt; grant all privileges on dbname.tablename to &apos;username&apos;@&apos;host&apos; identified by &apos;password&apos; require ssl;# 取消强制用户使用SSL登录mysql&gt; alter user &apos;username&apos;@&apos;host&apos; require none;12345# 使用SSL证书登录数据库mysql -uUSERNAME -pPASSWORD -hHOSTNAME \\--ssl-ca=ca.pem \\--ssl-cert=client-cert.pem \\--ssl-key=client-key.pem三、事务隔离一组原子性SQL操作，或者是独立的工作单元。1、ACID1.1、Atomicity原子性整个事务中的所有操作要么全部执行成功，要么失败后完全回滚。1.2、Consistency一致性数据库总是从一个一致性状态转换到另一个一致性状态。1.3、Isolation隔离性一个事务的操作在提交之前，不能被其他会话所见。可分为多个隔离级别1.4、Durability永久性事务一旦提交，操作结果将永久保存到数据库中。2、锁机制2.1、写锁其他事务不能读取，也不能写。2.2、读锁其他事务可以读，但不能写。3、脏读脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。4、不可重复读是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。5、幻读指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。6、事务隔离级别默认是REPEATEABLE READ 可重复读6.1、READ UNCOMMITED读未提交事务间完全不隔离，会产生脏读，可以读取未提交的记录。6.2、READ COMMITED读已提交仅能读取到已提交的记录，不会脏读，会不可重复读，会幻读。6.3、REPEATABLE READ可重复读每次读取的结果集都相同，而不管其他事务有没有提交，但是无法阻止其他事务插入数据，因此可能导致幻读。6.4、SERIALIZABILE可串行化最严格的锁，在事务完成前，其他事务无法对数据对象进行写操作。并行性能最差。四、数据库日志1、查询日志 query log记录查询操作，产生额外IO消耗，一般不打开。12345678910111213mysql&gt; show global variables like &apos;%general%&apos;;+------------------+---------------------------+| Variable_name | Value |+------------------+---------------------------+| general_log | OFF || general_log_file | /var/log/hostname.log |+------------------+---------------------------+mysql&gt; show global variables like &apos;log_output&apos;;+---------------+-------+| Variable_name | Value |+---------------+-------+| log_output | FILE |+---------------+-------+2、慢查询日志 slow query log执行时长超过指定时长的查询操作12345678910111213141516mysql&gt; show global variables like &apos;long_query_time&apos;;+-----------------+----------+| Variable_name | Value |+-----------------+----------+| long_query_time | 0.100000 |+-----------------+----------+&gt; show global variables like &apos;%slow%&apos;;+---------------------------+-------------------------+| Variable_name | Value |+---------------------------+-------------------------+| log_slow_admin_statements | ON || log_slow_slave_statements | ON || slow_launch_time | 2 || slow_query_log | ON || slow_query_log_file | /var/log/mysql/slow.log |+---------------------------+-------------------------+3、错误日志 error log记录MySQL启动关闭过程输出的日志记录MySQL运行过程中产生的错误日志记录event scheduler运行event时产生的日志记录主从复制架构中从服务器上启动从服务器线程时产生的日志1234567891011&gt; show global variables like &apos;%error%&apos;;+---------------------+--------------------------+| Variable_name | Value |+---------------------+--------------------------+| binlog_error_action | ABORT_SERVER || log_error | /var/log/mysql/error.log || log_error_verbosity | 3 || max_connect_errors | 1000000 || max_error_count | 64 || slave_skip_errors | OFF |+---------------------+--------------------------+4、二进制日志 binary log4.1、介绍记录对mysql数据更新或潜在发生更新的SQL语句，并以”事务”的形式保存在磁盘中。用于通过“重放”日志生成数据副本。4.2、日志记录内容基于“语句”记录：statement基于“行”记录：row混合模式：mixed，由数据库自动判定4.3、日志文件构成日志文件：mysql-bin，二进制格式索引文件：mysql-bin.index，文本格式1234567891011121314151617181920212223242526272829303132mysql &gt; show global variables like &apos;%bin%&apos;;+--------------------------------------------+----------------------------+| Variable_name | Value |+--------------------------------------------+----------------------------+| binlog_cache_size | 4194304 || binlog_checksum | CRC32 || binlog_direct_non_transactional_updates | OFF || binlog_error_action | ABORT_SERVER || binlog_format | ROW || binlog_group_commit_sync_delay | 0 || binlog_group_commit_sync_no_delay_count | 0 || binlog_gtid_simple_recovery | ON || binlog_max_flush_queue_time | 0 || binlog_order_commits | ON || binlog_row_image | FULL || binlog_rows_query_log_events | OFF || binlog_stmt_cache_size | 32768 || binlog_transaction_dependency_history_size | 25000 || binlog_transaction_dependency_tracking | COMMIT_ORDER || innodb_api_enable_binlog | OFF || innodb_locks_unsafe_for_binlog | OFF || log_bin | ON || log_bin_basename | /mysql_data/mybinlog || log_bin_index | /mysql_data/mybinlog.index || log_bin_trust_function_creators | OFF || log_bin_use_v1_row_events | OFF || log_statements_unsafe_for_binlog | ON || max_binlog_cache_size | 2147483648 || max_binlog_size | 1073741824 || max_binlog_stmt_cache_size | 18446744073709547520 || sync_binlog | 1 |+--------------------------------------------+----------------------------+12345678910111213141516171819mysql &gt; show binary logs;+-----------------+-----------+| Log_name | File_size |+-----------------+-----------+| mybinlog.000001 | 177 || mybinlog.000002 | 11841 |+-----------------+-----------+mysql &gt; show master status;+-----------------+----------+--------------+------------------+-------------------------------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+-----------------+----------+--------------+------------------+-------------------------------------------+| mybinlog.000002 | 11841 | | | 2c719e09-d6a4-11e8-b4f9-560000590d55:1-31 |+-----------------+----------+--------------+------------------+-------------------------------------------+mysql &gt; show binlog events in &apos;mybinlog.000002&apos; from 4 limit 1;+-----------------+-----+-------------+-----------+-------------+---------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+-----------------+-----+-------------+-----------+-------------+---------------------------------------+| mybinlog.000002 | 4 | Format_desc | 3306 | 123 | Server ver: 5.7.24-log, Binlog ver: 4 |+-----------------+-----+-------------+-----------+-------------+---------------------------------------+4.4、mysqlbinlog工具读取二进制日志基于时间点1mysqlbinlog -uroot -pxvnCv3Yz -hlocalhost -P3306 --start-datetime='2018-10-23 00:00:00' --stop-datetime='2018-10-24 13:00:00' -d myblog /mysql_data/mybinlog.000002基于position1mysqlbinlog -uroot -pxvnCv3Yz -hlocalhost -P3306 --start-position=10613 --stop-position=11684 -d myblog /mysql_data/mybinlog.0000024.5、二进制日志事件的格式1234567891011121314# at 11305#181024 11:38:30 server id 3306 end_log_pos 11684 CRC32 0xf0b28827 Query thread_id=32 exec_time=0 error_code=0SET TIMESTAMP=1540352310/*!*/;CREATE TABLE `vote_record_memory` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` varchar(20) NOT NULL, `vote_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, `create_time` datetime NOT NULL, PRIMARY KEY (`id`), KEY `index_user_id` (`user_id`)) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4/*!*/;事件发生的日期和时间： 181024 11:38:30事件发生的服务器标识： server id 3306事件结束位置： end_log_pos 11684事件类型： Query事件发生时所在服务器执行此事件的线程ID： thread_id=32语句的时间戳与写入二进制文件的时间差： exec_time=0错误代码： error_code=0事件内容1234567891011SET TIMESTAMP=1540352310/*!*/;CREATE TABLE `vote_record_memory` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` varchar(20) NOT NULL, `vote_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, `create_time` datetime NOT NULL, PRIMARY KEY (`id`), KEY `index_user_id` (`user_id`)) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4/*!*/;GTID：Global Transaction ID；全局事务ID5、中继日志 relay log主从复制架构中，从服务器将主服务器的二进制日志事件拷贝到自己的中继日志。6、事务日志 transaction log由数据库引擎自行管理。当有更新操作时，存储引擎只将数据在内存中的copy修改成更新后的值，但并不将数据的更新刷新的硬盘，只是将更新操作的行为记录到硬盘上的事务日志中。因为事务日志的记录是采用文件追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头。因此事务日志的记录是非常快的。事务日志由多个日志文件组组成，循环使用日志文件。事务日志的大小需要根据实际情况设定。6.1、重做日志redo log用于记录修改后的数据，顺序记录，可以根据这个文件的记录内容重新恢复数据。6.2、回滚日志undo log用于存放被修改前的数据，回滚操作，实现事务一致性。五、备份还原1、为什么要备份灾难备份硬件故障软件故障自然灾害黑客攻击人为操作业务测试2、注意事项能容忍丢失多少数据备份操作持锁时长备份负载恢复数据的时长需要恢复哪些数据备份的有效性备份恢复测试和演练生产数据和备份数据分开存放3、备份类型热备：备份过程数据库可读可写温备：备份过程数据库可读不可写冷备：备份过程数据库不可读不可写全量备份：完整数据集增量备份：仅备份最近一次全备或者增备以来变化的数据差异备份：仅备份最近一次全备以来变化的数据物理备份：块级别备份，备份数据文件逻辑备份：从数据库导出数据，与存储引擎无关，可用于数据迁移4、备份内容数据二进制日志、InnoDB事务日志配置文件代码（存储过程、存储函数、触发器、事件调度器）5、逻辑备份工具Schema和数据存储在一个巨大的单个SQL语句文件5.1、mysqldumpMyISAM：备份库添加只读锁，直至备份完成默认导出所有数据库的所有表锁定方法（对InnoDB有效实现温备）：–lock-all-tables 锁定所有库的所有表–log-tables 对于每个单独的数据库，在启动备份前锁定其所有表InnoDB：支持热备、温备–single-transaction 设置本次会话隔离级别为Repeatable Read，确保本次会话不会看到其他会话提交的数据，保证数据一致性命令说明123456# 备份指定数据库或者数据库中的表mysqldump [options] db_name [table_name]# 备份多个数据库mysqldump [options] --database db1 [db2, db3]# 备份所有数据库mysqldump [options] --all-databases命令示例123456# 备份数据库db1，导出为db1.sqlmysqldump -uroot -ppassword -h127.0.0.1 -P3306 db1 &gt; db1.sql# 备份数据库db1的table1表，导出为table1.sqlmysqldump -uroot -ppassword -h127.0.0.1 -P3306 db1 table1 &gt; table1.sql# 备份数据库db1的table1和table2表，导出为table1_table2.sqlmysqldump -uroot -ppassword -h127.0.0.1 -P3306 db1 table1 table2 &gt; table1_table2.sql6、物理备份6.1、xtrabackup适用于InnoDB和XtraDB，一般使用innobackupex（xtrabackup的命令简化版）官方网站下载地址安装123456# 下载xtrabackup二进制包wget --no-check-certificate https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.12/binary/tarball/percona-xtrabackup-2.4.12-Linux-x86_64.libgcrypt11.tar.gz# 解压二进制包tar xvzf percona-xtrabackup-2.4.12-Linux-x86_64.libgcrypt11.tar.gz.tar.gzmv percona-xtrabackup-2.4.12-Linux-x86_64 /usr/local/ln -sv /usr/local/percona-xtrabackup-2.4.12-Linux-x86_64 /usr/local/xtrabackup命令说明1234567891011121314151617181920212223# 全量备份整个数据库（包括配置文件、二进制日志、重做日志、回滚日志、数据文件）/usr/local/xtrabackup/bin/innobackupex --defaults-file=/etc/my.cnf --user=root --password=password --port=3306 BACKUP_DIR# 增量备份整个数据库/usr/local/xtrabackup/bin/innobackupex --defaults-file=/etc/my.cnf --user=root --password=password --host=localhost --port=3306 --incremental --incremental-basedir=/backup_dir/YYYY-MM-DD_HH-mm-ss/ /mysql_backup/# 将增量备份的redo log合并到全量备份/usr/local/xtrabackup/bin/innobackupex --apply-log --redo-only FULL_BACKUP_DIR/usr/local/xtrabackup/bin/innobackupex --apply-log --redo-only FULL_BACKUP_DIR --incremental-dir=/INCREMENTAL_BACKUP_DIR/# 恢复全量备份/usr/local/xtrabackup/bin/innobackupex --defaults-file=/etc/my.cnf --copy-back FULL_BACKUP_DIR# 从全量备份中“导出”表# 需要在配置中启用innodb_file_per_table=1# 此命令会为每一个InnoDB表创建一个.exp结尾的文件仅包含数据，不包含表结构/usr/local/xtrabackup/bin/innobackupex --apply-log --export FULL_BACKUP_DIR# 从全量备份中“导入”表mysql&gt; create table table_name (...) engine=InnoDB;mysql&gt; alter table db_name.table_name discard tablespaces;# 将“导出”表的table_name.ibd和table_name文件拷贝到服务器数据目录，使用以下命令“导入”mysql&gt; alter table db_name.table_name import tablespaces;6.2、其他备份工具LVM快照1234567891011# 锁定所有表mysql &gt; flush tables with read lock;# 记录二进制日志文件和事件位置mysql &gt; flush logs;mysql -e &apos;show master status&apos; &gt; /path/to/file# 创建快照lvcreate -L # -s -p r -n NAME /dev/vg_name/lv_name# 释放锁mysql &gt; unlock tables;# 挂载快照卷，执行数据备份# 备份完成删除快照卷六、主从复制1、主节点dump thread：为每个Slave的IO Thread 启动一个dump线程，向其发送binary log events2、从节点IO Thread：从Master请求binary log events，并保存到中继日志SQL Thread：从中继日志读取日志事件，在本地完成重放3、特点Mater和Slave之间是异步复制主从数据不一致的情况比较常见4、复制架构4.1、主从复制4.1.1、主节点配置过程启动二进制日志为当前节点设置全局唯一的ID号12345678# 在my.cnf里面添加以下内容[mysqld]log-bin = master-binloginnodb_file_per_table = 1server-id = 1sync_binlog = 1innodb_flush_logs_at_trx_commit = 1sync_master_info = 1创建有复制权限的用户账号12mysql&gt; grant replication slave,replication client on *.* to 'repuser'@'%' identified by 'password';mysql&gt; flush privileges;4.1.2、从节点配置过程启动中继日志为当前节点设置全局唯一的ID号设置为只读状态（不影响主从复制）1234567891011# 在my.cnf里面添加以下内容[mysqld]skip_slave_start = 1relay-log = relay-logrelay-log = relay-log.indexserver-id = 2innodb_file_per_table = 1skip_name_resolve = 1read_only = 1sync_relay_log = 1sync_relay_log_info = 1使用有复制权限的用户账号连接到主服务器，并启动复制线程12mysql&gt; change master to master_host='master-node',master_user='repuser',master_password='password',master_port=3306,master_log_file='mater-log.003',master_log_pos=1111,master_connect_retry=10;mysql&gt; start slave [io_thread|sql_thread];查看从状态信息1mysql&gt; show slave status\\G;4.1.3、复制架构中应该注意的问题限制从服务器只读123456# 确保my.cnf配置以下选项[mysqld]read_only = 1# read_only对拥有super权限用户无效# 阻止所有用户，不影响主从复制mysql&gt; flush tables with read lock;保证主从复制事务安全主节点配置12345678[mysqld]# 每次事务提交都写入binlogsync_binlog = 1# 如果启用了InnoDB，需要启用以下配置# 每次事务提交时，log buffer 会被写入到日志文件并刷写到磁盘。innodb_flush_logs_at_trx_commit = 1# 每次事务提交都写入master.info，这样在崩溃的时候，最多丢失一个事务，但是会造成大量的磁盘IOsync_master_info = 1从节点1234567[mysqld]# 手动启动slaveskip_slave_start = 1# slave的IO线程每次接受到master发送过来的binlog日志都要写入到系统缓冲去，然后刷入relay log中继日志里面，这样在崩溃的时候，最多丢失一个事务，但是会造成大量的磁盘IOsync_relay_log = 1# slave的IO线程每次接受到master发送过来的binlog日志都要写入到系统缓冲去，然后刷入relay-log.info中继日志里面，这样在崩溃的时候，最多丢失一个事务，但是会造成大量的磁盘IOsync_relay_log_info = 14.2、主主复制4.2.1、注意事项互为主从容易数据不一致，慎用自动增长IDA节点使用奇数ID123[mysqld]auto_increment_offset = 1auto_increment_increment = 2B节点使用偶数ID123[mysqld]auto_increment_offset = 2auto_increment_increment = 24.2.2、配置步骤使用唯一的server_id启动bin_log和relay_log创建拥有复制权限的用户定义自动增长ID字段数值范围为奇偶均把对方指定为主节点，启动复制线程4.3、半同步复制跟主从复制类似主节点会等待一个从节点写入完成再返回客户端写入成功通过semisync插件提供半同步复制功能123456# 二进制安装包/usr/local/mysql/lib/plugin/semisync_master.so/usr/local/mysql/lib/plugin/semisync_slave.so# rpm安装包/usr/lib64/mysql/plugin/semisync_master.so/usr/lib64/mysql/plugin/semisync_slave.so4.3.1、主节点启动二进制日志为当前节点设置全局唯一的ID号12345678# 在my.cnf里面添加以下内容[mysqld]log-bin = master-binloginnodb_file_per_table = 1server-id = 1sync_binlog = 1innodb_flush_logs_at_trx_commit = 1sync_master_info = 1创建有复制权限的用户账号12mysql&gt; grant replication slave,replication client on *.* to 'repuser'@'%' identified by 'password';mysql&gt; flush privileges;4.3.2、从节点配置过程启动中继日志为当前节点设置全局唯一的ID号设置为只读状态（不影响主从复制）1234567891011# 在my.cnf里面添加以下内容[mysqld]skip_slave_start = 1relay-log = relay-logrelay-log = relay-log.indexserver-id = 2innodb_file_per_table = 1skip_name_resolve = 1read_only = 1sync_relay_log = 1sync_relay_log_info = 1使用有复制权限的用户账号连接到主服务器，并启动复制线程12mysql&gt; change master to master_host='master-node',master_user='repuser',master_password='password',master_port=3306,master_log_file='mater-log.003',master_log_pos=1111,master_connect_retry=10;mysql&gt; start slave ;查看从状态信息1mysql&gt; show slave status\\G;4.3.3、启动semicsync插件主节点1234567891011121314151617181920212223242526272829303132333435363738394041# 安装半同步复制master插件mysql&gt; install plugin rpl_semi_sync_master soname &apos;semisync_master.so&apos;;mysql&gt; show plugins;+----------------------------+----------+--------------------+--------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+--------------------+---------+| rpl_semi_sync_master | ACTIVE | REPLICATION | semisync_master.so | GPL |+----------------------------+----------+--------------------+--------------------+---------+mysql&gt; &gt; show global variables like &apos;%semi%&apos;;+-------------------------------------------+------------+| Variable_name | Value |+-------------------------------------------+------------+| rpl_semi_sync_master_enabled | OFF || rpl_semi_sync_master_timeout | 10000 || rpl_semi_sync_master_trace_level | 32 || rpl_semi_sync_master_wait_for_slave_count | 1 || rpl_semi_sync_master_wait_no_slave | ON || rpl_semi_sync_master_wait_point | AFTER_SYNC |+-------------------------------------------+------------+# 启动半同步复制master节点mysql&gt; set global variables rpl_semi_sync_master_enable = 1mysql&gt; show status like &apos;%semi_sync_%&apos;;+--------------------------------------------+-------+| Variable_name | Value |+--------------------------------------------+-------+| Rpl_semi_sync_master_clients | 0 || Rpl_semi_sync_master_net_avg_wait_time | 0 || Rpl_semi_sync_master_net_wait_time | 0 || Rpl_semi_sync_master_net_waits | 0 || Rpl_semi_sync_master_no_times | 0 || Rpl_semi_sync_master_no_tx | 0 || Rpl_semi_sync_master_status | ON || Rpl_semi_sync_master_timefunc_failures | 0 || Rpl_semi_sync_master_tx_avg_wait_time | 0 || Rpl_semi_sync_master_tx_wait_time | 0 || Rpl_semi_sync_master_tx_waits | 0 || Rpl_semi_sync_master_wait_pos_backtraverse | 0 || Rpl_semi_sync_master_wait_sessions | 0 || Rpl_semi_sync_master_yes_tx | 0 || Rpl_semi_sync_slave_status | OFF |+--------------------------------------------+-------+从节点123456789101112131415161718192021222324252627# 停止从节点复制线程mysql&gt; stop slave;# 安装半同步复制Slave插件mysql&gt; install plugin rpl_semi_sync_master soname &apos;semisync_slave.so&apos;;mysql&gt; &gt; show plugins;+----------------------------+----------+--------------------+--------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+--------------------+---------+| rpl_semi_sync_slave | ACTIVE | REPLICATION | semisync_slave.so | GPL |+----------------------------+----------+--------------------+--------------------+---------+mysql&gt; &gt; show global variables like &apos;%semi%&apos;;+-------------------------------------------+------------+| Variable_name | Value |+-------------------------------------------+------------+| rpl_semi_sync_slave_enabled | OFF || rpl_semi_sync_slave_trace_level | 32 |+-------------------------------------------+------------+# 启动半同步复制Slave插件mysql&gt; set global variables rpl_semi_sync_slave_enabled=1;mysql&gt; show status like &apos;%semi_sync_%&apos;;+--------------------------------------------+-------+| Variable_name | Value |+--------------------------------------------+-------+| Rpl_semi_sync_slave_status | ON |+--------------------------------------------+-------+# 开启从节点复制线程mysql&gt; start slave;5、复制过滤5.1、主服务器123456[mysqld]# 数据库记录到binlogbinlog_do_db = db1binlog_do_db = db2# 忽略数据库binlog_ignore_db = db1,db25.2、从服务器123456789[mysqld]# 复制数据库replicate_do_db = db1,db2# 忽略复制数据库replicate_ignore_db = db1,db2# 复制表replicate_do_table = db.table1,db.table2# 忽略复制表replicate_ingore_table = db.table1,db.table26、监控维护6.1、相关文件6.1.1、master.info保存Slave连接至master时的相关信息，例如账号密码、服务器地址、Position等6.1.2、relay-log.info保存当前Slave节点已经复制的当前二进制日志与本地relay-log日志的对应项6.2、清理日志6.3、复制监控12345mysql&gt; show master status;mysql&gt; show binlog events;mysql&gt; show binary logs;mysql&gt; show slave status;mysql&gt; show processlist;6.4、从服务器是否落后于主服务器12mysql&gt; show slave status \\G;Seconds_Behind_Master: 06.5、确定主从数据是否一致12345678910# 安装依赖包yum install perl-Time-HiRes -y# 下载二进制包wget https://www.percona.com/downloads/percona-toolkit/3.0.12/binary/tarball/percona-toolkit-3.0.12_x86_64.tar.gz# 解压tar xzf percona-toolkit-3.0.12_x86_64.tar.gzmv percona-toolkit-3.0.12 /usr/local/ln -sv /usr/local/percona-toolkit-3.0.12 /usr/local/percona-toolkit# 运行工具检查pt-table-checksum6.6、数据不一致如何处理重新同步七、MHA（Master High Availability）1、介绍MHA(Master High Availability)目前在MySQL高可用方面是一个相对成熟的解决方案，是一套优秀的作为MySQL高可用性环境下故障切换和主从提升的高可用软件。MySQL故障切换过程中，MHA能做到在0～30秒之内自动完成数据库的故障切换操作，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。该软件由两部分组成：MHA Manager(管理节点)和MHA Node(数据节点)。MHA Mananger可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。MHA Node运行在每台MySQL服务器上，MHA Manager会定时探测集群中的master节点中，当master出现故障时，它可以自动将最新数据的slave提升为新的master，然后将所有其他slave重新指向新的master。整个故障转移过程对应用程序完全透明。在MHA自动故障切换过程中，MHA试图从宕机的主服务器上保存二进制日志，最大程度的保证数据不丢失，但这这并不总是可行的。例如，如果主服务器硬件故障或无法通过ssh访问，MHA没法保存二进制日志，只进行故障转移而丢失了最新的数据。使用MySQL 5.5的半同步复制，可以大大降低数据丢失的风险。MHA可以与半同步复制结合起来。如果只有一个slave已经收到了最新的二进制日志，MHA可以将最新的二进制日志应用于其他所有的slave服务器上，因此可以保证所有节点的数据一致性。2、MHA组件Manager节点masterha_check_ssh：MHA依赖的SSH环境检测工具masterha_check_repl：MySQL复制环境检测工具masterha_manager：MHA服务主程序masterha_check_status：MHA运行状态探测工具masterha_master_monitor：MySQL master节点监测工具masterha_master_switch：master节点切换工具masterha_conf_host：添加删除配置的节点masterha_stop：关闭MHA服务Node节点save_binary_logs：保存复制master的binlogapply_diff_relay_logs：识别差异的中继日志事件并应用到其他slavefilter_mysqlbinlog：去除不必要的rollback事件（已弃用）purge_relay_logs：清除中继日志（不阻塞SQL线程）自定义扩展secondary_check_script：通过多条网络路由检查master可用性master_ip_failover_script：更新Application使用的master IP地址shutdown_script：关闭master节点report_script：发送报告init_conf_load_script：加载初始化配置参数master_ip_online_chage_script：更新master节点IP地址3、准备MHA环境3.1、MHA对MySQL复制环境有特殊要求各节点开启二进制日志和中继日志从节点需要配置read-only，关闭relay_log_purge3.2、服务器角色分配manager：MHA Managerdb1：master节点db2：slave节点db3：slave节点3.3、环境准备各节点启用epel源各节点/etc/hosts文件12345vi /etc/hosts10.0.0.10 manager10.0.0.11 db110.0.0.12 db210.0.0.13 db3初始master节点配置12345[mysqld]# server_id必须唯一server_id=1relay-log=relay-loglog-bin=master-bin初始Slave节点配置1234567[mysqld]# server_id必须唯一server_id=2relay-log=relay-loglog-bin=master-binrelay_log_purge=0read_only=1配置主从复制db1配置为master节点db2、db3以db1为master节点，开启slave线程所有数据库节点创建MHA所需的管理用户1mysql&gt; grant all privileges on *.* to &apos;mhauser&apos;@&apos;%&apos; identified by &apos;password&apos;;配置manager、db1、db2、db3免密码SSH连接12345678910111213# 在manager节点上配置证书，分发到其他节点# 下面以root用户为例ssh-keygen -t rsacat /root/.ssh/id_rsa &gt; /root/.ssh/authorized_keyschmod 0600 /root/.ssh/authorized_keysfor i in db1 db2 db3;doscp -p .ssh/id_rcs .ssh/authorized_keys $i:/root/.ssh/donefor i in manager db1 db2 db3;dossh $i datedone3.4、安装MHA3.4.1、node节点安装1234# 安装依赖包yum install perl perl-DBD-MySQL -ywget https://github.com/yoshinorim/mha4mysql-node/releases/download/v0.58/mha4mysql-node-0.58-0.el7.centos.noarch.rpmyum localinstall mha4mysql-node-0.58-0.el7.centos.noarch.rpm3.4.2、manager节点安装配置123456789101112131415161718192021222324252627282930313233# 安装perl相关软件包yum install perl perl-DBD-MySQL -y# 下载安装mha4mysql-manager软件包wget https://github.com/yoshinorim/mha4mysql-manager/releases/download/v0.58/mha4mysql-manager-0.58-0.el7.centos.noarch.rpmyum localinstall mha4mysql-manager-0.58-0.el7.centos.noarch.rpm -y# 编辑MHA配置文件/etc/mha_app1.confcat &gt; /etc/mha_app1.conf &lt;&lt;EOF[server default]# mysql创建给MHA使用的账号密码user=rootpassword=supersecure# manager工作目录manager_workdir=/data/masterha/app1# manager日志路径manager_log=/data/masterha/app1/manager.log# MySQL工作目录remote_workdir=/data/masterha/app1# ssh使用的用户ssh_user=rootrepl_user=repluserrepl_password=passwordping_interval=1[server1]hostname=db1# ssh_port=22222candidate_master=1[server2]hostname=db2candidate_master=1[server3]hostname=db3# 禁止节点切换成master节点可以配置no_master=1EOF3.4.3、manager节点检测配置和启动12345678910# 检查各节点ssh互信通信配置masterha_check_ssh --conf=/etc/mha_app1.conf# 检查受管MySQL复制集群配置masterha_check_repl --conf=/etc/mha_app1.conf# 启动mha4mysql-managermasterha_manager --conf=/etc/mha_app1.conf# 检查mha4mysql-manager状态masterha_check_status --conf=/etc/mha_app1.conf# 关闭mha4mysql-manager服务masterha_stop --conf=/etc/mha_app1.conf3.4.4、MHA注意点keepalived提供VIP和master切换的对应脚本masterha_manager启动参数–remove_dead_master_conf，当发生主从切换后，老的主库的IP将会从配置文件中移除–ignore_last_failover，MHA切换时会产生app1.failover.complete文件，两次切换时间少于8小时会切换失败，使用该参数能忽略八、复制的问题和解决1、数据损坏和丢失MasterMHA + 半同步复制Slave重新复制2、混合使用存储引擎MyISAM不支持事务InnoDB支持事务3、server_id不唯一重新复制4、复制延迟需要额外的监控工具辅助九、Percona XtraDB Cluster1、介绍项目地址： http://www.percona.com/doc/percona-xtradb-cluster/intro.htmlPercona XtraDB Cluster是MySQL高可用性和可扩展性的解决方案.Percona XtraDB Cluster提供的特性有：同步复制，事务要么在所有节点提交或不提交。多主复制，可以在任意节点进行写操作。在从服务器上并行应用事件，真正意义上的并行复制。节点自动配置。数据一致性，不再是异步复制。Percona XtraDB Cluster完全兼容MySQL和Percona Server，表现在：数据的兼容性应用程序的兼容性：无需更改应用程序2、特点当执行一个查询时，在本地节点上执行。因为所有数据都在本地，无需远程访问。无需集中管理。可以在任何时间点失去任何节点，但是集群将照常工作。良好的读负载扩展，任意节点都可以查询。加入新节点，开销大。需要复制完整的数据。不能有效的解决写缩放问题，所有的写操作都将发生在所有节点上。有多少个节点就有多少重复的数据。3、局限性目前的复制仅仅支持InnoDB存储引擎。任何写入其他引擎的表，包括mysql.*表将不会复制。但是DDL语句会被复制的，因此创建用户将会被复制，但是insert into mysql.user…将不会被复制的。DELETE操作不支持没有主键的表。没有主键的表在不同的节点顺序将不同，如果执行SELECT…LIMIT… 将出现不同的结果集。在多主环境下LOCK/UNLOCK TABLES不支持。以及锁函数GET_LOCK(), RELEASE_LOCK()..查询日志不能保存在表中。如果开启查询日志，只能保存到文件中。允许最大的事务大小由wsrep_max_ws_rows和wsrep_max_ws_size定义。任何大型操作将被拒绝。如大型的LOAD DATA操作。由于集群是乐观的并发控制，事务commit可能在该阶段中止。如果有两个事务向在集群中不同的节点向同一行写入并提交，失败的节点将中止。对于集群级别的中止，集群返回死锁错误代码(Error: 1213 SQLSTATE: 40001 (ER_LOCK_DEADLOCK)).XA事务不支持，由于在提交上可能回滚。整个集群的写入吞吐量是由最弱的节点限制，如果有一个节点变得缓慢，那么整个集群将是缓慢的。为了稳定的高性能要求，所有的节点应使用统一的硬件。集群节点建议最少3个。2个也可以运行，但是官方不推荐这么做，因为3个节点是为了预防脑裂。如果DDL语句有问题将破坏集群。建议使用pt-online-schema-change操作DDL。4、安装galera-cluster4.1、软件包官网下载地址官方文档地址4.2、准备工作1234# cat /etc/hosts10.0.0.11 db110.0.0.12 db210.0.0.13 db3节点一123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170[root@db1 ~]# mkdir -p /usr/local/pxc[root@db1 ~]# mkdir -p /data/pxc/mysql3306/&#123;data,tmp,logs&#125; [root@db1 ~]# vi /etc/my.cnf [client]port = 3306socket = /data/pxc/mysql3306/tmp/mysql.sock# The MySQL server[mysqld]#########Basic##################explicit_defaults_for_timestamp=trueport = 3306 user = mysql basedir = /usr/local/pxcdatadir = /data/pxc/mysql3306/data tmpdir = /data/pxc/mysql3306/tmp pid-file = /data/pxc/mysql3306/tmp/mysql.pid socket = /data/pxc/mysql3306/tmp/mysql.sock #skip-grant-tables #character setcharacter_set_server = utf8open_files_limit = 65535back_log = 500#event_scheduler = ON#lower_case_table_names=1skip-external-lockingskip_name_resolve = 1default-storage-engine = InnoDB#timeoutwait_timeout=1000interactive_timeout=1000connect_timeout = 20server-id = 11 #ip最后一位#pluginplugin-load=\"semisync_master.so;semisync_slave.so\"#########error log#############log-error = /data/pxc/mysql3306/logs/error.log log-warnings = 2 #########general log##############general_log=1#general_log_file=/data/pxc/mysql3306/logs/mysql.log #########slow log#############slow_query_log = 1long_query_time=1slow_query_log_file = /data/pxc/mysql3306/logs/mysql.slow ############# for replication###################log-bin = /data/pxc/mysql3306/logs/mysql-bin binlog_format = rowmax_binlog_size = 50Mbinlog_cache_size = 2Mmax_binlog_cache_size = 2Mexpire-logs-days = 7slave-net-timeout=30log_bin_trust_function_creators = 1log-slave-updates = 1 skip-slave-start = 1#super_read_only =1 #GTIDgtid-mode = onbinlog_gtid_simple_recovery=1enforce_gtid_consistency=1#relay logrelay-log = /data/pxc/mysql3306/logs/mysql-relay relay-log-index=/data/pxc/mysql3306/logs/relay-bin.indexmax-relay-log-size = 500M#replication crash safesync_master_info = 1sync_relay_log_info = 1sync_relay_log = 1relay_log_recovery = 1master_info_repository = TABLErelay_log_info_repository = TABLE#######per_thread_buffers#####################max_connections=1100max_user_connections=1000max_connect_errors=10000#myisam_recoverkey_buffer_size = 64Mmax_allowed_packet = 16M#table_cache = 3096table_open_cache = 6144table_definition_cache = 4096read_buffer_size = 1Mjoin_buffer_size = 128Kread_rnd_buffer_size = 1M#myisamsort_buffer_size = 128Kmyisam_max_sort_file_size = 1Gmyisam_repair_threads = 1myisam_sort_buffer_size = 32Mtmp_table_size = 32Mmax_heap_table_size = 64Mquery_cache_type=0query_cache_size = 0bulk_insert_buffer_size = 32Mthread_cache_size = 64#thread_concurrency = 32thread_stack = 192K###############InnoDB###########################innodb_data_home_dir = /data/pxc/mysql3306/data innodb_log_group_home_dir = /data/pxc/mysql3306/logs innodb_data_file_path = ibdata1:10M:autoextendinnodb_buffer_pool_size = 512M #根据内存大小设置innodb_buffer_pool_instances = 8#innodb_additional_mem_pool_size = 16Minnodb_log_file_size = 50Minnodb_log_buffer_size = 16Minnodb_log_files_in_group = 3innodb_flush_log_at_trx_commit = 1sync_binlog = 1innodb_lock_wait_timeout = 10innodb_sync_spin_loops = 40innodb_max_dirty_pages_pct = 80innodb_support_xa = 1innodb_thread_concurrency = 0innodb_thread_sleep_delay = 500innodb_concurrency_tickets = 1000innodb_flush_method = O_DIRECTinnodb_file_per_table = 1innodb_read_io_threads = 16innodb_write_io_threads = 16innodb_io_capacity = 800 innodb_flush_neighbors = 1innodb_file_format = Barracudainnodb_purge_threads=4 innodb_purge_batch_size = 32innodb_old_blocks_pct=75innodb_change_buffering=allinnodb_stats_on_metadata=OFFinnodb_print_all_deadlocks = 1performance_schema=0 transaction_isolation = READ-COMMITTED############# PXC ##################### innodb_autoinc_lock_mode=2 wsrep_cluster_name=pxc-dongzheng wsrep_provider=/usr/local/pxc/lib/libgalera_smm.so wsrep_cluster_address=gcomm://10.0.0.11,10.0.0.12,10.0.13 wsrep_node_address=10.0.0.11 # 本机IP地址 wsrep_slave_threads=2 wsrep_sst_auth=sst:sky wsrep_sst_method=xtrabackup-v2 wsrep_provider_options=\"debug=1\"[mysqldump]quickmax_allowed_packet = 128M[mysql]no-auto-rehashmax_allowed_packet = 128Mprompt = '(product)\\u@\\h:\\p [\\d]&gt; 'default_character_set = utf8[myisamchk]key_buffer_size = 64Msort_buffer_size = 512kread_buffer = 2Mwrite_buffer = 2M[mysqlhotcopy]interactive-timeout[mysqld_safe]#malloc-lib= /usr/local/mysql/lib/mysql/libjemalloc.so节点二、节点三修改my.cnf里面的对应值就行wsrep_node_address =server-id =4.3、启动集群先初始化节点一，将节点一加入集群123# 启动集群mysqld --defaults-file=/etc/my.cnf --initialize-insecuremysqld --defaults-file=/etc/my.cnf --wsrep-new-cluster &amp;12# 创建账号mysql&gt; GRANT PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO &apos;sst&apos;@&apos;localhost&apos;IDENTIFIED BY &apos;sky&apos;;FLUSH PRIVILEGES;节点二、节点三加入集群1mysqld --defaults-file=/etc/my.cnf &amp;","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://luanlengli.github.io/tags/MySQL/"},{"name":"Database","slug":"Database","permalink":"https://luanlengli.github.io/tags/Database/"}]},{"title":"Linux运维常见面试题","slug":"Linux运维常见面试题","date":"2019-02-14T02:07:19.000Z","updated":"2019-02-15T02:36:18.000Z","comments":true,"path":"2019/02/14/Linux运维常见面试题.html","link":"","permalink":"https://luanlengli.github.io/2019/02/14/Linux运维常见面试题.html","excerpt":"","text":"LINUX系统软件安装和卸载的常见方法RHEL/CentOS系列rpm -e &quot;软件包名字&quot;yum remove &quot;软件包名字&quot;，此操作会卸载相关的依赖Debian/Ubuntu系列apt-get remove &quot;软件包名字&quot;，不删除依赖，保留配置文件apt-get autoremove &quot;软件包名字&quot;，删除依赖，保留配置文件apt-get purge &quot;软件包名字&quot;，不删除依赖，删除配置文件源代码安装的，可以使用make uninstall，或者直接删掉软件目录修改LINUX的主机名RHEL/CentOS系列hostnamectl set-hostname &quot;主机名&quot;修改/etc/sysconfig/network里面的HOSTNAMEDebian/Ubuntu系列修改/etc/hosts和/etc/hostname的主机名，然后运行/etc/init.d/hostname.sh start临时有效hostname &quot;主机名&quot;自动切割压缩备份日志脚本每天凌晨5点执行，带日期后缀以Nginx日志为例切割打包压缩前一天的日志之后，将压缩包上传到FTP服务器192.168.1.2账号aaa密码bbb123456789101112131415161718192021222324252627#!/bin/bashLOG_PATH='/path/to/nginx_log/'DATE=`date +%F`# 让Nginx切割日志cd $&#123;LOG_PATH&#125;for file in `ls | grep *log`;do mv $&#123;file&#125; $&#123;file&#125;.$&#123;DATE&#125;donenginx -s reopen# 打包文件tar nginx_log_$&#123;DATE&#125;.tar.gz `ls *$&#123;DATE&#125;`# 清理日志文件rm -rf *$&#123;DATE&#125;# 上传文件ftp -n &lt;&lt;- EOFopen 192.168.1.2user aaa bbbput nginx_log_$&#123;DATE&#125;.tar.gzbyeEOF# 删除过期文件find $&#123;LOG_PATH&#125; -type f -mtime +60 -exec rm -rf &#123;&#125; \\;10 5 * * * /bin/bash /path/to/logrotate.shiptables允许来自127.0.0.1端口1234访问114.114.114.114端口801iptables -A INPUT -s 127.0.0.1 --sport 1234 -d 114.114.114.114 --dport 80 -j ACCPET禁用从lo进入的流量1iptables -A INPUT -i lo -j REJECT允许外部访问22端口1iptables -A INPUT -p tcp --dport 22 -j ACCPET在postrouting链上，把源地址192.168.2.0/24的数据包源地址修改为192.168.1.21iptables -t nat -A POSTROUTING -s 192.168.2.0/24 -j SNAT --to-source 192.168.1.2删除INPUT链上第八条规则12iptables -Ln --line-numbersiptables -D INPUT 8eth0的数据包转发到eth11iptables -A FORWARD -i eth0 -o eth1 -j ACCEPTiptables匹配参数-A：在chain里追加规则-D：删除chain里的规则-I：将规则插入到chain-t：指定表-s：匹配源地址-d：匹配目的地址-p：协议匹配-i：入口匹配-o：出口匹配--sport：源端口匹配--dport：出口端口匹配-j：数据包处理动作!：取反iptables基本概念tableraw 用于配置数据包，raw 中的数据包不会被系统跟踪filter 是用于存放所有与防火墙相关操作的默认表nat 用于 网络地址转换（例如：端口转发）mangle 用于对特定数据包的修改security 用于 强制访问控制网络规则（例如： SELinux）处理流程12345678910111213141516171819202122232425262728293031323334 XXXXXXXXXXXXXXXXXX XXX Network XXX XXXXXXXXXXXXXXXXXX + | v +-------------+ +------------------+ |table: filter| &lt;---+ | table: nat | |chain: INPUT | | | chain: PREROUTING| +-----+-------+ | +--------+---------+ | | | v | v [local process] | **************** +--------------+ | +---------+ Routing decision +------&gt; |table: filter | v **************** |chain: FORWARD|**************** +------+-------+Routing decision |**************** | | | v **************** |+-------------+ +------&gt; Routing decision &lt;---------------+|table: nat | | ****************|chain: OUTPUT| | ++-----+-------+ | | | | v v | +-------------------++--------------+ | | table: nat ||table: filter | +----+ | chain: POSTROUTING||chain: OUTPUT | +--------+----------++--------------+ | v XXXXXXXXXXXXXXXXXX XXX Network XXX XXXXXXXXXXXXXXXXXX统计TCP连接状态1netstat -an|awk '/tcp/ &#123;print $6&#125;'|sort|uniq -c列出每个IP的TCP连接数1netstat -n | awk '/^tcp/ &#123;print $5&#125;' | awk -F: '&#123;print $1&#125;' | sort | uniq -c | sort -rn生成随机字符串1openssl rand -hex 201dd if=/dev/urandom bs=128 count=1 2&gt;/dev/null | base64 | tr -d \"=+/[:space:]\" | dd bs=32 count=1 2&gt;/dev/null描述tcp三次握手的过程第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器 进入SYN_RECV状态；第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入 ESTABLISHED状态，完成三次握手。内核参数的含义net.ipv4.tcp_tw_recycle=1启用此功能可以加快TIME-WAIT状态的TCP连接回收内核会记录最后一个报文的时间戳，如果新的TCP报文时间戳小于最后一个报文的时间戳，则会drop包，导致无法建立TCP连接net.ipv4.tcp_tw_reuse=1允许将处于TIME-WAIT状态的socket用于新的TCP连接net.ipv4.tcp_timestamps=1发送TCP时间戳vm.swappiness=0最大限度使用物理内存，物理内存耗尽才启用swapLinux开机启动顺序以BIOS-based和RHEL/CentOS-7为例硬件加电加载BIOS硬件自检BIOS按照启动顺序读取存储设备的MBR根据MBR找到并加载bootloaderbootloader从/boot目录加载vmlinuz内核镜像，提取initramfs的内容并存放在tmpfs中操作系统内核从initramfs中加载必要的驱动和挂载根文件系统，启动systemd作为第一个系统进程systemd读取配置文件，读取default-target文件，引导至default-target定义的状态初始化网络设置主机名基于内核参数初始化硬件设备加载文件系统启动systemd服务启动完成ps aux中VSZ和RSS的含义VSZ：虚拟内存集，代表进程占用的虚拟内存空间RSS：物理内存集，代表进程实际占用的物理内存空间top命令中字段的含义PID：进程IDUSER：进程所有者的用户名PR：进程优先级NI：nice值，数值越小，优先级越高VIRT：虚拟内存集，代表进程占用的虚拟内存空间RES：物理内存集，代表进程实际占用的物理内存空间SHR：共享内存大小S：进程状态%CPU：CPU时间占比%MEM：物理内存占比TIME+：进程使用的CPU时间总量COMMAND：进程命令load average含义1load average: 0.00, 0.00, 0.00分别代表1分钟内、5分钟内、15分钟内系统的平均负载系统负载指的是运行队列的长度，即等待CPU的平均进程数因此load average的值=CPU核数是最理想的状态","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://luanlengli.github.io/tags/Linux/"}]},{"title":"kubectl命令的用法","slug":"kubectl命令的用法","date":"2019-02-12T07:10:40.000Z","updated":"2019-03-25T07:10:08.000Z","comments":true,"path":"2019/02/12/kubectl命令的用法.html","link":"","permalink":"https://luanlengli.github.io/2019/02/12/kubectl命令的用法.html","excerpt":"","text":"简介命令介绍获取帮助1kubectl --help查看集群信息1kubectl cluster-info指定kubeconfig默认是当前用户家目录下的~/.kube/config1kubectl --config /path/to/kubeconfigkubeconfig上下文配置123456789# 查看kubeconfig信息kubectl config view# 合并多个kubeconfig文件并查看合并后的kubeconfig信息KUBECONFIG=~/.kube/config:~/.kube/kubconfig2 kubectl config view# 显示当前上下文kubectl config current-context# 设置默认上下文为cluster-namekubectl config use-context cluster-name#指定命名空间默认命名空间是default12kubectl --namespace kube-systemkubectl -n kube-system指定所有命名空间1kubectl --all-namespaces指定输出格式默认不带任何输出参数时，是以较短结果输出12345kubectl get podkubectl get pod --output=widekubectl get pod -o widekubectl get pod -o jsonkubectl get pod -o yaml输出结果排序默认是以Pod名字排序可以通过指定--sort-by来做排序例如让Pod以宿主机名称排序12345678910111213141516171819kubectl get pod -n kube-system -o wide --sort-by=\"&#123;.spec.nodeName&#125;\"输出样例NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESkube-scheduler-k8s-master 1/1 Running 2 6d22h 172.16.80.200 k8s-master &lt;none&gt; &lt;none&gt;etcd-k8s-master 1/1 Running 2 6d22h 172.16.80.200 k8s-master &lt;none&gt; &lt;none&gt;kube-apiserver-k8s-master 1/1 Running 2 6d22h 172.16.80.200 k8s-master &lt;none&gt; &lt;none&gt;kube-controller-manager-k8s-master 1/1 Running 2 6d22h 172.16.80.200 k8s-master &lt;none&gt; &lt;none&gt;kube-flannel-ds-amd64-mqcft 1/1 Running 2 6d22h 172.16.80.200 k8s-master &lt;none&gt; &lt;none&gt;kube-proxy-lhxv5 1/1 Running 1 6d21h 172.16.80.200 k8s-master &lt;none&gt; &lt;none&gt;coredns-86c58d9df4-wpk5p 1/1 Running 2 6d21h 10.244.1.10 k8s-node1 &lt;none&gt; &lt;none&gt;metrics-server-74845f6646-jqzcm 1/1 Running 2 6d21h 10.244.1.11 k8s-node1 &lt;none&gt; &lt;none&gt;kube-flannel-ds-amd64-xhd96 1/1 Running 2 6d22h 172.16.80.201 k8s-node1 &lt;none&gt; &lt;none&gt;kube-proxy-28tw2 1/1 Running 1 6d21h 172.16.80.201 k8s-node1 &lt;none&gt; &lt;none&gt;coredns-86c58d9df4-mbbxm 1/1 Running 2 6d21h 10.244.2.11 k8s-node2 &lt;none&gt; &lt;none&gt;kube-proxy-t77hm 1/1 Running 1 6d21h 172.16.80.202 k8s-node2 &lt;none&gt; &lt;none&gt;kubernetes-dashboard-57df4db6b-gk67k 1/1 Running 2 6d21h 10.244.2.13 k8s-node2 &lt;none&gt; &lt;none&gt;kube-flannel-ds-amd64-2rhs4 1/1 Running 2 6d22h 172.16.80.202 k8s-node2 &lt;none&gt; &lt;none&gt;tiller-deploy-5b4c9697bf-q5dh6 1/1 Running 2 6d21h 10.244.2.12 k8s-node2 &lt;none&gt; &lt;none&gt;测试yaml文件，实际不生效1kubectl apply -f demo.yaml --dry-run生成模板文件yaml文件内容字段比较多，很难一下子想到所需的字段，可以通过kubectl命令来生成对应的模板下面以deployment为例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120kubectl -n kube-system get deployment coredns -o yamlapiVersion: extensions/v1beta1kind: Deploymentmetadata: annotations: deployment.kubernetes.io/revision: \"1\" creationTimestamp: \"2019-03-18T03:46:22Z\" generation: 1 labels: k8s-app: kube-dns name: coredns namespace: kube-system resourceVersion: \"8560\" selfLink: /apis/extensions/v1beta1/namespaces/kube-system/deployments/coredns uid: 65e22088-4930-11e9-93e0-00505634ce7cspec: progressDeadlineSeconds: 600 replicas: 2 revisionHistoryLimit: 10 selector: matchLabels: k8s-app: kube-dns strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 1 type: RollingUpdate template: metadata: creationTimestamp: null labels: k8s-app: kube-dns spec: containers: - args: - -conf - /etc/coredns/Corefile image: k8s.gcr.io/coredns:1.2.6 imagePullPolicy: IfNotPresent livenessProbe: failureThreshold: 5 httpGet: path: /health port: 8080 scheme: HTTP initialDelaySeconds: 60 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 5 name: coredns ports: - containerPort: 53 name: dns protocol: UDP - containerPort: 53 name: dns-tcp protocol: TCP - containerPort: 9153 name: metrics protocol: TCP resources: limits: memory: 170Mi requests: cpu: 100m memory: 70Mi securityContext: allowPrivilegeEscalation: false capabilities: add: - NET_BIND_SERVICE drop: - all procMount: Default readOnlyRootFilesystem: true terminationMessagePath: /dev/termination-log terminationMessagePolicy: File volumeMounts: - mountPath: /etc/coredns name: config-volume readOnly: true dnsPolicy: Default restartPolicy: Always schedulerName: default-scheduler securityContext: &#123;&#125; serviceAccount: coredns serviceAccountName: coredns terminationGracePeriodSeconds: 30 tolerations: - key: CriticalAddonsOnly operator: Exists - effect: NoSchedule key: node-role.kubernetes.io/master volumes: - configMap: defaultMode: 420 items: - key: Corefile path: Corefile name: coredns name: config-volumestatus: availableReplicas: 2 conditions: - lastTransitionTime: \"2019-03-18T03:46:37Z\" lastUpdateTime: \"2019-03-18T03:51:36Z\" message: ReplicaSet \"coredns-86c58d9df4\" has successfully progressed. reason: NewReplicaSetAvailable status: \"True\" type: Progressing - lastTransitionTime: \"2019-03-18T05:13:16Z\" lastUpdateTime: \"2019-03-18T05:13:16Z\" message: Deployment has minimum availability. reason: MinimumReplicasAvailable status: \"True\" type: Available observedGeneration: 1 readyReplicas: 2 replicas: 2 updatedReplicas: 2创建资源12345678# 删除指定yaml定义的资源kubectl apply -f /path/to/yaml# 删除podkubectl delete pod busybox# 删除带k8s-app: busybox标签的podkubectl delete pod -l k8s-app=busybox# 删除所有podkubectl delete pod --all编辑资源1234# 编辑名为CoreDNS的configmapskubectl edit -n kube-system configmaps coredns# 设置kube的编辑器KUBE_EDITOR=\"nano\" kubectl edit configmaps coredns","categories":[],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"https://luanlengli.github.io/tags/kubernetes/"}]},{"title":"如何生成kubeconfig文件","slug":"如何生成kubeconfig文件","date":"2019-02-12T06:56:58.000Z","updated":"2019-05-28T06:38:11.216Z","comments":true,"path":"2019/02/12/如何生成kubeconfig文件.html","link":"","permalink":"https://luanlengli.github.io/2019/02/12/如何生成kubeconfig文件.html","excerpt":"","text":"修改cluster12345kubectl config set-cluster CLUSTER_NAME \\--certificate-authority=/path/to/ca \\--embed-certs=true \\--server=KUBE_APISERVER \\--kubeconfig=/path/to/kubeconfig修改user12345kubectl config set-credentials USERNAME \\--client-certificate=/path/to/cert \\--client-key=/path/to/key \\--embed-certs=true \\--kubeconfig=/path/to/kubeconfig修改context1234kubectl config set-context CONTEXT \\--cluster=CLUSTER_NAME \\--user=USERNAME \\--kubeconfig=/path/to/kubeconfig设置默认context1kubectl config use-context CONTEXT --kubeconfig=/path/to/kubeconfig","categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://luanlengli.github.io/tags/Kubernetes/"}]},{"title":"kubernetes TLS Bootstrap与节点证书签发","slug":"kubernetes-TLS-Bootstrap与节点证书签发","date":"2019-02-04T05:03:18.000Z","updated":"2019-05-27T05:53:13.401Z","comments":true,"path":"2019/02/04/kubernetes-TLS-Bootstrap与节点证书签发.html","link":"","permalink":"https://luanlengli.github.io/2019/02/04/kubernetes-TLS-Bootstrap与节点证书签发.html","excerpt":"","text":"Bootstrap初始化流程参考官方文档kubelet启动kubelet发现没有kubeconfig文件kubelet查找bootstrap-kubeconfig文件kubelet读取bootstrap-kubeconfig文件，获取kube-apiserver的URL和最低权限的tokenkubelet具备了创建和检索CSR请求的受限tokenkubelet使用此token作为凭证与kube-apiserver通信kubelet使用bootstrap-kubeconfig的CA证书为自己创建CSR（nodeclient）CSR可以通过两种方式获得批准，批准之后下发证书（kubelet-client.crt）配置kube-controller-manager自动批准CSR配置外部流程去通过kubernetes API或者kubectl去批准CSRkubelet使用密钥和证书创建kubeconfig文件kubelet开始正常启动流程可选：当证书接近到期时，kubelet会自动请求续订证书证书的续订自动签发，可以参考CSR批准证书的过程","categories":[],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"https://luanlengli.github.io/tags/kubernetes/"}]},{"title":"以DaemonSet的方式运行kube-proxy","slug":"以DaemonSet的方式运行kube-proxy","date":"2019-01-08T02:23:31.000Z","updated":"2019-05-20T15:30:08.000Z","comments":true,"path":"2019/01/08/以DaemonSet的方式运行kube-proxy.html","link":"","permalink":"https://luanlengli.github.io/2019/01/08/以DaemonSet的方式运行kube-proxy.html","excerpt":"","text":"说明通常来说，二进制部署kubernetes集群的时候，一般都是把kube-proxy作为系统守护进程启动，例如注册成为systemd服务。用过kubeadm的同学都知道，kubeadm是以DaemonSet的方式部署kube-proxy，将kube-proxy托管到kubernetes集群管理。这样可以很方便的通过修改kube-proxy的configmap来统一管控集群的kube-proxy配置。操作过程创建yaml文件kube-proxy-daemonset.yaml根据情况替换KUBE_APISERVER和KUBE_VERSION123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183apiVersion: v1kind: ServiceAccountmetadata: name: kube-proxy namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: system:kube-proxyroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:node-proxiersubjects:- kind: ServiceAccount name: kube-proxy namespace: kube-system---apiVersion: v1kind: ConfigMapmetadata: name: kube-proxy namespace: kube-system labels: app: kube-proxydata: config.conf: |- apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: KubeProxyConfiguration bindAddress: 0.0.0.0 clientConnection: acceptContentTypes: \"\" burst: 10 contentType: application/vnd.kubernetes.protobuf kubeconfig: /var/lib/kube-proxy/kubeconfig.conf qps: 5 # 集群中pod的CIDR范围，从这个范围以外发送到服务集群IP的流量将被伪装，从POD发送到外部LoadBalanceIP的流量将被定向到各自的集群IP clusterCIDR: 10.244.0.0/16 configSyncPeriod: 15m0s conntrack: # 每个核心最大能跟踪的NAT连接数，默认32768 maxPerCore: 32768 min: 131072 tcpCloseWaitTimeout: 1h0m0s tcpEstablishedTimeout: 24h0m0s enableProfiling: false healthzBindAddress: 0.0.0.0:10256 hostnameOverride: \"\" iptables: # SNAT所有通过服务集群ip发送的通信 masqueradeAll: false masqueradeBit: 14 minSyncPeriod: 0s syncPeriod: 30s ipvs: minSyncPeriod: 0s # ipvs调度类型，默认是rr scheduler: rr syncPeriod: 30s metricsBindAddress: 127.0.0.1:10249 # 使用ipvs模式 mode: ipvs featureGates: SupportIPVSProxyMode: true oomScoreAdj: -999 portRange: \"\" resourceContainer: /kube-proxy udpIdleTimeout: 250ms kubeconfig.conf: |- apiVersion: v1 kind: Config clusters: - cluster: certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt server: &#123;&#123;KUBE_APISERVER&#125;&#125; name: default contexts: - context: cluster: default namespace: default user: default name: default current-context: default users: - name: default user: tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token---apiVersion: extensions/v1beta1kind: DaemonSetmetadata: labels: k8s-app: kube-proxy name: kube-proxy namespace: kube-systemspec: revisionHistoryLimit: 10 selector: matchLabels: k8s-app: kube-proxy template: metadata: annotations: scheduler.alpha.kubernetes.io/critical-pod: \"\" creationTimestamp: null labels: k8s-app: kube-proxy spec: containers: - command: - /usr/local/bin/kube-proxy - --config=/var/lib/kube-proxy/config.conf image: k8s.gcr.io/kube-proxy-amd64:&#123;&#123;KUBE_VERSION&#125;&#125; imagePullPolicy: IfNotPresent securityContext: privileged: true terminationMessagePath: /dev/termination-log terminationMessagePolicy: File volumeMounts: - mountPath: /etc/localtime name: host-time readOnly: true - mountPath: /var/lib/kube-proxy name: kube-proxy - mountPath: /run/xtables.lock name: xtables-lock - mountPath: /lib/modules name: lib-modules readOnly: true dnsPolicy: ClusterFirst hostNetwork: true nodeSelector: beta.kubernetes.io/arch: amd64 priorityClassName: system-node-critical restartPolicy: Always schedulerName: default-scheduler serviceAccount: kube-proxy serviceAccountName: kube-proxy terminationGracePeriodSeconds: 30 tolerations: - key: CriticalAddonsOnly operator: Exists - operator: Exists - effect: NoExecute key: node.kubernetes.io/not-ready operator: Exists - effect: NoExecute key: node.kubernetes.io/unreachable operator: Exists - effect: NoSchedule key: node.kubernetes.io/disk-pressure operator: Exists - effect: NoSchedule key: node.kubernetes.io/memory-pressure operator: Exists - effect: NoSchedule key: node.kubernetes.io/unschedulable operator: Exists - effect: NoSchedule key: node.kubernetes.io/network-unavailable operator: Exists volumes: - configMap: defaultMode: 420 name: kube-proxy name: kube-proxy - hostPath: path: /run/xtables.lock type: FileOrCreate name: xtables-lock - hostPath: path: /lib/modules type: \"\" name: lib-modules - hostPath: path: /etc/localtime name: host-time templateGeneration: 1 updateStrategy: rollingUpdate: maxUnavailable: 1 type: RollingUpdate部署1kubectl apply -f kube-proxy-daemonset.yaml验证1kubectl -n kube-system get pod","categories":[],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"https://luanlengli.github.io/tags/kubernetes/"}]},{"title":"RHEL/CentOS升级OpenSSL和OpenSSH","slug":"RHEL-CentOS升级OpenSSL和OpenSSH","date":"2019-01-07T15:01:46.000Z","updated":"2019-02-11T14:39:34.000Z","comments":true,"path":"2019/01/07/RHEL-CentOS升级OpenSSL和OpenSSH.html","link":"","permalink":"https://luanlengli.github.io/2019/01/07/RHEL-CentOS升级OpenSSL和OpenSSH.html","excerpt":"","text":"说明本文以openssl-1.0.2p和openssh-7.9p1为例先编译安装新版本的OpenSSL，然后基于新版本的OpenSSL编译安装OpenSSHRHEL/CentOS-6.x和7.x的操作类似注意事项请不要盲目复制粘贴考虑好每一步的后果，做好备份先拿测试服务器做白老鼠测试，通过之后再通过自动化部署的方式升级下载源代码OpenSSL官网地址OpenSSH官网地址检查当前版本123456# 检查openssl版本openssl version# 检查ssh版本ssh -V# 检查openssh-server版本sshd --version安装编译环境1yum install -y gcc make zlib-devel pam-devel libedit-devel krb5-devel安装OpenSSL解压源代码1tar xzf openssl-1.0.2p.tar.gz编译安装编译选项参照CentOS-7.x软件包的选项123456789101112131415161718cd openssl-1.0.2p.tar.gz./config --prefix=/usr/local/openssl-1.0.2p \\ no-asm 386 \\ zlib \\ enable-camellia \\ enable-seed \\ enable-tlsext \\ enable-rfc3779 \\ enable-cms \\ enable-md2 \\ no-mdc2 \\ no-rc5 \\ no-ec2m \\ no-gost \\ no-srp \\ --with-krb5-flavor=MIT \\ sharedmake depend &amp;&amp; make &amp;&amp; make install备份旧版本的openssl123mv /usr/bin/openssl /usr/bin/openssl.`date +%Y%m%d`bakmv /usr/include/openssl /usr/include/openssl.`date +%Y%m%d`bakmv /usr/lib64/openssl/engines /usr/lib64/openssl/engines.`date +%Y%m%d`bak创建软链接到新版本openssl123ln -sv /usr/local/openssl-1.0.2p/bin/openssl /usr/bin/opensslln -sv /usr/local/openssl-1.0.2p/include/openssl /usr/include/opensslln -sv /usr/local/openssl-1.0.2p/lib/engines/ /usr/lib64/openssl/engines创建新版本的链接库12345cat &gt; /etc/ld.so.conf.d/openssl-1.0.2p.conf &lt;&lt;EOF# OpenSSL 1.0.2p/usr/local/openssl-1.0.2p/libEOFldconfig检查openssl版本1openssl version安装OpenSSH解压源代码1tar xzf openssh-7.9p1.tar.gz使用新版OpenSSL编译安装OpenSSH12345678910cd openssh-7.9p1./configure --prefix=/usr/local/openssh-7.9p1 \\ --with-ssl-dir=/usr/local/openssl-1.0.2p \\ --with-md5-passwords \\ --with-mantype=man \\ --disable-strip \\ --with-smartcard \\ --with-pam \\ --with-kerberos5make &amp;&amp; make install备份替换OpenSSH1234567891011121314for binary in `ls /usr/local/openssh-7.9p1/bin/`;do mv /usr/bin/$&#123;binary&#125; /usr/bin/$&#123;binary&#125;.`date +%Y%m%d`bak ln -sv /usr/local/openssh-7.9p1/bin/$&#123;binary&#125; /usr/bin/$&#123;binary&#125;donefor exec in `ls /usr/local/openssh-7.9p1/libexec/`;do mv /usr/libexec/openssh/$&#123;exec&#125; /usr/libexec/openssh/$&#123;exec&#125;.`date +%Y%m%d`bak ln -sv /usr/local/openssh-7.9p1/libexec/$&#123;exec&#125; /usr/libexec/openssh/$&#123;exec&#125;donefor sbinary in `ls /usr/local/openssh-7.9p1/sbin/`;do mv /usr/sbin/$&#123;sbinary&#125; /usr/sbin/$&#123;sbinary&#125;.`date +%Y%m%d`bak ln -sv /usr/local/openssh-7.9p1/sbin/$&#123;sbinary&#125; /usr/sbin/$&#123;sbinary&#125;done链接配置目录到新版本的OpenSSH123mv /usr/local/openssh-7.9p1/etc /usr/local/openssh-7.9p1/etc.bakln -sv /etc/ssh /usr/local/openssh-7.9p1/etcfind /etc/ssh/ -name '*key' -exec chmod 0400 &#123;&#125; \\;检查SSH配置1sshd -t -f /etc/ssh/sshd_config重启SSH服务RHEL/CentOS-6.x1service sshd restartRHEL/CentOS-7.x修改/usr/lib/systemd/system/sshd.service1234vim /usr/lib/systemd/system/sshd.service...Type=simple...重启sshd服务12systemctl daemon-reloadsystemctl restart sshd检查OpenSSH版本12ssh -Vsshd --version","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://luanlengli.github.io/tags/Linux/"}]},{"title":"etcd学习笔记","slug":"etcd学习笔记","date":"2018-12-22T08:49:18.000Z","updated":"2019-02-14T06:31:12.000Z","comments":true,"path":"2018/12/22/etcd学习笔记.html","link":"","permalink":"https://luanlengli.github.io/2018/12/22/etcd学习笔记.html","excerpt":"","text":"kubernetes底层数据存放在etcd中，这里记录一下学习的笔记。说明Etcd 是 CoreOS 推出的分布式一致性键值存储，用于共享配置和服务发现Etcd 支持集群模式部署，从而实现自身高可用本文以CentOS-7.6和etcd-v3.3.10为例etcd安装二进制文件安装下载1234567# 下载并解压wget -q -O - https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz | tar xz# 查看解压后的文件ls etcd-v3.3.10-linux-amd64Documentation etcd etcdctl README-etcdctl.md README.md READMEv2-etcdctl.md# 将二进制执行文件移动到/usr/local/bin/mv etcd-v3.3.10-linux-amd64/etcd etcd-v3.3.10-linux-amd64/etcdctl /usr/local/bin/配置创建用户12groupadd -r etcduseradd -r -g etcd -s /bin/false etcd创建目录1mkdir -p /var/lib/etcd /etc/etcd/配置文件创建配置文件etcd.config.yaml，内容如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# This is the configuration file for the etcd server.# Human-readable name for this member.name: 'default'# Path to the data directory.data-dir: /var/lib/etcd/default.etcd# Path to the dedicated wal directory.wal-dir: /var/lib/etcd/wal# Number of committed transactions to trigger a snapshot to disk.snapshot-count: 10000# Time (in milliseconds) of a heartbeat interval.heartbeat-interval: 100# Time (in milliseconds) for an election to timeout.election-timeout: 1000# Raise alarms when backend size exceeds the given quota. 0 means use the# default quota.quota-backend-bytes: 0# List of comma separated URLs to listen on for peer traffic.listen-peer-urls: http://localhost:2380# List of comma separated URLs to listen on for client traffic.listen-client-urls: http://localhost:2379# Maximum number of snapshot files to retain (0 is unlimited).max-snapshots: 5# Maximum number of wal files to retain (0 is unlimited).max-wals: 5# Comma-separated white list of origins for CORS (cross-origin resource sharing).cors:# List of this member's peer URLs to advertise to the rest of the cluster.# The URLs needed to be a comma-separated list.initial-advertise-peer-urls: http://localhost:2380# List of this member's client URLs to advertise to the public.# The URLs needed to be a comma-separated list.advertise-client-urls: http://localhost:2379# Discovery URL used to bootstrap the cluster.discovery:# Valid values include 'exit', 'proxy'discovery-fallback: 'proxy'# HTTP proxy to use for traffic to discovery service.discovery-proxy:# DNS domain used to bootstrap initial cluster.discovery-srv:# Initial cluster configuration for bootstrapping.initial-cluster:# Initial cluster token for the etcd cluster during bootstrap.initial-cluster-token: 'etcd-cluster'# Initial cluster state ('new' or 'existing').initial-cluster-state: 'new'# Reject reconfiguration requests that would cause quorum loss.strict-reconfig-check: false# Accept etcd V2 client requestsenable-v2: true# Enable runtime profiling data via HTTP serverenable-pprof: true# Valid values include 'on', 'readonly', 'off'proxy: 'off'# Time (in milliseconds) an endpoint will be held in a failed state.proxy-failure-wait: 5000# Time (in milliseconds) of the endpoints refresh interval.proxy-refresh-interval: 30000# Time (in milliseconds) for a dial to timeout.proxy-dial-timeout: 1000# Time (in milliseconds) for a write to timeout.proxy-write-timeout: 5000# Time (in milliseconds) for a read to timeout.proxy-read-timeout: 0client-transport-security: # Path to the client server TLS cert file. cert-file: # Path to the client server TLS key file. key-file: # Enable client cert authentication. client-cert-auth: false # Path to the client server TLS trusted CA cert file. trusted-ca-file: # Client TLS using generated certificates auto-tls: falsepeer-transport-security: # Path to the peer server TLS cert file. cert-file: # Path to the peer server TLS key file. key-file: # Enable peer client cert authentication. client-cert-auth: false # Path to the peer server TLS trusted CA cert file. trusted-ca-file: # Peer TLS using generated certificates. auto-tls: false# Enable debug-level logging for etcd.debug: falselogger: zap# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.log-outputs: [stderr]# Force to create a new one member cluster.force-new-cluster: falseauto-compaction-mode: periodicauto-compaction-retention: \"1\"# Set level of detail for exported metrics, specify 'extensive' to include histogram metrics.# default is 'basic'metrics: 'basic'创建服务文件使用systemd托管etcd的服务1234567891011121314151617cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt;EOF[Unit]Description=etcd key-value storeDocumentation=https://github.com/etcd-io/etcdAfter=network.target[Service]User=etcdType=notifyExecStart=/usr/local/bin/etcd --config-file /etc/etcd/etcd.config.yamlRestart=alwaysRestartSec=10sLimitNOFILE=65535[Install]WantedBy=multi-user.targetEOF运行etcd123chown -R etcd:etcd /var/lib/etcd /etc/etcdsystemctl daemon-reloadsystemctl start etcd.service验证etcd服务123etcdctl cluster-healthmember 8e9e05c52164694d is healthy: got healthy result from http://localhost:2379cluster is healthyetcd集群部署构建集群的方式静态发现预先已知 Etcd 集群中有哪些节点，在启动时直接指定好 Etcd 的各个 node 节点地址动态发现通过已有的 Etcd 集群作为数据交互点，然后在扩展新的集群时实现通过已有集群进行服务发现的机制DNS动态发现通过 DNS 查询方式获取其他节点地址信息节点信息这里只提供静态发现部署etcd集群的流程IP地址主机名CPU内存172.16.80.201etcd148G172.16.80.202etcd248G172.16.80.203etcd348G静态发现部署etcd集群创建配置文件etcd11234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# This is the configuration file for the etcd server.# Human-readable name for this member.name: 'etcd1'# Path to the data directory.data-dir: /var/lib/etcd/etcd1.etcd# Path to the dedicated wal directory.wal-dir: /var/lib/etcd/wal# Number of committed transactions to trigger a snapshot to disk.snapshot-count: 10000# Time (in milliseconds) of a heartbeat interval.heartbeat-interval: 100# Time (in milliseconds) for an election to timeout.election-timeout: 1000# Raise alarms when backend size exceeds the given quota. 0 means use the# default quota.quota-backend-bytes: 0# List of comma separated URLs to listen on for peer traffic.listen-peer-urls: 'http://172.16.80.201:2380'# List of comma separated URLs to listen on for client traffic.listen-client-urls: 'http://172.16.80.201:2379,http://127.0.0.1:2379'# Maximum number of snapshot files to retain (0 is unlimited).max-snapshots: 5# Maximum number of wal files to retain (0 is unlimited).max-wals: 5# Comma-separated white list of origins for CORS (cross-origin resource sharing).cors:# List of this member's peer URLs to advertise to the rest of the cluster.# The URLs needed to be a comma-separated list.initial-advertise-peer-urls: 'http://172.16.80.201:2380'# List of this member's client URLs to advertise to the public.# The URLs needed to be a comma-separated list.advertise-client-urls: 'http://172.16.80.201:2379'# Discovery URL used to bootstrap the cluster.discovery:# Valid values include 'exit', 'proxy'discovery-fallback: 'proxy'# HTTP proxy to use for traffic to discovery service.discovery-proxy:# DNS domain used to bootstrap initial cluster.discovery-srv:# Initial cluster configuration for bootstrapping.initial-cluster: 'etcd1=http://172.16.80.201:2380,etcd2=http://172.16.80.202:2380,etcd3=http://172.16.80.203:2380'# Initial cluster token for the etcd cluster during bootstrap.initial-cluster-token: 'etcd-cluster'# Initial cluster state ('new' or 'existing').initial-cluster-state: 'new'# Reject reconfiguration requests that would cause quorum loss.strict-reconfig-check: false# Accept etcd V2 client requestsenable-v2: true# Enable runtime profiling data via HTTP serverenable-pprof: true# Valid values include 'on', 'readonly', 'off'proxy: 'off'# Time (in milliseconds) an endpoint will be held in a failed state.proxy-failure-wait: 5000# Time (in milliseconds) of the endpoints refresh interval.proxy-refresh-interval: 30000# Time (in milliseconds) for a dial to timeout.proxy-dial-timeout: 1000# Time (in milliseconds) for a write to timeout.proxy-write-timeout: 5000# Time (in milliseconds) for a read to timeout.proxy-read-timeout: 0client-transport-security: # Path to the client server TLS cert file. cert-file: # Path to the client server TLS key file. key-file: # Enable client cert authentication. client-cert-auth: false # Path to the client server TLS trusted CA cert file. trusted-ca-file: # Client TLS using generated certificates auto-tls: falsepeer-transport-security: # Path to the peer server TLS cert file. cert-file: # Path to the peer server TLS key file. key-file: # Enable peer client cert authentication. client-cert-auth: false # Path to the peer server TLS trusted CA cert file. trusted-ca-file: # Peer TLS using generated certificates. auto-tls: false# Enable debug-level logging for etcd.debug: falselogger: zap# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.log-outputs: ['stderr']# Force to create a new one member cluster.force-new-cluster: falseauto-compaction-mode: periodicauto-compaction-retention: \"1\"# Set level of detail for exported metrics, specify 'extensive' to include histogram metrics.# default is 'basic'metrics: 'basic'etcd21234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# This is the configuration file for the etcd server.# Human-readable name for this member.name: 'etcd2'# Path to the data directory.data-dir: /var/lib/etcd/etcd2.etcd# Path to the dedicated wal directory.wal-dir: /var/lib/etcd/wal# Number of committed transactions to trigger a snapshot to disk.snapshot-count: 10000# Time (in milliseconds) of a heartbeat interval.heartbeat-interval: 100# Time (in milliseconds) for an election to timeout.election-timeout: 1000# Raise alarms when backend size exceeds the given quota. 0 means use the# default quota.quota-backend-bytes: 0# List of comma separated URLs to listen on for peer traffic.listen-peer-urls: 'http://172.16.80.202:2380'# List of comma separated URLs to listen on for client traffic.listen-client-urls: 'http://172.16.80.202:2379,http://127.0.0.1:2379'# Maximum number of snapshot files to retain (0 is unlimited).max-snapshots: 5# Maximum number of wal files to retain (0 is unlimited).max-wals: 5# Comma-separated white list of origins for CORS (cross-origin resource sharing).cors:# List of this member's peer URLs to advertise to the rest of the cluster.# The URLs needed to be a comma-separated list.initial-advertise-peer-urls: 'http://172.16.80.202:2380'# List of this member's client URLs to advertise to the public.# The URLs needed to be a comma-separated list.advertise-client-urls: 'http://172.16.80.202:2379'# Discovery URL used to bootstrap the cluster.discovery:# Valid values include 'exit', 'proxy'discovery-fallback: 'proxy'# HTTP proxy to use for traffic to discovery service.discovery-proxy:# DNS domain used to bootstrap initial cluster.discovery-srv:# Initial cluster configuration for bootstrapping.initial-cluster: 'etcd1=http://172.16.80.201:2380,etcd2=http://172.16.80.202:2380,etcd3=http://172.16.80.203:2380'# Initial cluster token for the etcd cluster during bootstrap.initial-cluster-token: 'etcd-cluster'# Initial cluster state ('new' or 'existing').initial-cluster-state: 'new'# Reject reconfiguration requests that would cause quorum loss.strict-reconfig-check: false# Accept etcd V2 client requestsenable-v2: true# Enable runtime profiling data via HTTP serverenable-pprof: true# Valid values include 'on', 'readonly', 'off'proxy: 'off'# Time (in milliseconds) an endpoint will be held in a failed state.proxy-failure-wait: 5000# Time (in milliseconds) of the endpoints refresh interval.proxy-refresh-interval: 30000# Time (in milliseconds) for a dial to timeout.proxy-dial-timeout: 1000# Time (in milliseconds) for a write to timeout.proxy-write-timeout: 5000# Time (in milliseconds) for a read to timeout.proxy-read-timeout: 0client-transport-security: # Path to the client server TLS cert file. cert-file: # Path to the client server TLS key file. key-file: # Enable client cert authentication. client-cert-auth: false # Path to the client server TLS trusted CA cert file. trusted-ca-file: # Client TLS using generated certificates auto-tls: falsepeer-transport-security: # Path to the peer server TLS cert file. cert-file: # Path to the peer server TLS key file. key-file: # Enable peer client cert authentication. client-cert-auth: false # Path to the peer server TLS trusted CA cert file. trusted-ca-file: # Peer TLS using generated certificates. auto-tls: false# Enable debug-level logging for etcd.debug: falselogger: zap# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.log-outputs: [stderr]# Force to create a new one member cluster.force-new-cluster: falseauto-compaction-mode: periodicauto-compaction-retention: \"1\"# Set level of detail for exported metrics, specify 'extensive' to include histogram metrics.# default is 'basic'metrics: 'basic'etcd31234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# This is the configuration file for the etcd server.# Human-readable name for this member.name: 'etcd3'# Path to the data directory.data-dir: /var/lib/etcd/etcd3.etcd# Path to the dedicated wal directory.wal-dir: /var/lib/etcd/wal# Number of committed transactions to trigger a snapshot to disk.snapshot-count: 10000# Time (in milliseconds) of a heartbeat interval.heartbeat-interval: 100# Time (in milliseconds) for an election to timeout.election-timeout: 1000# Raise alarms when backend size exceeds the given quota. 0 means use the# default quota.quota-backend-bytes: 0# List of comma separated URLs to listen on for peer traffic.listen-peer-urls: 'http://172.16.80.203:2380'# List of comma separated URLs to listen on for client traffic.listen-client-urls: 'http://172.16.80.203:2379,http://127.0.0.1:2379'# Maximum number of snapshot files to retain (0 is unlimited).max-snapshots: 5# Maximum number of wal files to retain (0 is unlimited).max-wals: 5# Comma-separated white list of origins for CORS (cross-origin resource sharing).cors:# List of this member's peer URLs to advertise to the rest of the cluster.# The URLs needed to be a comma-separated list.initial-advertise-peer-urls: 'http://172.16.80.203:2380'# List of this member's client URLs to advertise to the public.# The URLs needed to be a comma-separated list.advertise-client-urls: 'http://172.16.80.203:2379'# Discovery URL used to bootstrap the cluster.discovery:# Valid values include 'exit', 'proxy'discovery-fallback: 'proxy'# HTTP proxy to use for traffic to discovery service.discovery-proxy:# DNS domain used to bootstrap initial cluster.discovery-srv:# Initial cluster configuration for bootstrapping.initial-cluster: 'etcd1=http://172.16.80.201:2380,etcd2=http://172.16.80.202:2380,etcd3=http://172.16.80.203:2380'# Initial cluster token for the etcd cluster during bootstrap.initial-cluster-token: 'etcd-cluster'# Initial cluster state ('new' or 'existing').initial-cluster-state: 'new'# Reject reconfiguration requests that would cause quorum loss.strict-reconfig-check: false# Accept etcd V2 client requestsenable-v2: true# Enable runtime profiling data via HTTP serverenable-pprof: true# Valid values include 'on', 'readonly', 'off'proxy: 'off'# Time (in milliseconds) an endpoint will be held in a failed state.proxy-failure-wait: 5000# Time (in milliseconds) of the endpoints refresh interval.proxy-refresh-interval: 30000# Time (in milliseconds) for a dial to timeout.proxy-dial-timeout: 1000# Time (in milliseconds) for a write to timeout.proxy-write-timeout: 5000# Time (in milliseconds) for a read to timeout.proxy-read-timeout: 0client-transport-security: # Path to the client server TLS cert file. cert-file: # Path to the client server TLS key file. key-file: # Enable client cert authentication. client-cert-auth: false # Path to the client server TLS trusted CA cert file. trusted-ca-file: # Client TLS using generated certificates auto-tls: falsepeer-transport-security: # Path to the peer server TLS cert file. cert-file: # Path to the peer server TLS key file. key-file: # Enable peer client cert authentication. client-cert-auth: false # Path to the peer server TLS trusted CA cert file. trusted-ca-file: # Peer TLS using generated certificates. auto-tls: false# Enable debug-level logging for etcd.debug: falselogger: zap# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.log-outputs: [stderr]# Force to create a new one member cluster.force-new-cluster: falseauto-compaction-mode: periodicauto-compaction-retention: \"1\"# Set level of detail for exported metrics, specify 'extensive' to include histogram metrics.# default is 'basic'metrics: 'basic'启动etcd集群1234for NODE in 172.16.80.201 172.16.80.202 172.16.80.203;do ssh $NODE systemctl enable etcd ssh $NODE systemctl start etcd &amp;done检查etcd集群123456789101112export ETCDCTL_API=2etcdctl --endpoints 'http://172.16.80.201:2379,http://172.16.80.202:2379,http://172.16.80.202:2379' cluster-healthmember 222fd3b0bb4a5931 is healthy: got healthy result from http://172.16.80.203:2379member 8349ef180b115a83 is healthy: got healthy result from http://172.16.80.201:2379member f525d2d797a7c465 is healthy: got healthy result from http://172.16.80.202:2379cluster is healthyexport ETCDCTL_API=3etcdctl --endpoints='http://172.16.80.201:2379,http://172.16.80.202:2379,http://172.16.80.202:2379' endpoint healthhttp://172.16.80.201:2379 is healthy: successfully committed proposal: took = 2.879402mshttp://172.16.80.203:2379 is healthy: successfully committed proposal: took = 6.708566mshttp://172.16.80.202:2379 is healthy: successfully committed proposal: took = 7.187607msSSL/TLS加密此段翻译自官方文档etcd支持自动TLS、客户端证书身份认证、客户端到服务器端以及对等集群的加密通信生成证书为方便起见，这里使用CFSSL工具生成证书下载CFSSL12345mkdir ~/bincurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64curl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64chmod +x ~/bin/&#123;cfssl,cfssljson&#125;export PATH=$PATH:~/bin创建工作目录12mkdir ~/cfsslcd ~/cfssl创建默认配置文件12cfssl print-defaults config &gt; ca-config.jsoncfssl print-defaults csr &gt; ca-csr.json证书类型介绍客户端证书用于服务器验证客户端身份服务器端证书用于客户端验证服务器端身份对等证书由etcd集群成员使用，同时使用客户端认证和服务器端认证配置CA修改ca-config.json说明expiry定义过期时间，这里的43800h为5年usages字段定义用途signing代表可以用于签发其他证书key encipherment代表将密钥加密server authclient auth12345678910111213141516171819202122232425262728293031323334&#123; \"signing\": &#123; \"default\": &#123; \"expiry\": \"43800h\" &#125;, \"profiles\": &#123; \"server\": &#123; \"expiry\": \"43800h\", \"usages\": [ \"signing\", \"key encipherment\", \"server auth\" ] &#125;, \"client\": &#123; \"expiry\": \"43800h\", \"usages\": [ \"signing\", \"key encipherment\", \"client auth\" ] &#125;, \"peer\": &#123; \"expiry\": \"43800h\", \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ] &#125; &#125; &#125;&#125;配置证书请求修改ca-csr.json，可以根据自己的需求修改对应字段1234567891011121314151617&#123; \"CN\": \"My own CA\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"US\", \"L\": \"CA\", \"O\": \"My Company Name\", \"ST\": \"San Francisco\", \"OU\": \"Org Unit 1\", \"OU\": \"Org Unit 2\" &#125; ]&#125;生成CA证书运行以下命令生成CA证书1cfssl gencert -initca ca-csr.json | cfssljson -bare ca -生成以下文件123ca-key.pemca.csrca.pemca-key.pem为CA的私钥，请妥善保管csr文件为证书请求文件，可以删除生成服务器端证书1cfssl print-defaults csr &gt; server.json修改server.json的CN和hosts字段，names字段按需修改说明hosts字段为列表，服务器端需要将自己作为客户端访问集群，可以使用hostname或者IP地址的形式定义hosts123456789101112131415161718192021&#123; \"CN\": \"example.net\", \"hosts\": [ \"127.0.0.1\", \"192.168.1.1\", \"ext.example.com\", \"coreos1.local\", \"coreos1\" ], \"key\": &#123; \"algo\": \"ecdsa\", \"size\": 256 &#125;, \"names\": [ &#123; \"C\": \"US\", \"L\": \"CA\", \"ST\": \"San Francisco\" &#125; ]&#125;创建服务器端证书和私钥1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server生成以下文件123server-key.pemserver.csrserver.pem生成客户端证书1cfssl print-defaults csr &gt; client.json修改client.json，客户端证书不需要hosts字段，只需要CN字段设置为client1234... \"CN\": \"client\", \"hosts\": [\"\"],...创建客户端证书和私钥1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client client.json | cfssljson -bare client生成以下文件123client-key.pemclient.csrclient.pem生成对等证书1cfssl print-defaults csr &gt; member1.json修改member1.json的CN字段和hosts字段123456789... \"CN\": \"member1\", \"hosts\": [ \"192.168.122.101\", \"ext.example.com\", \"member1.local\", \"member1\" ],...创建member1的证书和密钥1cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer member1.json | cfssljson -bare member1生成以下文件123member1-key.pemmember1.csrmember1.pem对于多个member需要重复此操作，用于生成相对应的对等证书验证证书1234openssl x509 -in ca.pem -text -nooutopenssl x509 -in server.pem -text -nooutopenssl x509 -in client.pem -text -nooutopenssl x509 -in member1.pem -text -noout示例1、客户端使用HTTPS传输数据给服务器端准备CA证书ca.pem，密钥对server.pem server-key.pem启动服务器端启动参数如下123456etcd --name infra0 \\--data-dir /var/lib/etcd/infra0 \\--cert-file=/path/to/server.pem \\--key-file=/path/to/server-key.pem \\--advertise-client-urls=https://127.0.0.1:2379 \\--listen-client-urls=https://127.0.0.1:2379客户端使用HTTPS访问服务器端使用curl加载CA证书测试HTTPS连接12345curl --cacert /path/to/ca.pem \\https://127.0.0.1:2379/v2/keys/foo \\-X PUT \\-d value=bar \\-v示例2、客户端使用客户端证书作为身份验证访问服务器端在示例1的基础上，需要客户端证书client.pem和client-key.pem启动服务器端启动参数如下，这里比示例1多了client-cert-auth和truested-ca-file12345678etcd --name infra0 \\--data-dir /var/lib/etcd/infra0 \\--cert-file=/path/to/server.pem \\--key-file=/path/to/server-key.pem \\--advertise-client-urls=https://127.0.0.1:2379 \\--listen-client-urls=https://127.0.0.1:2379 \\--client-cert-auth \\--trusted-ca-file=/path/to/ca.crt重复示例1的访问1curl --cacert /path/to/ca.crt https://127.0.0.1:2379/v2/keys/foo -XPUT -d value=bar -v此命令结果会提示被服务器端拒绝123...routines:SSL3_READ_BYTES:sslv3 alert bad certificate...使用客户端证书访问服务器端1234567curl --cacert /path/to/ca.pem \\--cert /path/to/client.pem \\--key /path/to/client-key.pem \\-L https://127.0.0.1:2379/v2/keys/foo \\-X PUT \\-d value=bar \\-v命令结果包含以下信息身份认证成功1234...SSLv3, TLS handshake, CERT verify (15):...TLS handshake, Finished (20)示例3、在集群中传输安全和客户端证书这里需要为每个member配备对应的member证书，操作步骤见生成证书部分假设有2个member，这两个member都已生成对应的证书(member1.pem、member1-key.pem、member2.pem、member2-key.pem)etcd 成员将组成一个集群，集群中成员之间的所有通信将使用客户端证书进行加密和验证。etcd的输出将显示其连接的地址使用HTTPS。启动服务器端从https://discovery.etcd.io/new获取discovery_url作为启动集群的发现服务发现服务可以在内网环境搭建，详见github地址1DISCOVERY_URL=$(curl https://discovery.etcd.io/new)member1123456789etcd --name infra1 \\--data-dir /var/lib/etcd/infra1 \\--peer-client-cert-auth \\--peer-trusted-ca-file=/path/to/ca.pem \\--peer-cert-file=/path/to/member1.pem \\--peer-key-file=/path/to/member1-key.pem \\--initial-advertise-peer-urls=https://10.0.1.11:2380 \\--listen-peer-urls=https://10.0.1.11:2380 \\--discovery $&#123;DISCOVERY_URL&#125;member2123456789etcd --name infra2 \\--data-dir /var/lib/etcd/infra2 \\--peer-client-cert-auth \\--peer-trusted-ca-file=/path/to/ca.pem \\--peer-cert-file=/path/to/member2.pem \\--peer-key-file=/path/to/member2-key.pem \\--initial-advertise-peer-urls=https://10.0.1.12:2380 \\--listen-peer-urls=https://10.0.1.12:2380 \\--discovery $&#123;DISCOVERY_URL&#125;示例4、自动自签名对于只需要加密传输数据而不需要身份验证的场景，etcd支持使用自动生成的自签名证书加密传输数据启动服务器端1DISCOVERY_URL=$(curl https://discovery.etcd.io/new)member11234567etcd --name infra1 \\--data-dir /var/lib/etcd/infra1 \\--auto-tls \\--peer-auto-tls \\--initial-advertise-peer-urls=https://10.0.1.11:2380 \\--listen-peer-urls=https://10.0.1.11:2380 \\--discovery $&#123;DISCOVERY_URL&#125;member21234567etcd --name infra2 \\--data-dir /var/lib/etcd/infra2 \\--auto-tls \\--peer-auto-tls \\--initial-advertise-peer-urls=https://10.0.1.12:2380 \\--listen-peer-urls=https://10.0.1.12 :2380 \\--discovery $&#123;DISCOVERY_URL&#125;注意由于自签名证书不会进行身份认证，因此curl会返回错误，因此需要添加-k参数禁用证书链检查etcd维护操作请求最大字节数官网文档说明max-request-bytes限制请求的大小，默认值是1572864，即1.5M。在某些场景可能会出现请求过大导致无法写入的情况，可以调大到10485760即10M。快照条目数量调整--snapshot-count：指定有多少事务（transaction）被提交时，触发截取快照保存到磁盘。从v3.2开始，--snapshot-count的默认值已从10000更改为100000。注意此参数具体数值可以通过根据实际情况调整过低会带来频繁的IO压力，影响集群可用性和写入吞吐量。过高则导致内存占用过高以及会让etcd的GC变慢历史数据压缩（针对v3的API）由于etcd保存了key的历史记录，因此能通过MVCC机制获取多版本的数据，需要定期压缩历史记录避免性能下降和空间耗尽。到达上限阈值时，集群将处于只读和只能删除key的状态，无法写操作。历史数据压缩只是针对数据的历史版本进行清理，清理之后只能读取到清理点之后的历史版本手动压缩清理revision为3之前的历史数据12export ETCDCTL_API=3etcdctl compact 3清理之后，访问revision3之前的数据会提示不存在123export ETCDCTL_API=3etcdctl get KEY_NAME --rev=2Error: etcdserver: mvcc: required revision has been compacted自动压缩启动参数中添加--auto-compaction-retention=1即为每小时压缩一次碎片整理(针对v3的API)在数据压缩操作之后，旧的revision被压缩，会产生内部碎片，这些内部碎片可以被etcd使用，但是仍消耗磁盘空间。碎片整理就是将这部分空间释放出来。12export ETCDCTL_API=3etcdctl defrag空间配额etcd通过--quota-backend-bytes参数来限制etcd数据库的大小，以字节为单位。默认是2147483648即2GB，最大值为8589934592即8GB。容量限制见官方文档数据备份(针对v3的API)快照备份通过快照etcd集群可以作备份数据的用途。可以通过快照备份的数据，将etcd集群恢复到快照的时间点。12export ETCDCTL_API=3etcdctl snapshot save /path/to/snapshot.db检查快照状态123456etcd --write-out=table snapshot status /path/to/snapshot.db+----------+----------+------------+------------+| HASH | REVISION | TOTAL KEYS | TOTAL SIZE |+----------+----------+------------+------------+| dd97719a | 24276 | 1113 | 3.0 MB |+----------+----------+------------+------------+基于快照的定期备份脚本12345678910111213#!/bin/shTIME=$(date +%Y%m%d)HOUR=$(date +%H)BACKUP_DIR=\"/data/etcd_backup/$&#123;TIME&#125;\"mkdir -p $BACKUP_DIRexport ETCDCTL_API=3/usr/local/bin/etcdctl --cacert=/etc/etcd/ssl/etcd-ca.pem \\ --cert=/etc/etcd/ssl/etcd-client.pem \\ --key=/etc/etcd/ssl/etcd-client-key.pem \\ --endpoints=https://member1:2379,https://member2:2379,https://member3:2379 \\ snapshot save $BACKUP_DIR/snapshot-$&#123;HOUR&#125;.db# 清理2天前的etcd备份find /data/etcd_backup -type d -mtime +2 -exec rm -rf &#123;&#125; \\;etcd镜像集群(针对v3的API)通过mirror-maker实时做镜像的方式同步数据，如果出现主机房服务挂了可以通过切换域名的形式切换到灾备机房；这个过程中数据是可以保持一致的。提前部署好两套etcd集群之后，可以在主集群上面运行以下命令1234567891011121314151617export ETCDCTL_API=3etcdctl make-mirror --no-dest-prefix=true http://mirror1:2379,http://mirror2:2379,http://mirror3:2379# 输出示例48854660466272077883689495010091067112511831241make-mirror的输出为30s一次，程序为前台运行，可以通过nohup &gt;/path/to/log 2&gt;&amp;1 &amp;的方式扔到后台运行etcd监控debug endpoint启动参数中添加--debug即可打开debug模式，etcd会在http://x.x.x.x:2379/debug路径下输出debug信息。由于debug信息很多，会导致性能下降。/debug/pprof为go语言runtime的endpoint，可以用于分析CPU、heap、mutex和goroutine利用率。这里示例为使用go命令获取etcd最耗时的12345678910111213141516171819202122232425$ go tool pprof http://127.0.0.1:2379/debug/pprof/profileFetching profile over HTTP from http://127.0.0.1:2379/debug/pprof/profileSaved profile in /root/pprof/pprof.etcd-3.2.24.samples.cpu.001.pb.gzFile: etcd-3.2.24Type: cpuTime: Feb 10, 2019 at 9:57pm (CST)Duration: 30s, Total samples = 60ms ( 0.2%)Entering interactive mode (type \"help\" for commands, \"o\" for options)(pprof) (pprof) (pprof) top10Showing nodes accounting for 60ms, 100% of 60ms totalShowing top 10 nodes out of 25 flat flat% sum% cum cum% 60ms 100% 100% 60ms 100% runtime.futex 0 0% 100% 10ms 16.67% github.com/coreos/etcd/cmd/vendor/github.com/coreos/etcd/etcdserver.(*raftNode).start.func1 0 0% 100% 10ms 16.67% github.com/coreos/etcd/cmd/vendor/github.com/coreos/etcd/etcdserver.(*raftNode).tick 0 0% 100% 10ms 16.67% github.com/coreos/etcd/cmd/vendor/github.com/coreos/etcd/raft.(*node).Tick 0 0% 100% 20ms 33.33% runtime.chansend 0 0% 100% 30ms 50.00% runtime.exitsyscall 0 0% 100% 30ms 50.00% runtime.exitsyscallfast 0 0% 100% 30ms 50.00% runtime.exitsyscallfast.func1 0 0% 100% 30ms 50.00% runtime.exitsyscallfast_pidle 0 0% 100% 60ms 100% runtime.futexwakeup(pprof) exitmetrics endpoint每个etcd节点都会在/metrics路径下输出监控信息，监控软件可以通过此路径获取指标信息具体的metrics信息可以参看官方文档--listen-metrics-urls定义metrics的location。--metrics可以定义basic和extensive这里通过curl命令来获取metrics信息1curl http://127.0.0.1:2379/metricshealth check这里通过curl命令来获取health信息，返回结果为json1curl http://127.0.0.1:2379/health返回结果如下123&#123; \"health\": \"true\"&#125;对接Prometheus配置文件HTTP123456global: scrape_interval: 10sscrape_configs: - job_name: etcd-cluster-monitoring static_configs: - targets: ['10.240.0.32:2379','10.240.0.33:2379','10.240.0.34:2379']HTTPS12345678910111213global: scrape_interval: 10sscrape_configs: - job_name: etcd-cluster-monitoring static_configs: - targets: ['10.240.0.32:2379','10.240.0.33:2379','10.240.0.34:2379'] scheme: https tls_config: # CA certificate to validate API server certificate with. ca_file: /path/to/etcd-ca.pem cert_file: /path/to/etcd-cert.pem key_file: /path/to/etcd-key.pem # insecure_skip_verify: true | false监控告警使用Alertmanager进行监控告警Prometheus 1.x 范例Prometheus 2.x 范例监控指标展示使用Grafana读取Prometheus的数据展示监控数据，Dashboard模板etcd故障处理leader节点故障leader节点故障，etcd集群会自动选举出新的leader。故障检测模型是基于超时的，因此选举新的leader节点不会在旧的leader节点故障之后立刻发生。选举leader期间，集群不会处理写入操作。选举期间的写入请求会进入队列等待处理，直至选出新的leader节点。已经发送给故障leader但尚未提交的数据可能会丢失。这是因为新的leader节点有权对旧leader节点的数据进行修改客户端会发现一些写入请求可能会超时，没有提交的数据会丢失。follower节点故障follower故障节点数量少于集群节点的一半时，etcd集群是可以正常工作的。例如3个节点故障了1个，5个节点故障了2个follower节点故障后，客户端的etcd库应该自动连接到etcd集群的其他成员。超过半数节点故障由于Raft算法的原理所限，超过半数的集群节点故障会导致etcd集群进入不可写入的状态。只要正常工作的节点超过集群节点的一半，那么etcd集群会自动选举leader节点并且自动恢复到健康状态如果无法修复多数节点，那么就需要走灾难恢复的操作流程网络分区由于网络故障，导致etcd集群被切分成两个或者更多的部分。那么占有多数节点的一方会成为可用集群，少数节点的一方不可写入。如果对等切分了集群，那么每个部分都不可用。这是因为Raft一致性算法保证了etcd是不存在脑裂现象。只要网络分区的故障解除，少数节点的一方会自动从多数节点一方识别出leader节点，然后恢复状态。集群启动失败只有超过半数成员启动完成之后，集群的bootstrap才会成功。Raft一致性算法保证了集群节点的数据一致性和稳定性，因此对于节点的恢复，更多的是恢复etcd节点服务，然后恢复数据新的集群可以删除所有成员的数据目录，然后重新走创建集群的步骤已有集群这个就要看无法启动的节点是数据文件损坏，还是其他原因导致的。这里以数据文件损坏为例。寻找正常的节点，使用etcdctl snapshot save命令保存出快照文件将故障节点的数据目录清空，使用etcdctl snapshot restore命令将数据恢复到数据目录使用etcdctl member list确认故障节点的信息使用etcdctl member remove删除故障节点使用etcdctl member add MEMBER_NAME --peer-urls=http://member:2379重新添加成员修改etcd启动参数--initial-cluster-state=existing启动故障节点的etcd服务etcd灾难恢复这里的灾难恢复，只能恢复v2或者v3的数据，不能同时恢复v2和v3。两套API是相互隔离的。针对v3的APIetcd v3的API提供了快照和恢复功能，可以在不损失快照点数据的情况下重建集群快照备份数据1ETCDCTL_API=3 etcdctl --endpoints http://member1:2379,http://member2:2379,http://member3:2379 snapshot save /path/to/snapshot.db恢复集群恢复etcd集群，只需要快照文件db即可。使用etcdctl snapshot restore命令还原数据时会自动创建新的etcd数据目录。恢复过程会覆盖快照文件里面的一些metadata（特别是member id和cluster id），该member会失去之前的id。覆盖metadata可以防止新成员无意中加入现有集群。从快照中恢复集群，必须以新集群启动。恢复时可以选择验证快照完整性hash。使用etcdctl snapshot save生成的快照，则具有完整性hash如果是直接从数据目录拷贝数据快照，则没有完整性hash，需要使用--skip-hash-check跳过检查恢复节点数据这里假定原有的集群节点为member1、member2、member3在member1、member2、member3上分别恢复快照数据123456789101112131415$ ETCDCTL_API=3 etcdctl snapshot restore snapshot.db \\ --name member1 \\ --initial-cluster member1=http://member1:2380,member2=http://member2:2380,member3=http://member3:2380 \\ --initial-cluster-token etcd-cluster-1 \\ --initial-advertise-peer-urls http://member1:2380$ ETCDCTL_API=3 etcdctl snapshot restore snapshot.db \\ --name member2 \\ --initial-cluster member1=http://member1:2380,member2=http://member2:2380,member3=http://member3:2380 \\ --initial-cluster-token etcd-cluster-1 \\ --initial-advertise-peer-urls http://member2:2380$ ETCDCTL_API=3 etcdctl snapshot restore snapshot.db \\ --name member3 \\ --initial-cluster member1=http://member1:2380,member2=http://member2:2380,member3=http://member3:2380 \\ --initial-cluster-token etcd-cluster-1 \\ --initial-advertise-peer-urls http://member3:2380启动etcd集群在member1、member2、member3上分别启动集群123456789101112131415$ etcd \\ --name member1 \\ --listen-client-urls http://member1:2379 \\ --advertise-client-urls http://member1:2379 \\ --listen-peer-urls http://member1:2380 &amp;$ etcd \\ --name member2 \\ --listen-client-urls http://member2:2379 \\ --advertise-client-urls http://member2:2379 \\ --listen-peer-urls http://member2:2380 &amp;$ etcd \\ --name member3 \\ --listen-client-urls http://member3:2379 \\ --advertise-client-urls http://member3:2379 \\ --listen-peer-urls http://member3:2380 &amp;针对v2的API备份数据123456ETCDCTL_API=3etcdctl backup \\ --data-dir /path/to/data-dir \\ --wal-dir /path/to/wal_dir \\ --backup-dir /path/to/backup_data_dir \\ --backup-wal-dir /path/to/backup_wal_dir清理数据目录12rm -rf /path/to/data-dirrm -rf /path/to/wal-dir恢复数据12mv /path/to/backup_data_dir /path/to/data-dirmv /path/to/backup_wal_dir /path/to/wal_dir启动etcd集群启动参数需要添加--force-new-cluster123etcd --data-dir /path/to/data-dir \\ --wal-dir /path/to/wal_dir \\ --force-new-clusteretcd版本升级这里可以参考etcd的升级文档etcd的FAQ摘自Frequently Asked Questions (FAQ)客户端是否需要向etcd集群的leader节点发送请求leader节点负责处理所有需要集群共识的请求（例如写请求）。客户端不需要知道哪个节点是leader，follower节点会将所有需要集群共识的请求转发给leader节点。所有节点都可以处理不需要集群共识的请求（例如序列化读取）。listen-client-urls、listen-peer-urls、advertise-client-urls、initial-advertise-peer-urls的区别listen-client-urls和listen-peer-urls指定etcd服务端用于接收传入连接的本地地址，要监听所有地址，请指定0.0.0.0作为监听地址。advertise-client-urls 和initial-advertise-peer-urls指定etcd的客户端及集群其他成员访问etcd服务的地址，此地址必须要被外部访问，因此不能设置127.0.0.1或者0.0.0.0等地址。为什么不能通过更改listen-peer-urls或者initial-advertise-peer-urls来更新etcdctl member list中列出的advertise peer urls每个member的advertise-peer-urls来自初始化集群时的initial-advertise-peer-urls参数在member启动完成后修改listen-peer-urls或者initial-advertise-peer-urls参数不会影响现有的advertise-peer-urls，因为修改此参数需要通过集群仲裁以避免出现脑裂修改advertise-peer-url请使用etcd member update命令操作系统要求etcd会将数据写入磁盘，因此高性能的磁盘会更好，推荐使用SSD默认存储配额为2GB，最大值为8GB为了避免使用swap或者内存不足，服务器内存至少要超过存储配额为什么etcd需要奇数个集群成员etcd集群需要通过大多数节点仲裁才能将集群状态更新到一致仲裁为(n/2)+1双数个集群成员并不比奇数个节点容错性强集群容错性列表Cluster SizeMajorityFailure Tolerance110220321431532642743853954集群最大节点数量理论上没有硬性限制，一般不超过7个节点建议5个节点，5个节点可以容忍2个节点故障下线，在大多数情况下已经足够更多的节点可以提供更好的可用性，但是写入性能会有影响部署跨数据中心的etcd集群是否合适跨数据中心的etcd集群可以提高可用性数据中心之间的网络延迟可能会影响节点的election默认的etcd配置可能会因为网络延迟频繁选举或者心跳超时，需要调整对应的参数为什么etcd会因为磁盘IO延迟而重新选举这是故意设计的磁盘IO延迟是leader节点存活指标的一部分磁盘IO延迟很高导致选举超时，即使leader节点在选举间隔内能处理网络信息（例如发送心跳），但它实际上是不可用的，因为它无法及时提交新的提议如果经常出现因磁盘IO延迟而重新选举，请关注一下磁盘或者修改etcd时间参数etcd性能压测这里参考官方文档性能指标延迟完成操作所需的时间吞吐量一段时间内完成的总操作数量通常情况下，平均延迟会随着吞吐量的增加而增加。etcd使用Raft一致性算法完成成员之间的数据同步并达成集群共识。集群的共识性能，尤其是提交延迟，主要受到两个方面限制。网络IO延迟磁盘IO延迟提交延迟的构成成员之间的网络往返时间RTT同一个数据中心内部的RTT是ms级别跨数据中心的RTT就需要考虑物理限制和网络质量fdatasync数据落盘时间机械硬盘fdatasync延迟通常在10ms左右固态硬盘则低于1ms其他延迟构成序列化etcd请求需要通过etcd后端boltdb的MVVC机制来完成，通常会在10ms完成。etcd定期将最近提交的请求快照，然后跟磁盘上的快照合并，这个操作过程会导致延迟出现峰值。正在进行的数据压缩也会影响到延迟，所以要跟业务错开benchmark跑分etcd自带的benchmark命令行工具可以用来测试etcd性能写入请求123456789101112131415161718192021222324# 假定 HOST_1 是 leader, 写入请求发到 leaderbenchmark --endpoints=$&#123;HOST_1&#125; \\ --conns=1 \\ --clients=1 \\ put --key-size=8 \\ --sequential-keys \\ --total=10000 \\ --val-size=256benchmark --endpoints=$&#123;HOST_1&#125; \\ --conns=100 \\ --clients=1000 \\ put --key-size=8 \\ --sequential-keys \\ --total=100000 \\ --val-size=256 # 写入发到所有成员benchmark --endpoints=$&#123;HOST_1&#125;,$&#123;HOST_2&#125;,$&#123;HOST_3&#125; \\ --conns=100 \\ --clients=1000 \\ put --key-size=8 \\ --sequential-keys \\ --total=100000 \\ --val-size=256序列化读取123456789101112131415161718192021222324252627# Single connection read requestsbenchmark --endpoints=$&#123;HOST_1&#125;,$&#123;HOST_2&#125;,$&#123;HOST_3&#125; \\ --conns=1 \\ --clients=1 \\ range YOUR_KEY \\ --consistency=l \\ --total=10000benchmark --endpoints=$&#123;HOST_1&#125;,$&#123;HOST_2&#125;,$&#123;HOST_3&#125; \\ --conns=1 \\ --clients=1 \\ range YOUR_KEY \\ --consistency=s \\ --total=10000# Many concurrent read requestsbenchmark --endpoints=$&#123;HOST_1&#125;,$&#123;HOST_2&#125;,$&#123;HOST_3&#125; \\ --conns=100 \\ --clients=1000 \\ range YOUR_KEY \\ --consistency=l \\ --total=100000benchmark --endpoints=$&#123;HOST_1&#125;,$&#123;HOST_2&#125;,$&#123;HOST_3&#125; \\ --conns=100 \\ --clients=1000 \\ range YOUR_KEY \\ --consistency=s \\ --total=100000etcd性能调优参考官方文档etcd默认配置是基于同一个数据中心，网络延迟较低的情况。对于网络延迟较高，那么就需要优化心跳间隔和选举超时时间时间参数（time parameter）延迟不止有网络延迟，还可能受到节点磁盘IO影响。每一次超时设置应该包括请求发出到响应成功的时间。心跳间隔（heartbeat interval）leader节点通知各follower节点自己的存活信息。最佳实践是通过ping命令获取RTT最大值，然后设置为RTT的0.5~1.5倍。默认是100ms。选举超时（election timeout）follower节点在多久之后没收到leader节点的心跳信息，就开始选举新leader节点。默认是1000ms。选举超时应该设置为至少是RTT的10倍，以避免网络出现波动导致重新选举。快照（snapshot）etcd会将所有变更的key追加写入到wal日志文件中。一行记录一个key的变更，因此日志会不断增长。为避免日志过大，etcd会定期做快照。快照操作会保存当前系统状态并移除旧的日志。snapshot-count参数控制快照的频率，默认是10000，即每10000次变更会触发一次快照操作。如果内存使用率高并且磁盘使用率高，可以尝试调低这个参数。磁盘etcd集群对磁盘IO延迟非常的敏感。etcd需要存储变更日志、快照等操作，可能会导致磁盘IO出现很高的fsync延迟。磁盘IO延迟高会导致leader节点心跳信息超时、请求超时、重新选举等。etcd所使用的磁盘与系统盘分开data目录和wal目录分别挂载不同的磁盘有条件推荐使用SSD固态硬盘使用ionice调高etcd进程的IO优先级（这个针对etcd数据目录在系统盘的情况）1ionice -c2 -n0 -p `pgrep etcd`网络如果leader节点接收来自客户端的大量请求，无法及时处理follower的请求，那么follower节点处理的请求也会因此出现延迟。具体表现为follower会提示sending buffer is full。可以通过调高leader的网络优先级或者通过流量管控机制来提高对follower的请求响应。","categories":[],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"https://luanlengli.github.io/tags/kubernetes/"},{"name":"etcd","slug":"etcd","permalink":"https://luanlengli.github.io/tags/etcd/"}]},{"title":"CentOS7使用社区YUM源安装Mariadb Galera集群","slug":"CentOS7使用社区YUM源安装Mariadb-Galera集群","date":"2018-12-10T16:07:07.000Z","updated":"2019-05-28T06:36:23.421Z","comments":true,"path":"2018/12/11/CentOS7使用社区YUM源安装Mariadb-Galera集群.html","link":"","permalink":"https://luanlengli.github.io/2018/12/11/CentOS7使用社区YUM源安装Mariadb-Galera集群.html","excerpt":"","text":"简介本文以MariaDB官方文档为基础，记录操作步骤安装Mariadb数据库前的准备工作准备虚拟机三台IP地址主机名CPU内存172.16.10.101db123G172.16.10.102db223G172.16.10.103db323G添加Mariadb官方YUM源，下面以Mariadb 10.1为例官方YUM源编辑器使用以下命令快速添加YUM源1234567tee /etc/yum.repos.d/mariadb.repo &lt;&lt;-'EOF'[mariadb]name = MariaDBbaseurl = https://mirrors.ustc.edu.cn/mariadb/yum/10.1/centos7-amd64gpgkey=https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDBgpgcheck=1 EOF刷新YUM缓存1yum makecache查看Mariadb相关的安装包，注意软件包版本和对应的YUM源名字1yum list MariaDB* galera关闭firewalld防火墙1systemctl disable firewalld --now设置主机名（设置三台虚拟机主机名分别为db1，db2，db3）123hostnamectl set-hostname db1hostnamectl set-hostname db2hostnamectl set-hostname db3编辑/etc/hosts文件12345cat /etc/hosts &lt;&lt;EOF172.16.10.101 db1172.16.10.102 db2172.16.10.103 db3EOF关闭SELINUX123setenforce 0 sed -i 's,^SELINUX=enforcing,SELINUX=disabled,g' /etc/selinux/config部署MariaDB Galera集群安装相关软件包1yum install MariaDB-server MariaDB-client MariaDB-client启用xtrabackup-v2功能需要额外安装percona提供的软件包1yum install https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.10/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.10-1.el7.x86_64.rpm启动MariaDB数据库在db1上启动MariaDB数据库，设置galera集群同步账号,进行安全初始化1234systemctl start mariadb.servicemysql -uroot -e \"grant all privileges on *.* to 'sst'@'localhost' identified by 'password';\" mysql_secure_installation systemctl stop mariadb.service编辑MariaDB配置文件在三个节点上编辑MariaDB配置文件，以开启galera集群功能123456789101112131415161718192021222324252627282930313233343536373839404142cat /etc/my.cnf.d/galera.cnf[server][mysqld]# 监听哪个地址，这里每个节点填对应的ip地址bind-address=172.16.10.101 # 监听哪个端口port = 3306 # 设置默认字符编码集collation-server = utf8_general_ciinit-connect = SET NAMES utf8character-set-server = utf8# 设置日志路径log-error = /var/log/mariadb/mariadb.log# 设置binloglog-bin = mysql-binbinlog_format=ROW# 设置默认数据目录datadir = /var/lib/mysql/ # 设置默认存储引擎default-storage-engine=innodbinnodb_autoinc_lock_mode=2 [galera]wsrep_on=ONwsrep_provider=/usr/lib64/galera/libgalera_smm.so# galera集群名字wsrep_cluster_name=\"galera_cluster\" # 本节点的主机名，这里每个节点填对应的ip地址wsrep_node_name=\"db1\" wsrep_cluster_address = \"gcomm://172.16.10.101:4567,172.16.10.102:4567,172.16.10.103:4567\"wsrep_provider_options = \"gmcast.listen_addr=tcp://172.16.10.101:4567;ist.recv_addr=172.16.10.101:4568\" wsrep_node_address=\"172.16.10.101:4567\" # 设置galera集群同步的方法和用户名密码wsrep_sst_auth=sst:passwordwsrep_sst_method=xtrabackup-v2max_connections = 10000 key_buffer_size = 64Mmax_heap_table_size = 64Mtmp_table_size = 64Minnodb_buffer_pool_size = 128M[embedded][mariadb][mariadb-10.1]启动galera集群创建集群在db1上运行galera_new_cluster命令1galera_new_cluster查看集群状态在db1上查看集群状态123456# mysql -uroot -p -e \"show status like 'wsrep_cluster_size';\"+--------------------------+--------------------------------------+| Variable_name | Value |+--------------------------+--------------------------------------+| wsrep_cluster_size | 1 |+--------------------------+--------------------------------------+监控MariaDB日志监控db1上的MariaDB日志在启动其他节点的时候，能看到其他节点加入到galera集群1tail -f /var/log/mariadb/mariadb.log启动其他节点数据库在db2和db3上运行MariaDB数据库1systemctl start mariadb检查集群状态在db1上检查集群状态123456mysql -uroot -p -e \"show status like 'wsrep_cluster_size';\"+--------------------------+--------------------------------------+| Variable_name | Value |+--------------------------+--------------------------------------+| wsrep_cluster_size | 3 |+--------------------------+--------------------------------------+验证MariaDB galera集群的同步功能是否正常在db1上创建用户、数据库123mysql -uroot -p -e \"user add testuser;\"mysql -uroot -p -e \"create database testdb;\"mysql -uroot -p -e \"grant all privileges on testdb.* to 'testuser'@'localhost' identified by 'password';\"在db2上检查用户、数据库是否存在12mysql -uroot -p -e \"select user,host from mysql.user;\"mysql -uroot -p -e \"show databases;\"在db3上删除用户和数据库12mysql -uroot -p -e \"delete user 'testuser'\"mysql -uroot -p -e \"drop database testdb\"在db1上检查用户和数据库是否还在12mysql -uroot -p -e \"select user,host from mysql.user;\"mysql -uroot -p -e \"show databases;\"至此，MariaDB galera集群已经部署完成","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://luanlengli.github.io/tags/MySQL/"},{"name":"Linux","slug":"Linux","permalink":"https://luanlengli.github.io/tags/Linux/"}]},{"title":"使用Docker打包shadowsocks-libev镜像","slug":"使用Docker打包shadowsocks-libev镜像","date":"2018-12-10T16:03:06.000Z","updated":"2018-12-10T16:31:12.000Z","comments":true,"path":"2018/12/11/使用Docker打包shadowsocks-libev镜像.html","link":"","permalink":"https://luanlengli.github.io/2018/12/11/使用Docker打包shadowsocks-libev镜像.html","excerpt":"","text":"介绍记录一下使用Dockerfile制作shadowsocks-libev镜像的过程基于Alpine-3.8和shadowsocks-libev-v3.2.3制作参考shadowsocks-libev项目上面的Dockerfile以下是Dockerfile内容1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# README# /* BUILD IMAGE */# dokcer image build -t shadowsocks-libev:v3.2.3 .# /* RUN CONATIANER */# docker container run -d -e SERVER_PORT=111 -e PASSWORD='password' -e METHOD='aes-256-gcm' --net host --name ss-libev-port111 shadowsocks-libev:v3.2-alpine3.8# /* SS-SERVER HELP */# shadowsocks-libev 3.2.3# # maintained by Max Lv &lt;max.c.lv@gmail.com&gt; and Linus Yang &lt;laokongzi@gmail.com&gt;# # usage:# # ss-server# # -s &lt;server_host&gt; Host name or IP address of your remote server.# -p &lt;server_port&gt; Port number of your remote server.# -l &lt;local_port&gt; Port number of your local server.# -k &lt;password&gt; Password of your remote server.# -m &lt;encrypt_method&gt; Encrypt method: rc4-md5, # aes-128-gcm, aes-192-gcm, aes-256-gcm,# aes-128-cfb, aes-192-cfb, aes-256-cfb,# aes-128-ctr, aes-192-ctr, aes-256-ctr,# camellia-128-cfb, camellia-192-cfb,# camellia-256-cfb, bf-cfb,# chacha20-ietf-poly1305,# xchacha20-ietf-poly1305,# salsa20, chacha20 and chacha20-ietf.# The default cipher is chacha20-ietf-poly1305.# # [-a &lt;user&gt;] Run as another user.# [-f &lt;pid_file&gt;] The file path to store pid.# [-t &lt;timeout&gt;] Socket timeout in seconds.# [-c &lt;config_file&gt;] The path to config file.# [-n &lt;number&gt;] Max number of open files.# [-i &lt;interface&gt;] Network interface to bind.# [-b &lt;local_address&gt;] Local address to bind.# # [-u] Enable UDP relay.# [-U] Enable UDP relay and disable TCP relay.# [-6] Resovle hostname to IPv6 address first.# # [-d &lt;addr&gt;] Name servers for internal DNS resolver.# [--reuse-port] Enable port reuse.# [--fast-open] Enable TCP fast open.# with Linux kernel &gt; 3.7.0.# [--acl &lt;acl_file&gt;] Path to ACL (Access Control List).# [--manager-address &lt;addr&gt;] UNIX domain socket address.# [--mtu &lt;MTU&gt;] MTU of your network interface.# [--mptcp] Enable Multipath TCP on MPTCP Kernel.# [--no-delay] Enable TCP_NODELAY.# [--key &lt;key_in_base64&gt;] Key of your remote server.# [--plugin &lt;name&gt;] Enable SIP003 plugin. (Experimental)# [--plugin-opts &lt;options&gt;] Set SIP003 plugin options. (Experimental)# # [-v] Verbose mode.# [-h, --help] Print this message.FROM alpine:3.8ENV TZ 'Asia/Shanghai'ENV SS_VERSION 3.2.3ENV SS_DOWNLOAD_URL https://github.com/shadowsocks/shadowsocks-libev/releases/download/v$&#123;SS_VERSION&#125;/shadowsocks-libev-$&#123;SS_VERSION&#125;.tar.gzRUN apk upgrade \\ &amp;&amp; apk add bash tzdata libsodium rng-tools \\ &amp;&amp; apk add --virtual .build-deps \\ autoconf \\ automake \\ xmlto \\ build-base \\ curl \\ c-ares-dev \\ libev-dev \\ libtool \\ linux-headers \\ udns-dev \\ libsodium-dev \\ mbedtls-dev \\ pcre-dev \\ udns-dev \\ tar \\ git \\ &amp;&amp; wget -q -O - $SS_DOWNLOAD_URL | tar xz \\ &amp;&amp; (cd shadowsocks-libev-$&#123;SS_VERSION&#125; \\ &amp;&amp; ./configure --prefix=/usr --disable-documentation \\ &amp;&amp; make install) \\ &amp;&amp; ln -sf /usr/share/zoneinfo/$TZ /etc/localtime \\ &amp;&amp; echo $TZ &gt; /etc/timezone \\ &amp;&amp; apk del .build-deps \\ &amp;&amp; rm -rf shadowsocks-libev-$&#123;SS_VERSION&#125; \\ /var/cache/apk/* \\ &amp;&amp; apk add --no-cache \\ rng-tools \\ $(scanelf --needed --nobanner /usr/bin/ss-* \\ | awk '&#123; gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 &#125;' \\ | sort -u) CMD [\"/usr/bin/ss-server\"]","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://luanlengli.github.io/tags/docker/"}]},{"title":"【不定时更新】二进制部署 kubernetes v1.11.x 高可用集群","slug":"二进制部署 kubernetes v1.11.x 高可用集群","date":"2018-12-08T03:34:08.000Z","updated":"2019-05-28T06:37:34.604Z","comments":true,"path":"2018/12/08/二进制部署 kubernetes v1.11.x 高可用集群.html","link":"","permalink":"https://luanlengli.github.io/2018/12/08/二进制部署 kubernetes v1.11.x 高可用集群.html","excerpt":"","text":"更新记录2019年2月13日由于runc逃逸漏洞CVE-2019-5736，根据kubernetes的文档建议，修改docker-ce版本为18.09.22019年1月7日添加基于ingress-nginx使用域名+HTTPS的方式访问kubernetes-Dashboard2019年1月2日添加RBAC规则，修复kube-apiserver无法访问kubelet的问题2019年1月1日调整master节点和worker节点的操作步骤，添加CoreDNS的configmap中的hosts静态解析2018年12月28日修改kube-prometheus部分，修复Prometheus的Targets无法发现的问题2018年12月26日修改kubernetes-dashboard链接指向2018年12月25日修改kubele.config.file路径问题2018年12月18日修改kubelet和kube-proxy启动时加载config file2018年12月17日添加EFK部署内容2018年12月16日添加prometheus-operator部署内容2018年12月14日添加helm部署内容，拆分etcd的server证书和client证书2018年12月13日添加rook-ceph部署内容2018年12月12日添加Metrics-Server内容2018年12月11日添加Dashboard、Ingress内容2018年12月10日添加kube-flannel、calico、CoreDNS内容2018年12月9日分拆master节点和work节点的内容2018年12月8日初稿介绍本次部署方式为二进制可执行文件的方式部署注意请根据自己的实际情况调整对于生产环境部署，请注意某些参数的选择如无特殊说明，均在k8s-m1节点上执行参考博文感谢两位大佬的文章，这里整合一下两位大佬的内容，结合自己的理解整理本文【漠然】Kubernetes 1.10.1 集群搭建【漠然】使用 Bootstrap Token 完成 TLS Bootstrapping【张馆长】二进制部署Kubernetes v1.11.x(1.12.x) HA可选软件版本kubernetes v1.11.5 【下载链接需要爬墙，自行解决】docker-ce 18.03cni-plugin v0.7.4etcd v3.3.10网络信息基于CNI的模式实现容器网络Cluster IP CIDR: 10.244.0.0/16Service Cluster IP CIDR: 10.96.0.0/12Service DNS IP: 10.96.0.10Kubernetes API VIP: 172.16.80.200节点信息操作系统可采用 Ubuntu Server 16.04+ 和 CentOS 7.4+，本文使用CentOS 7.6 (1810) Minimal由keepalived提供VIP由haproxy提供kube-apiserver四层负载均衡由于实验环境受限，以3台服务器同时作为master和worker节点运行服务器配置请根据实际情况适当调整IP地址主机名角色CPU内存172.16.80.201k8s-m1master+worker48G172.16.80.202k8s-m2master+worker48G172.16.80.203k8s-m3master+worker48G目录说明/usr/local/bin/：存放kubernetes和etcd二进制文件/opt/cni/bin/： 存放cni-plugin二进制文件/etc/etcd/：存放etcd配置文件和SSL证书/etc/kubernetes/：存放kubernetes配置和SSL证书/etc/cni/net.d/：安装CNI插件后会在这里生成配置文件$HOME/.kube/：kubectl命令会在家目录下建立此目录，用于保存访问kubernetes集群的配置和缓存$HOME/.helm/：helm命令会建立此目录，用于保存helm缓存和repository信息事前准备事情准备在所有服务器上都需要完成部署过程以root用户完成所有服务器网络互通，k8s-m1可以通过SSH证书免密登录到其他master节点，用于分发文件编辑/etc/hosts1234567cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1 localhost172.16.80.200 k8s-vip172.16.80.201 k8s-m1172.16.80.202 k8s-m2172.16.80.203 k8s-m3EOF时间同步服务集群系统需要各节点时间同步参考链接：RHEL7官方文档这里使用公网对时，如果需要内网对时，请自行配置123yum install -y chronysystemctl enable chronydsystemctl start chronyd关闭firewalld和SELINUX（可根据实际情况自行决定关闭不需要的服务）1234567891011121314151617systemctl stop firewalldsystemctl disable firewalldsystemctl mask firewalld# 清空iptables规则iptables -t filter -Fiptables -t filter -Xiptables -t nat -Fiptables -t nat -Xiptables -t mangle -Fiptables -t mangle -Xiptables -t raw -Fiptables -t raw -Xiptables -t security -Fiptables -t security -Xiptables -P INPUT ACCEPTiptables -P FORWARD ACCEPTiptables -P OUTPUT ACCEPT12setenforce 0sed -ri '/^[^#]*SELINUX=/s#=.+$#=disabled#' /etc/selinux/config禁用swap12swapoff -a &amp;&amp; sysctl -w vm.swappiness=0sed -ri '/^[^#]*swap/s@^@#@' /etc/fstab添加sysctl参数12345678910111213141516171819202122232425262728293031323334cat &gt; /etc/sysctl.d/centos.conf &lt;&lt;EOF # 最大文件句柄数fs.file-max=1024000# 最大文件打开数fs.nr_open=1024000# 端口最大的监听队列的长度net.core.somaxconn=4096# 在CentOS7.4引入了一个新的参数来控制内核的行为。 # /proc/sys/fs/may_detach_mounts 默认设置为0# 当系统有容器运行的时候，需要将该值设置为1。fs.may_detach_mounts = 1# 最大文件打开数fs.nr_open=1024000# 二层的网桥在转发包时也会被iptables的FORWARD规则所过滤net.bridge.bridge-nf-call-arptables=1net.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1# 关闭严格校验数据包的反向路径net.ipv4.conf.default.rp_filter=0net.ipv4.conf.all.rp_filter=0# 打开ipv4数据包转发net.ipv4.ip_forward=1# 允许应用程序能够绑定到不属于本地网卡的地址net.ipv4.ip_nonlocal_bind=1 # 表示最大限度使用物理内存，然后才是swap空间vm.swappiness = 0 # 设置系统TCP连接keepalive的持续时间，默认7200net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_intvl = 30net.ipv4.tcp_keepalive_probes = 10EOF# 让sysctl参数生效sysctl --system确保操作系统已经最新1yum update -y安装软件包123yum groups install base -yyum install epel-release bash-completion-extras -yyum install git vim ipvsadm tree dstat iotop htop socat ipset conntrack -y加载ipvs模块12345678910111213# 开机自动加载ipvs模块cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF#!/bin/bashipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"for kernel_module in \\$&#123;ipvs_modules&#125;; do /sbin/modinfo -F filename \\$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1 if [ $? -eq 0 ]; then /sbin/modprobe \\$&#123;kernel_module&#125; fidoneEOFchmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs安装docker-ce 18.09.212345yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine -yyum install -y yum-utils device-mapper-persistent-data lvm2 -yyum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.reposed -e 's,download.docker.com,mirrors.aliyun.com/docker-ce,g' -i /etc/yum.repos.d/docker-ce.repoyum install docker-ce-18.09.2 -y创建docker配置文件12345678910111213mkdir -p /etc/dockercat&gt;/etc/docker/daemon.json&lt;&lt;EOF&#123; \"registry-mirrors\": [\"https://registry.docker-cn.com\"], \"insecure-registries\": [], \"log-driver\": \"json-file\", \"log-opts\": &#123; \"max-size\": \"100m\", \"max-file\": \"3\" &#125;, \"max-concurrent-downloads\": 10&#125;EOF配置docker命令补全12cp /usr/share/bash-completion/completions/docker /etc/bash_completion.d/source /etc/bash_completion.d/docker配置docker服务开机自启动12systemctl enable docker.servicesystemctl start docker.service查看docker信息1docker info禁用docker源12# 为避免yum update时更新docker，将docker源禁用sed -e 's,enabled=1,enabled=0,g' -i /etc/yum.repos.d/docker-ce.repo确保以最新的内核启动系统1reboot定义集群变量注意这里的变量只对当前会话生效，如果会话断开或者重启服务器，都需要重新定义变量HostArray定义集群中所有节点的主机名和IPMasterArray定义master节点的主机名和IPWorkerArray定义worker节点的主机名和IP，这里master和worker都在一起，所以MasterArray和WorkerArray一样VIP_IFACE定义keepalived的VIP绑定在哪一个网卡ETCD_SERVERS以MasterArray的信息生成etcd集群服务器列表ETCD_INITIAL_CLUSTER以MasterArray信息生成etcd集群初始化列表POD_DNS_SERVER_IP定义Pod的DNS服务器IP地址12345678910111213141516171819202122232425262728293031323334declare -A HostArray MasterArray WorkerArray# 声明所有节点的信息HostArray=(['k8s-m1']=172.16.80.201 ['k8s-m2']=172.16.80.202 ['k8s-m3']=172.16.80.203)# 如果节点多，可以按照下面的方式声明Array# HostArray=(['k8s-m1']=172.16.80.201 ['k8s-m2']=172.16.80.202 ['k8s-m3']=172.16.80.203 ['k8s-n1']=172.16.80.204 ['k8s-n2']=172.16.80.205)# 声明master节点信息MasterArray=(['k8s-m1']=172.16.80.201 ['k8s-m2']=172.16.80.202 ['k8s-m3']=172.16.80.203)# 声明worker节点信息WorkerArray=(['k8s-m1']=172.16.80.201 ['k8s-m2']=172.16.80.202 ['k8s-m3']=172.16.80.203)# VIP=\"172.16.80.200\"KUBE_APISERVER=\"https://172.16.80.200:8443\"# etcd版本号# kubeadm-v1.11.5里面使用的是v3.2.18，这里直接上到最新的v3.3.10ETCD_VERSION=\"v3.3.10\"# kubernetes版本号KUBERNETES_VERSION=\"v1.11.5\"# cni-plugin版本号# kubernetes YUM源里用的还是v0.6.0版，这里上到最新的v0.7.4CNI_PLUGIN_VERSION=\"v0.7.4\"# 声明VIP所在的网卡名称，以ens33为例VIP_IFACE=\"ens33\"# 声明etcd_serverETCD_SERVERS=$( xargs -n1&lt;&lt;&lt;$&#123;MasterArray[@]&#125; | sort | sed 's#^#https://#;s#$#:2379#;$s#\\n##' | paste -d, -s - )ETCD_INITIAL_CLUSTER=$( for i in $&#123;!MasterArray[@]&#125;;do echo $i=https://$&#123;MasterArray[$i]&#125;:2380; done | sort | paste -d, -s - )# 定义POD_CLUSTER_CIDRPOD_NET_CIDR=\"10.244.0.0/16\"# 定义SVC_CLUSTER_CIDRSVC_CLUSTER_CIDR=\"10.96.0.0/12\"# 定义POD_DNS_SERVER_IPPOD_DNS_SERVER_IP=\"10.96.0.10\"下载所需软件包创建工作目录12mkdir -p /root/softwarecd /root/software二进制文件需要分发到master和worker节点1234567891011121314151617181920212223242526272829303132333435# 下载kubernetes二进制包echo \"--- 下载kubernetes $&#123;KUBERNETES_VERSION&#125; 二进制包 ---\"wget https://dl.k8s.io/$&#123;KUBERNETES_VERSION&#125;/kubernetes-server-linux-amd64.tar.gztar xzf kubernetes-server-linux-amd64.tar.gz \\ kubernetes/server/bin/hyperkube \\ kubernetes/server/bin/kube-controller-manager \\ kubernetes/server/bin/kubectl \\ kubernetes/server/bin/apiextensions-apiserver \\ kubernetes/server/bin/kube-proxy \\ kubernetes/server/bin/kube-apiserver \\ kubernetes/server/bin/kubelet \\ kubernetes/server/bin/kubeadm \\ kubernetes/server/bin/kube-aggregator \\ kubernetes/server/bin/kube-scheduler \\ kubernetes/server/bin/cloud-controller-manager \\ kubernetes/server/bin/mounterchown -R root:root kubernetes/server/bin/*chmod 0755 kubernetes/server/bin/*# 这里需要先拷贝kubectl到/usr/local/bin目录下，用于生成kubeconfig文件rsync -avpt kubernetes/server/bin/kubectl /usr/local/bin/kubectl# 下载etcd二进制包echo \"--- 下载etcd $&#123;ETCD_VERSION&#125; 二进制包 ---\"wget https://github.com/etcd-io/etcd/releases/download/$&#123;ETCD_VERSION&#125;/etcd-$&#123;ETCD_VERSION&#125;-linux-amd64.tar.gztar xzf etcd-$&#123;ETCD_VERSION&#125;-linux-amd64.tar.gz \\ etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcdctl \\ etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcdchown root:root etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcdctl etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcdchmod 0755 etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcdctl etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcd# 下载CNI-pluginecho \"--- 下载cni-plugins $&#123;CNI_PLUGIN_VERSION&#125; 二进制包 ---\"wget https://github.com/containernetworking/plugins/releases/download/$&#123;CNI_PLUGIN_VERSION&#125;/cni-plugins-amd64-$&#123;CNI_PLUGIN_VERSION&#125;.tgzmkdir /root/software/cni-pluginstar xzf cni-plugins-amd64-$&#123;CNI_PLUGIN_VERSION&#125;.tgz -C /root/software/cni-plugins/生成集群Key和Certificates说明本次部署，需要为etcd-server、etcd-client、kube-apiserver、kube-controller-manager、kube-scheduler、kube-proxy生成证书。另外还需要生成sa、front-proxy-ca、front-proxy-client证书用于集群的其他功能。要注意CA JSON文件的CN(Common Name)与O(Organization)等内容是会影响Kubernetes组件认证的。CN Common Name，kube-apiserver会从证书中提取该字段作为请求的用户名（User Name）O Oragnization，kube-apiserver会从证书中提取该字段作为请求用户的所属组（Group）CA是自签名根证书，用来给后续各种证书签名kubernetes集群的所有状态信息都保存在etcd中，kubernetes组件会通过kube-apiserver读写etcd里面的信息etcd如果暴露在公网且没做SSL/TLS验证，那么任何人都能读写数据，那么很可能会无端端在kubernetes集群里面多了挖坑Pod或者肉鸡Pod本文使用CFSSL创建证书，证书有效期10年建立证书过程在k8s-m1上完成下载CFSSL工具123456wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/bin/cfssl-certinfowget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/bin/cfsslwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/bin/cfssljsonchmod 755 /usr/local/bin/cfssl-certinfo \\ /usr/local/bin/cfssl \\ /usr/local/bin/cfssljson创建工作目录12mkdir -p /root/pki /root/master /root/workercd /root/pki创建用于生成证书的json文件ca-config.json12345678910111213141516171819202122232425262728293031323334353637cat &gt; ca-config.json &lt;&lt;EOF&#123; \"signing\": &#123; \"default\": &#123; \"expiry\": \"87600h\" &#125;, \"profiles\": &#123; \"kubernetes\": &#123; \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ], \"expiry\": \"87600h\" &#125;, \"etcd-server\": &#123; \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ], \"expiry\": \"87600h\" &#125;, \"etcd-client\": &#123; \"usages\": [ \"signing\", \"key encipherment\", \"client auth\" ], \"expiry\": \"87600h\" &#125; &#125; &#125;&#125;EOFca-csr.json123456789101112131415161718cat &gt; ca-csr.json &lt;&lt;EOF&#123; \"CN\": \"kubernetes\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"Kubernetes\", \"OU\": \"System\" &#125; ]&#125;EOFetcd-ca-csr.json123456789101112131415161718cat &gt; etcd-ca-csr.json &lt;&lt;EOF&#123; \"CN\": \"etcd\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"etcd\", \"OU\": \"Etcd Security\" &#125; ]&#125;EOFetcd-server-csr.json123456789101112131415161718cat &gt; etcd-server-csr.json &lt;&lt;EOF&#123; \"CN\": \"etcd-server\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"etcd\", \"OU\": \"Etcd Security\" &#125; ]&#125;EOFetcd-client-csr.json123456789101112131415161718192021cat &gt; etcd-client-csr.json &lt;&lt;EOF&#123; \"CN\": \"etcd-client\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"hosts\": [ \"\" ], \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"etcd\", \"OU\": \"Etcd Security\" &#125; ]&#125;EOFkube-apiserver-csr.json123456789101112131415161718cat &gt; kube-apiserver-csr.json &lt;&lt;EOF&#123; \"CN\": \"kube-apiserver\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"Kubernetes\", \"OU\": \"System\" &#125; ]&#125;EOFkube-manager-csr.json123456789101112131415161718cat &gt; kube-manager-csr.json &lt;&lt;EOF&#123; \"CN\": \"system:kube-controller-manager\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"system:kube-controller-manager\", \"OU\": \"System\" &#125; ]&#125;EOFkube-scheduler-csr.json123456789101112131415161718cat &gt; kube-scheduler-csr.json &lt;&lt;EOF&#123; \"CN\": \"system:kube-scheduler\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"system:kube-scheduler\", \"OU\": \"System\" &#125; ]&#125;EOFkube-proxy-csr.json123456789101112131415161718cat &gt; kube-proxy-csr.json &lt;&lt;EOF&#123; \"CN\": \"system:kube-proxy\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"system:kube-proxy\", \"OU\": \"System\" &#125; ]&#125;EOFkube-admin-csr.json123456789101112131415161718cat &gt; kube-admin-csr.json &lt;&lt;EOF&#123; \"CN\": \"admin\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"system:masters\", \"OU\": \"System\" &#125; ]&#125;EOFfront-proxy-ca-csr.json123456789cat &gt; front-proxy-ca-csr.json &lt;&lt;EOF&#123; \"CN\": \"kubernetes\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;&#125;EOFfront-proxy-client-csr.json123456789cat &gt; front-proxy-client-csr.json &lt;&lt;EOF&#123; \"CN\": \"front-proxy-client\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;&#125;EOFsa-csr.json123456789101112131415161718cat &gt; sa-csr.json &lt;&lt;EOF&#123; \"CN\": \"service-accounts\", \"key\": &#123; \"algo\": \"rsa\", \"size\": 2048 &#125;, \"names\": [ &#123; \"C\": \"CN\", \"ST\": \"Guangdong\", \"L\": \"Guangzhou\", \"O\": \"Kubernetes\", \"OU\": \"System\" &#125; ]&#125;EOF创建etcd证书etcd-ca证书12echo '--- 创建etcd-ca证书 ---'cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-caetcd-server证书1234567echo '--- 创建etcd-server证书 ---'cfssl gencert \\ -ca=etcd-ca.pem \\ -ca-key=etcd-ca-key.pem \\ -config=ca-config.json \\ -hostname=127.0.0.1,$(xargs -n1&lt;&lt;&lt;$&#123;MasterArray[@]&#125; | sort | paste -d, -s -) \\ -profile=etcd-server etcd-server-csr.json | cfssljson -bare etcd-serveretcd-client证书123456echo '--- 创建etcd-client证书 ---'cfssl gencert \\ -ca=etcd-ca.pem \\ -ca-key=etcd-ca-key.pem \\ -config=ca-config.json \\ -profile=etcd-client etcd-client-csr.json | cfssljson -bare etcd-client创建kubernetes证书kubernetes-CA 证书123echo '--- 创建kubernetes-ca证书 ---'# 创建kubernetes-ca证书cfssl gencert -initca ca-csr.json | cfssljson -bare kube-cakube-apiserver证书12345678910echo '--- 创建kube-apiserver证书 ---'# 创建kube-apiserver证书# 这里的hostname字段中的10.96.0.1要跟上文提到的service cluster ip cidr对应cfssl gencert \\ -ca=kube-ca.pem \\ -ca-key=kube-ca-key.pem \\ -config=ca-config.json \\ -hostname=10.96.0.1,127.0.0.1,localhost,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,$&#123;VIP&#125;,$(xargs -n1&lt;&lt;&lt;$&#123;MasterArray[@]&#125; | sort | paste -d, -s -) \\ -profile=kubernetes \\ kube-apiserver-csr.json | cfssljson -bare kube-apiserverkube-controller-manager证书12345678echo '--- 创建kube-controller-manager证书 ---'# 创建kube-controller-manager证书cfssl gencert \\ -ca=kube-ca.pem \\ -ca-key=kube-ca-key.pem \\ -config=ca-config.json \\ -profile=kubernetes \\ kube-manager-csr.json | cfssljson -bare kube-controller-managerkube-scheduler证书12345678echo '--- 创建kube-scheduler证书 ---'# 创建kube-scheduler证书cfssl gencert \\ -ca=kube-ca.pem \\ -ca-key=kube-ca-key.pem \\ -config=ca-config.json \\ -profile=kubernetes \\ kube-scheduler-csr.json | cfssljson -bare kube-schedulerkube-proxy证书12345678echo '--- 创建kube-proxy证书 ---'# 创建kube-proxy证书cfssl gencert \\ -ca=kube-ca.pem \\ -ca-key=kube-ca-key.pem \\ -config=ca-config.json \\ -profile=kubernetes \\ kube-proxy-csr.json | cfssljson -bare kube-proxykube-admin证书12345678echo '--- 创建kube-admin证书 ---'# 创建kube-admin证书cfssl gencert \\ -ca=kube-ca.pem \\ -ca-key=kube-ca-key.pem \\ -config=ca-config.json \\ -profile=kubernetes \\ kube-admin-csr.json | cfssljson -bare kube-adminFront Proxy证书123456789echo '--- 创建Front Proxy Certificate证书 ---'# 创建Front Proxy Certificate证书cfssl gencert -initca front-proxy-ca-csr.json | cfssljson -bare front-proxy-cacfssl gencert \\ -ca=front-proxy-ca.pem \\ -ca-key=front-proxy-ca-key.pem \\ -config=ca-config.json \\ -profile=kubernetes \\ front-proxy-client-csr.json | cfssljson -bare front-proxy-clientService Account证书12345678echo '--- 创建service account证书 ---'# 创建创建service account证书cfssl gencert \\ -ca=kube-ca.pem \\ -ca-key=kube-ca-key.pem \\ -config=ca-config.json \\ -profile=kubernetes \\ sa-csr.json | cfssljson -bare sabootstrap-token1234567BOOTSTRAP_TOKEN=$(dd if=/dev/urandom bs=128 count=1 2&gt;/dev/null | base64 | tr -d \"=+/[:space:]\" | dd bs=32 count=1 2&gt;/dev/null)echo \"BOOTSTRAP_TOKEN: $&#123;BOOTSTRAP_TOKEN&#125;\"# 创建token.csv文件cat &gt; token.csv &lt;&lt;EOF$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,\"system:bootstrappers\"EOFencryption.yaml1234567891011121314151617ENCRYPTION_TOKEN=$(head -c 32 /dev/urandom | base64)echo \"ENCRYPTION_TOKEN: $&#123;ENCRYPTION_TOKEN&#125;\"# 创建encryption.yaml文件cat &gt; encryption.yaml &lt;&lt;EOFkind: EncryptionConfigapiVersion: v1resources: - resources: - secrets providers: - aescbc: keys: - name: key1 secret: $&#123;ENCRYPTION_TOKEN&#125; - identity: &#123;&#125;EOFaudit-policy.yaml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166echo '--- 创建创建高级审计配置 ---'# 创建高级审计配置cat &gt;&gt; audit-policy.yaml &lt;&lt;EOFapiVersion: audit.k8s.io/v1beta1kind: Policyrules: # The following requests were manually identified as high-volume and low-risk, # so drop them. - level: None users: [\"system:kube-proxy\"] verbs: [\"watch\"] resources: - group: \"\" # core resources: [\"endpoints\", \"services\", \"services/status\"] - level: None # Ingress controller reads 'configmaps/ingress-uid' through the unsecured port. # TODO(#46983): Change this to the ingress controller service account. users: [\"system:unsecured\"] namespaces: [\"kube-system\"] verbs: [\"get\"] resources: - group: \"\" # core resources: [\"configmaps\"] - level: None users: [\"kubelet\"] # legacy kubelet identity verbs: [\"get\"] resources: - group: \"\" # core resources: [\"nodes\", \"nodes/status\"] - level: None userGroups: [\"system:nodes\"] verbs: [\"get\"] resources: - group: \"\" # core resources: [\"nodes\", \"nodes/status\"] - level: None users: - system:kube-controller-manager - system:kube-scheduler - system:serviceaccount:kube-system:endpoint-controller verbs: [\"get\", \"update\"] namespaces: [\"kube-system\"] resources: - group: \"\" # core resources: [\"endpoints\"] - level: None users: [\"system:apiserver\"] verbs: [\"get\"] resources: - group: \"\" # core resources: [\"namespaces\", \"namespaces/status\", \"namespaces/finalize\"] - level: None users: [\"cluster-autoscaler\"] verbs: [\"get\", \"update\"] namespaces: [\"kube-system\"] resources: - group: \"\" # core resources: [\"configmaps\", \"endpoints\"] # Don't log HPA fetching metrics. - level: None users: - system:kube-controller-manager verbs: [\"get\", \"list\"] resources: - group: \"metrics.k8s.io\" # Don't log these read-only URLs. - level: None nonResourceURLs: - /healthz* - /version - /swagger* # Don't log events requests. - level: None resources: - group: \"\" # core resources: [\"events\"] # node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes - level: Request users: [\"kubelet\", \"system:node-problem-detector\", \"system:serviceaccount:kube-system:node-problem-detector\"] verbs: [\"update\",\"patch\"] resources: - group: \"\" # core resources: [\"nodes/status\", \"pods/status\"] omitStages: - \"RequestReceived\" - level: Request userGroups: [\"system:nodes\"] verbs: [\"update\",\"patch\"] resources: - group: \"\" # core resources: [\"nodes/status\", \"pods/status\"] omitStages: - \"RequestReceived\" # deletecollection calls can be large, don't log responses for expected namespace deletions - level: Request users: [\"system:serviceaccount:kube-system:namespace-controller\"] verbs: [\"deletecollection\"] omitStages: - \"RequestReceived\" # Secrets, ConfigMaps, and TokenReviews can contain sensitive &amp; binary data, # so only log at the Metadata level. - level: Metadata resources: - group: \"\" # core resources: [\"secrets\", \"configmaps\"] - group: authentication.k8s.io resources: [\"tokenreviews\"] omitStages: - \"RequestReceived\" # Get repsonses can be large; skip them. - level: Request verbs: [\"get\", \"list\", \"watch\"] resources: - group: \"\" # core - group: \"admissionregistration.k8s.io\" - group: \"apiextensions.k8s.io\" - group: \"apiregistration.k8s.io\" - group: \"apps\" - group: \"authentication.k8s.io\" - group: \"authorization.k8s.io\" - group: \"autoscaling\" - group: \"batch\" - group: \"certificates.k8s.io\" - group: \"extensions\" - group: \"metrics.k8s.io\" - group: \"networking.k8s.io\" - group: \"policy\" - group: \"rbac.authorization.k8s.io\" - group: \"scheduling.k8s.io\" - group: \"settings.k8s.io\" - group: \"storage.k8s.io\" omitStages: - \"RequestReceived\" # Default level for known APIs - level: RequestResponse resources: - group: \"\" # core - group: \"admissionregistration.k8s.io\" - group: \"apiextensions.k8s.io\" - group: \"apiregistration.k8s.io\" - group: \"apps\" - group: \"authentication.k8s.io\" - group: \"authorization.k8s.io\" - group: \"autoscaling\" - group: \"batch\" - group: \"certificates.k8s.io\" - group: \"extensions\" - group: \"metrics.k8s.io\" - group: \"networking.k8s.io\" - group: \"policy\" - group: \"rbac.authorization.k8s.io\" - group: \"scheduling.k8s.io\" - group: \"settings.k8s.io\" - group: \"storage.k8s.io\" omitStages: - \"RequestReceived\" # Default level for all other requests. - level: Metadata omitStages: - \"RequestReceived\"EOF创建kubeconfig文件说明kubeconfig 文件用于组织关于集群、用户、命名空间和认证机制的信息。命令行工具 kubectl 从 kubeconfig 文件中得到它要选择的集群以及跟集群 API server 交互的信息。默认情况下，kubectl 会从 $HOME/.kube 目录下查找文件名为 config 的文件。注意： 用于配置集群访问信息的文件叫作 kubeconfig文件，这是一种引用配置文件的通用方式，并不是说它的文件名就是 kubeconfig。kube-controller-manager.kubeconfig1234567891011121314151617181920echo \"Create kube-controller-manager kubeconfig...\"# 设置集群参数kubectl config set-cluster kubernetes \\ --certificate-authority=kube-ca.pem \\ --embed-certs=true \\ --server=$&#123;KUBE_APISERVER&#125; \\ --kubeconfig=kube-controller-manager.kubeconfig# 设置客户端认证参数kubectl config set-credentials system:kube-controller-manager \\ --client-certificate=kube-controller-manager.pem \\ --client-key=kube-controller-manager-key.pem \\ --embed-certs=true \\ --kubeconfig=kube-controller-manager.kubeconfig# 设置上下文参数kubectl config set-context default \\ --cluster=kubernetes \\ --user=system:kube-controller-manager \\ --kubeconfig=kube-controller-manager.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfigkube-scheduler.kubeconfig1234567891011121314151617181920echo \"Create kube-scheduler kubeconfig...\"# 设置集群参数kubectl config set-cluster kubernetes \\ --certificate-authority=kube-ca.pem \\ --embed-certs=true \\ --server=$&#123;KUBE_APISERVER&#125; \\ --kubeconfig=kube-scheduler.kubeconfig# 设置客户端认证参数kubectl config set-credentials system:kube-scheduler \\ --client-certificate=kube-scheduler.pem \\ --client-key=kube-scheduler-key.pem \\ --embed-certs=true \\ --kubeconfig=kube-scheduler.kubeconfig# 设置上下文参数kubectl config set-context default \\ --cluster=kubernetes \\ --user=system:kube-scheduler \\ --kubeconfig=kube-scheduler.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfigkube-proxy.kubeconfig1234567891011121314151617181920echo \"Create kube-proxy kubeconfig...\"# 设置集群参数kubectl config set-cluster kubernetes \\ --certificate-authority=kube-ca.pem \\ --embed-certs=true \\ --server=$&#123;KUBE_APISERVER&#125; \\ --kubeconfig=kube-proxy.kubeconfig# 设置客户端认证参数kubectl config set-credentials system:kube-proxy \\ --client-certificate=kube-proxy.pem \\ --client-key=kube-proxy-key.pem \\ --embed-certs=true \\ --kubeconfig=kube-proxy.kubeconfig# 设置上下文参数kubectl config set-context default \\ --cluster=kubernetes \\ --user=system:kube-proxy \\ --kubeconfig=kube-proxy.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=kube-proxy.kubeconfigkube-admin.kubeconfig1234567891011121314151617181920echo \"Create kube-admin kubeconfig...\"# 设置集群参数kubectl config set-cluster kubernetes \\ --certificate-authority=kube-ca.pem \\ --embed-certs=true \\ --server=$&#123;KUBE_APISERVER&#125; \\ --kubeconfig=kube-admin.kubeconfig# 设置客户端认证参数kubectl config set-credentials kubernetes-admin \\ --client-certificate=kube-admin.pem \\ --client-key=kube-admin-key.pem \\ --embed-certs=true \\ --kubeconfig=kube-admin.kubeconfig# 设置上下文参数kubectl config set-context default \\ --cluster=kubernetes \\ --user=kubernetes-admin \\ --kubeconfig=kube-admin.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=kube-admin.kubeconfigbootstrap.kubeconfig123456789101112131415161718echo \"Create kubelet bootstrapping kubeconfig...\"# 设置集群参数kubectl config set-cluster kubernetes \\ --certificate-authority=kube-ca.pem \\ --embed-certs=true \\ --server=$&#123;KUBE_APISERVER&#125; \\ --kubeconfig=bootstrap.kubeconfig# 设置客户端认证参数kubectl config set-credentials kubelet-bootstrap \\ --token=$&#123;BOOTSTRAP_TOKEN&#125; \\ --kubeconfig=bootstrap.kubeconfig# 设置上下文参数kubectl config set-context default \\ --cluster=kubernetes \\ --user=kubelet-bootstrap \\ --kubeconfig=bootstrap.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=bootstrap.kubeconfig清理证书CSR文件12echo '--- 删除*.csr文件 ---'rm -rf *csr修改文件权限123chown root:root *pem *kubeconfig *yaml *csvchmod 0444 *pem *kubeconfig *yaml *csvchmod 0400 *key.pem检查生成的文件123456789101112131415161718192021222324252627282930313233ls -l | grep -v json-r--r--r-- 1 root root 113 Dec 6 15:36 audit-policy.yaml-r--r--r-- 1 root root 2207 Dec 6 15:36 bootstrap.kubeconfig-r--r--r-- 1 root root 240 Dec 6 15:36 encryption.yaml-r-------- 1 root root 1675 Dec 6 15:36 etcd-ca-key.pem-r--r--r-- 1 root root 1375 Dec 6 15:36 etcd-ca.pem-r-------- 1 root root 1679 Dec 6 15:36 etcd-client-key.pem-r--r--r-- 1 root root 1424 Dec 6 15:36 etcd-client.pem-r-------- 1 root root 1679 Dec 6 15:36 etcd-server-key.pem-r--r--r-- 1 root root 1468 Dec 6 15:36 etcd-server.pem-r-------- 1 root root 1679 Dec 6 15:36 front-proxy-ca-key.pem-r--r--r-- 1 root root 1143 Dec 6 15:36 front-proxy-ca.pem-r-------- 1 root root 1675 Dec 6 15:36 front-proxy-client-key.pem-r--r--r-- 1 root root 1188 Dec 6 15:36 front-proxy-client.pem-r-------- 1 root root 1679 Dec 6 15:36 kube-admin-key.pem-r--r--r-- 1 root root 6345 Dec 6 15:36 kube-admin.kubeconfig-r--r--r-- 1 root root 1419 Dec 6 15:36 kube-admin.pem-r-------- 1 root root 1675 Dec 6 15:36 kube-apiserver-key.pem-r--r--r-- 1 root root 1688 Dec 6 15:36 kube-apiserver.pem-r-------- 1 root root 1679 Dec 6 15:36 kube-ca-key.pem-r--r--r-- 1 root root 1387 Dec 6 15:36 kube-ca.pem-r-------- 1 root root 1679 Dec 6 15:36 kube-controller-manager-key.pem-r--r--r-- 1 root root 6449 Dec 6 15:36 kube-controller-manager.kubeconfig-r--r--r-- 1 root root 1476 Dec 6 15:36 kube-controller-manager.pem-r-------- 1 root root 1675 Dec 6 15:36 kube-proxy-key.pem-r--r--r-- 1 root root 6371 Dec 6 15:36 kube-proxy.kubeconfig-r--r--r-- 1 root root 1440 Dec 6 15:36 kube-proxy.pem-r-------- 1 root root 1675 Dec 6 15:36 kube-scheduler-key.pem-r--r--r-- 1 root root 6395 Dec 6 15:36 kube-scheduler.kubeconfig-r--r--r-- 1 root root 1452 Dec 6 15:36 kube-scheduler.pem-r-------- 1 root root 1675 Dec 6 15:36 sa-key.pem-r--r--r-- 1 root root 1432 Dec 6 15:36 sa.pem-r--r--r-- 1 root root 80 Dec 6 15:36 token.csvkubernetes-master节点本节介绍如何部署kubernetes master节点master节点说明原则上，master节点不应该运行业务Pod，且不应该暴露到公网环境！！边界节点，应该交由worker节点或者运行Ingress的节点来承担以kubeadm部署为例，部署完成后，会给master节点添加node-role.kubernetes.io/master=&#39;&#39;标签（Labels）并且会对带有此标签的节点添加node-role.kubernetes.io/master:NoSchedule污点（taints），这样不能容忍此污点的Pod无法调度到master节点本文中，在kubelet启动参数里，默认添加node-role.kubernetes.io/node=&#39;&#39;标签（Labels），且没有对master节点添加node-role.kubernetes.io/master:NoSchedule污点（taints）生产环境中最好参照kubeadm，对master节点添加node-role.kubernetes.io/master=&#39;&#39;标签（Labels）和node-role.kubernetes.io/master:NoSchedule污点（taints）kube-apiserver以 REST APIs 提供 Kubernetes 资源的 CRUD,如授权、认证、存取控制与 API 注册等机制。关闭默认非安全端口8080,在安全端口 6443 接收 https 请求严格的认证和授权策略 (x509、token、RBAC)开启 bootstrap token 认证，支持 kubelet TLS bootstrapping使用 https 访问 kubelet、etcd，加密通信kube-controller-manager通过核心控制循环(Core Control Loop)监听 Kubernetes API的资源来维护集群的状态，这些资源会被不同的控制器所管理，如 Replication Controller、NamespaceController 等等。而这些控制器会处理着自动扩展、滚动更新等等功能。关闭非安全端口，在安全端口 10252 接收 https 请求使用 kubeconfig 访问 kube-apiserver 的安全端口kube-scheduler负责将一个(或多个)容器依据调度策略分配到对应节点上让容器引擎(如 Docker)执行。调度受到 QoS 要求、软硬性约束、亲和性(Affinity)等等因素影响。HAProxy提供多个 API Server 的负载均衡(Load Balance)监听VIP的8443端口负载均衡到三台master节点的6443端口Keepalived提供虚拟IP位址(VIP),来让vip落在可用的master主机上供所有组件访问master节点提供健康检查脚本用于切换VIP添加用户这里强迫症发作，指定了UID和GID不指定UID和GID也可以12345678echo '--- master节点添加用户 ---'for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE ---\" ssh $&#123;NODE&#125; /usr/sbin/groupadd -r -g 10000 kube ssh $&#123;NODE&#125; /usr/sbin/groupadd -r -g 10001 etcd ssh $&#123;NODE&#125; /usr/sbin/useradd -r -g kube -u 10000 -s /bin/false kube ssh $&#123;NODE&#125; /usr/sbin/useradd -r -g etcd -u 10001 -s /bin/false etcddone创建目录12345678910111213141516171819202122232425262728293031echo '--- master节点创建目录 ---'for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE ---\" echo \"--- 创建目录 ---\" ssh $&#123;NODE&#125; /usr/bin/mkdir -p /etc/etcd/ssl \\ /etc/kubernetes/pki \\ /etc/kubernetes/manifests \\ /var/lib/etcd \\ /var/lib/kubelet \\ /var/run/kubernetes \\ /var/log/kube-audit \\ /etc/cni/net.d \\ /opt/cni/bin echo \"--- 修改目录权限 ---\" ssh $&#123;NODE&#125; /usr/bin/chmod 0755 /etc/etcd \\ /etc/etcd/ssl \\ /etc/kubernetes \\ /etc/kubernetes/pki \\ /var/lib/etcd \\ /var/lib/kubelet \\ /var/log/kube-audit \\ /var/run/kubernetes \\ /etc/cni/net.d \\ /opt/cni/bin echo \"--- 修改目录属组 ---\" ssh $&#123;NODE&#125; chown -R etcd:etcd /etc/etcd/ /var/lib/etcd ssh $&#123;NODE&#125; chown -R kube:kube /etc/kubernetes \\ /var/lib/kubelet \\ /var/log/kube-audit \\ /var/run/kubernetesdone分发证书文件和kubeconfig到master节点1234567891011121314151617181920212223242526272829303132333435for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"---- $NODE ----\" echo '---- 分发etcd证书 ----' rsync -avpt /root/pki/etcd-ca-key.pem \\ /root/pki/etcd-ca.pem \\ /root/pki/etcd-client-key.pem \\ /root/pki/etcd-client.pem \\ /root/pki/etcd-server-key.pem \\ /root/pki/etcd-server.pem \\ $NODE:/etc/etcd/ssl/ echo '---- 分发kubeconfig文件 yaml文件 token.csv ----' rsync -avpt /root/pki/kube-admin.kubeconfig \\ /root/pki/kube-controller-manager.kubeconfig \\ /root/pki/kube-scheduler.kubeconfig \\ /root/pki/audit-policy.yaml \\ /root/pki/encryption.yaml \\ /root/pki/token.csv \\ $NODE:/etc/kubernetes/ echo '---- 分发sa证书 kube证书 front-proxy证书 ----' rsync -avpt /root/pki/etcd-ca.pem \\ /root/pki/etcd-client-key.pem \\ /root/pki/etcd-client.pem \\ /root/pki/front-proxy-ca.pem \\ /root/pki/front-proxy-client-key.pem \\ /root/pki/front-proxy-client.pem \\ /root/pki/kube-apiserver-key.pem \\ /root/pki/kube-apiserver.pem \\ /root/pki/kube-ca.pem \\ /root/pki/kube-ca-key.pem \\ /root/pki/sa-key.pem \\ /root/pki/sa.pem \\ $NODE:/etc/kubernetes/pki/ ssh $NODE chown -R etcd:etcd /etc/etcd ssh $NODE chown -R kube:kube /etc/kubernetesdone分发二进制文件在k8s-m1上操作1234567891011121314151617echo '--- 分发kubernetes和etcd二进制文件 ---'for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE ---\" rsync -avpt /root/software/kubernetes/server/bin/hyperkube \\ /root/software/kubernetes/server/bin/kube-controller-manager \\ /root/software/kubernetes/server/bin/kubectl \\ /root/software/kubernetes/server/bin/apiextensions-apiserver \\ /root/software/kubernetes/server/bin/kube-apiserver \\ /root/software/kubernetes/server/bin/kubeadm \\ /root/software/kubernetes/server/bin/kube-aggregator \\ /root/software/kubernetes/server/bin/kube-scheduler \\ /root/software/kubernetes/server/bin/cloud-controller-manager \\ /root/software/kubernetes/server/bin/mounter \\ /root/software/etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcdctl \\ /root/software/etcd-$&#123;ETCD_VERSION&#125;-linux-amd64/etcd \\ $NODE:/usr/local/bin/done部署配置Keepalived和HAProxy在k8s-m1上操作切换工作目录1cd /root/master安装Keepalived和HAProxy12345for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"---- $NODE ----\" echo \"---- 安装haproxy和keepalived ----\" ssh $NODE yum install keepalived haproxy -ydone配置keepalived编辑keepalived.conf模板替换keepalived.conf的字符串编辑check_haproxy.sh1234567891011121314151617181920212223242526272829303132333435cat &gt; keepalived.conf.example &lt;&lt;EOFvrrp_script haproxy-check &#123; script \"/bin/bash /etc/keepalived/check_haproxy.sh\" interval 3 weight -2 fall 10 rise 2&#125;vrrp_instance haproxy-vip &#123; state BACKUP priority 101 interface &#123;&#123; VIP_IFACE &#125;&#125; virtual_router_id 47 advert_int 3 unicast_peer &#123; &#125; virtual_ipaddress &#123; &#123;&#123; VIP &#125;&#125; &#125; track_script &#123; haproxy-check &#125;&#125;EOF# 替换字符sed -r -e \"s#\\&#123;\\&#123; VIP \\&#125;\\&#125;#$&#123;VIP&#125;#\" \\ -e \"s#\\&#123;\\&#123; VIP_IFACE \\&#125;\\&#125;#$&#123;VIP_IFACE&#125;#\" \\ -e '/unicast_peer/r '&lt;(xargs -n1&lt;&lt;&lt;$&#123;MasterArray[@]&#125; | sort | sed 's#^#\\t#') \\ keepalived.conf.example &gt; keepalived.conf12345678910111213cat &gt; check_haproxy.sh &lt;&lt;EOF#!/bin/bashVIRTUAL_IP=$&#123;VIP&#125;errorExit() &#123; echo \"*** $*\" 1&gt;&amp;2 exit 1&#125;if ip addr | grep -q \\$VIRTUAL_IP ; then curl -s --max-time 2 --insecure https://\\$&#123;VIRTUAL_IP&#125;:8443/ -o /dev/null || errorExit \"Error GET https://\\$&#123;VIRTUAL_IP&#125;:8443/\"fiEOF配置haproxy编辑haproxy.cfg模板123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051cat &gt; haproxy.cfg.example &lt;&lt;EOFglobal maxconn 2000 ulimit-n 16384 log 127.0.0.1 local0 err stats timeout 30sdefaults log global mode http option httplog timeout connect 5000 timeout client 50000 timeout server 50000 timeout http-request 15s timeout http-keep-alive 15sfrontend monitor-in bind $&#123;VIP&#125;:33305 mode http option httplog monitor-uri /monitorlisten stats bind $&#123;VIP&#125;:8006 mode http stats enable stats hide-version stats uri /stats stats refresh 30s stats realm Haproxy\\ Statistics stats auth admin:adminfrontend k8s-api bind $&#123;VIP&#125;:8443 mode tcp option tcplog tcp-request inspect-delay 5s default_backend k8s-apibackend k8s-api mode tcp option tcplog option tcp-check balance roundrobin default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100EOF# 替换字符sed -e '$r '&lt;(paste &lt;( seq -f' server k8s-api-%g' $&#123;#MasterArray[@]&#125; ) &lt;( xargs -n1&lt;&lt;&lt;$&#123;MasterArray[@]&#125; | sort | sed 's#$#:6443 check#')) haproxy.cfg.example &gt; haproxy.cfg分发配置文件到master节点1234567for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"---- $NODE ----\" rsync -avpt haproxy.cfg $NODE:/etc/haproxy/ rsync -avpt keepalived.conf \\ check_haproxy.sh \\ $NODE:/etc/keepalived/done启动keepalived和haproxy1234for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"---- $NODE ----\" ssh $NODE systemctl enable --now keepalived haproxydone验证VIP需要大约十秒的时间等待keepalived和haproxy服务起来这里由于后端的kube-apiserver服务还没启动，只测试是否能ping通VIP如果VIP没起来，就要去确认一下各master节点的keepalived服务是否正常12sleep 15ping -c 4 $VIP部署etcd集群每个etcd节点的配置都需要做对应更改在k8s-m1上操作配置etcd.service文件123456789101112131415161718cat &gt; etcd.service &lt;&lt;EOF[Unit]Description=Etcd ServiceDocumentation=https://coreos.com/etcd/docs/latest/After=network.target[Service]User=etcdType=notifyExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yamlRestart=on-failureRestartSec=10LimitNOFILE=65536[Install]WantedBy=multi-user.targetAlias=etcd3.serviceEOFetcd.config.yaml模板关于各个参数的说明可以看这里123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100cat &gt; etcd.config.yaml.example &lt;&lt;EOF# This is the configuration file for the etcd server.# Human-readable name for this member.name: '&#123;HOSTNAME&#125;'# Path to the data directory.data-dir: '/var/lib/etcd/&#123;HOSTNAME&#125;.data/'# Path to the dedicated wal directory.wal-dir: '/var/lib/etcd/&#123;HOSTNAME&#125;.wal/'# Number of committed transactions to trigger a snapshot to disk.snapshot-count: 5000# Time (in milliseconds) of a heartbeat interval.heartbeat-interval: 100# Time (in milliseconds) for an election to timeout.election-timeout: 1000# Raise alarms when backend size exceeds the given quota. 0 means use the# default quota.quota-backend-bytes: 0# List of comma separated URLs to listen on for peer traffic.listen-peer-urls: 'https://&#123;PUBLIC_IP&#125;:2380'# List of comma separated URLs to listen on for client traffic.listen-client-urls: 'https://&#123;PUBLIC_IP&#125;:2379,http://127.0.0.1:2379'# Maximum number of snapshot files to retain (0 is unlimited).max-snapshots: 3# Maximum number of wal files to retain (0 is unlimited).max-wals: 5# Comma-separated white list of origins for CORS (cross-origin resource sharing).cors:# List of this member's peer URLs to advertise to the rest of the cluster.# The URLs needed to be a comma-separated list.initial-advertise-peer-urls: 'https://&#123;PUBLIC_IP&#125;:2380'# List of this member's client URLs to advertise to the public.# The URLs needed to be a comma-separated list.advertise-client-urls: 'https://&#123;PUBLIC_IP&#125;:2379'# Discovery URL used to bootstrap the cluster.discovery:# Valid values include 'exit', 'proxy'discovery-fallback: 'proxy'# HTTP proxy to use for traffic to discovery service.discovery-proxy:# DNS domain used to bootstrap initial cluster.discovery-srv:# Initial cluster configuration for bootstrapping.initial-cluster: '$&#123;ETCD_INITIAL_CLUSTER&#125;'# Initial cluster token for the etcd cluster during bootstrap.initial-cluster-token: 'etcd-k8s-cluster'# Initial cluster state ('new' or 'existing').initial-cluster-state: 'new'# Reject reconfiguration requests that would cause quorum loss.strict-reconfig-check: false# Accept etcd V2 client requestsenable-v2: true# Enable runtime profiling data via HTTP serverenable-pprof: true# Valid values include 'on', 'readonly', 'off'proxy: 'off'# Time (in milliseconds) an endpoint will be held in a failed state.proxy-failure-wait: 5000# Time (in milliseconds) of the endpoints refresh interval.proxy-refresh-interval: 30000# Time (in milliseconds) for a dial to timeout.proxy-dial-timeout: 1000# Time (in milliseconds) for a write to timeout.proxy-write-timeout: 5000# Time (in milliseconds) for a read to timeout.proxy-read-timeout: 0client-transport-security: # Path to the client server TLS cert file. cert-file: '/etc/etcd/ssl/etcd-server.pem' # Path to the client server TLS key file. key-file: '/etc/etcd/ssl/etcd-server-key.pem' # Enable client cert authentication. client-cert-auth: true # Path to the client server TLS trusted CA cert file. trusted-ca-file: '/etc/etcd/ssl/etcd-ca.pem' # Client TLS using generated certificates auto-tls: truepeer-transport-security: # Path to the peer server TLS cert file. cert-file: '/etc/etcd/ssl/etcd-server.pem' # Path to the peer server TLS key file. key-file: '/etc/etcd/ssl/etcd-server-key.pem' # Enable peer client cert authentication. client-cert-auth: true # Path to the peer server TLS trusted CA cert file. trusted-ca-file: '/etc/etcd/ssl/etcd-ca.pem' # Peer TLS using generated certificates. auto-tls: true# Enable debug-level logging for etcd.debug: falselogger: 'zap'# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.log-outputs: [default]# Force to create a new one member cluster.force-new-cluster: falseauto-compaction-mode: 'periodic'auto-compaction-retention: '1'# Set level of detail for exported metrics, specify 'extensive' to include histogram metrics.# default is 'basic'metrics: 'basic'EOF分发配置文件123456789101112# 根据节点信息替换文本，分发到各etcd节点for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE $&#123;MasterArray[$NODE]&#125; ---\" sed -e \"s/&#123;HOSTNAME&#125;/$NODE/g\" \\ -e \"s/&#123;PUBLIC_IP&#125;/$&#123;MasterArray[$NODE]&#125;/g\" \\ etcd.config.yaml.example &gt; etcd.config.yaml.$&#123;NODE&#125; rsync -avpt etcd.config.yaml.$&#123;NODE&#125; $&#123;NODE&#125;:/etc/etcd/etcd.config.yaml rsync -avpt etcd.service $&#123;NODE&#125;:/usr/lib/systemd/system/etcd.service ssh $&#123;NODE&#125; systemctl daemon-reload ssh $&#123;NODE&#125; chown -R etcd:etcd /etc/etcd rm -rf etcd.config.yaml.$&#123;NODE&#125;done启动etcd集群etcd 进程首次启动时会等待其它节点的 etcd 加入集群，命令 systemctl start etcd 会卡住一段时间，为正常现象启动之后可以通过etcdctl命令查看集群状态12345for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE $&#123;MasterArray[$NODE]&#125; ---\" ssh $NODE systemctl enable etcd ssh $NODE systemctl start etcd &amp;done为方便维护，可使用alias简化etcdctl命令1234cat &gt;&gt; /root/.bashrc &lt;&lt;EOFalias etcdctl2=\"export ETCDCTL_API=2;etcdctl --ca-file '/etc/etcd/ssl/etcd-ca.pem' --cert-file '/etc/etcd/ssl/etcd-client.pem' --key-file '/etc/etcd/ssl/etcd-client-key.pem' --endpoints $&#123;ETCD_SERVERS&#125;\"alias etcdctl3=\"export ETCDCTL_API=3;etcdctl --cacert=/etc/etcd/ssl/etcd-ca.pem --cert=/etc/etcd/ssl/etcd-client.pem --key=/etc/etcd/ssl/etcd-client-key.pem --endpoints=$&#123;ETCD_SERVERS&#125;\"EOF验证etcd集群状态etcd提供v2和v3两套API，kubernetes使用v3123456789101112131415161718192021222324252627282930313233# 应用上面定义的aliassource /root/.bashrc# 使用v2 API访问etcd的集群状态etcdctl2 cluster-health# 示例输出member 222fd3b0bb4a5931 is healthy: got healthy result from https://172.16.80.203:2379member 8349ef180b115a83 is healthy: got healthy result from https://172.16.80.201:2379member f525d2d797a7c465 is healthy: got healthy result from https://172.16.80.202:2379cluster is healthy# 使用v2 API访问etcd成员列表etcdctl2 member list# 示例输出222fd3b0bb4a5931: name=k8s-m3 peerURLs=https://172.16.80.203:2380 clientURLs=https://172.16.80.203:2379 isLeader=false8349ef180b115a83: name=k8s-m1 peerURLs=https://172.16.80.201:2380 clientURLs=https://172.16.80.201:2379 isLeader=falsef525d2d797a7c465: name=k8s-m2 peerURLs=https://172.16.80.202:2380 clientURLs=https://172.16.80.202:2379 isLeader=true# 使用v3 API访问etcd的endpoint状态etcdctl3 endpoint health# 示例输出https://172.16.80.201:2379 is healthy: successfully committed proposal: took = 2.879402mshttps://172.16.80.203:2379 is healthy: successfully committed proposal: took = 6.708566mshttps://172.16.80.202:2379 is healthy: successfully committed proposal: took = 7.187607ms# 使用v3 API访问etcd成员列表etcdctl3 member list --write-out=table# 示例输出+------------------+---------+--------+----------------------------+----------------------------+| ID | STATUS | NAME | PEER ADDRS | CLIENT ADDRS |+------------------+---------+--------+----------------------------+----------------------------+| 222fd3b0bb4a5931 | started | k8s-m3 | https://172.16.80.203:2380 | https://172.16.80.203:2379 || 8349ef180b115a83 | started | k8s-m1 | https://172.16.80.201:2380 | https://172.16.80.201:2379 || f525d2d797a7c465 | started | k8s-m2 | https://172.16.80.202:2380 | https://172.16.80.202:2379 |+------------------+---------+--------+----------------------------+----------------------------+Master组件服务master组件配置模板kube-apiserver.conf--allow-privileged=true启用容器特权模式--apiserver-count=3指定集群运行模式，其它节点处于阻塞状态--audit-policy-file=/etc/kubernetes/audit-policy.yaml 基于audit-policy.yaml文件定义的内容启动审计功能--authorization-mode=Node,RBAC开启 Node 和 RBAC 授权模式，拒绝未授权的请求--disable-admission-plugins=和--enable-admission-plugins禁用和启用准入控制插件。准入控制插件会在请求通过认证和授权之后、对象被持久化之前拦截到达apiserver的请求。准入控制插件依次执行，因此需要注意顺序。如果插件序列中任何一个拒绝了请求，则整个请求将立刻被拒绝并返回错误给客户端。关于admission-plugins官方文档里面有推荐配置，这里直接采用官方配置，注意针对不同kubernetes版本都会有不一样的配置，具体可以看这里--enable-bootstrap-token-auth=true启用 kubelet bootstrap 的 token 认证--experimental-encryption-provider-config=/etc/kubernetes/encryption.yaml启用加密特性将Secret数据加密存储到etcd--insecure-port=0关闭监听非安全端口8080--runtime-config=api/all=true启用所有版本的 APIs--service-cluster-ip-range=10.96.0.0/12指定 Service Cluster IP 地址段--service-node-port-range=30000-32767指定 NodePort 的端口范围--token-auth-file=/etc/kubernetes/token.csv保存bootstrap的token信息--target-ram-mb配置缓存大小，参考值为节点数*601234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253cat &gt; kube-apiserver.conf.example &lt;&lt;EOFKUBE_APISERVER_ARGS=\" \\\\--advertise-address=&#123;PUBLIC_IP&#125; \\\\--allow-privileged=true \\\\--apiserver-count=3 \\\\--audit-log-maxage=30 \\\\--audit-log-maxbackup=3 \\\\--audit-log-maxsize=1000 \\\\--audit-log-path=/var/log/kube-audit/audit.log \\\\--audit-policy-file=/etc/kubernetes/audit-policy.yaml \\\\--authorization-mode=Node,RBAC \\\\--bind-address=0.0.0.0 \\\\--client-ca-file=/etc/kubernetes/pki/kube-ca.pem \\\\--disable-admission-plugins=PersistentVolumeLabel \\\\--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,PodPreset \\\\--enable-aggregator-routing=true \\\\--enable-bootstrap-token-auth=true \\\\--enable-garbage-collector=true \\\\--etcd-compaction-interval=1h \\\\--etcd-cafile=/etc/kubernetes/pki/etcd-ca.pem \\\\--etcd-certfile=/etc/kubernetes/pki/etcd-client.pem \\\\--etcd-keyfile=/etc/kubernetes/pki/etcd-client-key.pem \\\\--etcd-servers=$ETCD_SERVERS \\\\--experimental-encryption-provider-config=/etc/kubernetes/encryption.yaml \\\\--event-ttl=1h \\\\--feature-gates=PodShareProcessNamespace=true,ExpandPersistentVolumes=true \\\\--insecure-port=0 \\\\--kubelet-client-certificate=/etc/kubernetes/pki/kube-apiserver.pem \\\\--kubelet-client-key=/etc/kubernetes/pki/kube-apiserver-key.pem \\\\--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname \\\\--logtostderr=true \\\\--max-mutating-requests-inflight=500 \\\\--max-requests-inflight=1500 \\\\--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem \\\\--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem \\\\--requestheader-allowed-names=aggregator \\\\--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem \\\\--requestheader-extra-headers-prefix=X-Remote-Extra- \\\\--requestheader-group-headers=X-Remote-Group \\\\--requestheader-username-headers=X-Remote-User \\\\--runtime-config=api/all=true \\\\--secure-port=6443 \\\\--service-account-key-file=/etc/kubernetes/pki/sa.pem \\\\--service-cluster-ip-range=10.96.0.0/12 \\\\--service-node-port-range=30000-32767 \\\\--storage-backend=etcd3 \\\\--target-ram-mb=300 \\\\--tls-cert-file=/etc/kubernetes/pki/kube-apiserver.pem \\\\--tls-private-key-file=/etc/kubernetes/pki/kube-apiserver-key.pem \\\\--token-auth-file=/etc/kubernetes/token.csv \\\\--v=2 \\\\\"EOFkube-controller-manager.conf--allocate-node-cidrs=true在cloud provider上分配和设置pod的CIDR--cluster-cidr集群内的pod的CIDR范围，需要 --allocate-node-cidrs设为true--experimental-cluster-signing-duration=8670h0m0s指定 TLS Bootstrap 证书的有效期--feature-gates=RotateKubeletServerCertificate=true开启 kublet server 证书的自动更新特性--horizontal-pod-autoscaler-use-rest-clients=true能够使用自定义资源（Custom Metrics）进行自动水平扩展--leader-elect=true集群运行模式，启用选举功能，被选为 leader 的节点负责处理工作，其它节点为阻塞状态--node-cidr-mask-size=24集群中node cidr的掩码--service-cluster-ip-range=10.96.0.0/16指定 Service Cluster IP 网段，必须和 kube-apiserver 中的同名参数一致--terminated-pod-gc-thresholdexit状态的pod超过多少会触发gc123456789101112131415161718192021222324252627282930cat &gt; kube-controller-manager.conf.example &lt;&lt;EOFKUBE_CONTROLLER_MANAGER_ARGS=\" \\\\--address=0.0.0.0 \\\\--allocate-node-cidrs=true \\\\--cluster-cidr=$POD_NET_CIDR \\\\--cluster-signing-cert-file=/etc/kubernetes/pki/kube-ca.pem \\\\--cluster-signing-key-file=/etc/kubernetes/pki/kube-ca-key.pem \\\\--concurrent-service-syncs=10 \\\\--concurrent-serviceaccount-token-syncs=20 \\\\--controllers=*,bootstrapsigner,tokencleaner \\\\--enable-garbage-collector=true \\\\--experimental-cluster-signing-duration=8670h0m0s \\\\--feature-gates=RotateKubeletServerCertificate=true,ExpandPersistentVolumes=true \\\\--horizontal-pod-autoscaler-sync-period=10s \\\\--horizontal-pod-autoscaler-use-rest-clients=true \\\\--kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\\\--leader-elect=true \\\\--logtostderr=true \\\\--node-cidr-mask-size=24 \\\\--node-monitor-grace-period=40s \\\\--node-monitor-period=5s \\\\--pod-eviction-timeout=2m0s \\\\--root-ca-file=/etc/kubernetes/pki/kube-ca.pem \\\\--service-account-private-key-file=/etc/kubernetes/pki/sa-key.pem \\\\--service-cluster-ip-range=$SVC_CLUSTER_CIDR \\\\--terminated-pod-gc-threshold=12500 \\\\--use-service-account-credentials=true \\\\--v=2 \\\\\"EOFkube-scheduler.conf--leader-elect=true集群运行模式，启用选举功能，被选为 leader 的节点负责处理工作，其它节点为阻塞状态12345678910cat &gt; kube-scheduler.conf.example &lt;&lt;EOFKUBE_SCHEDULER_ARGS=\"\\\\--address=0.0.0.0 \\\\--algorithm-provider=DefaultProvider \\\\--kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\\\--leader-elect=true \\\\--logtostderr=true \\\\--v=2 \\\\\"EOFsystemd服务文件kube-apiserver.service123456789101112131415161718cat &gt; kube-apiserver.service &lt;&lt;EOF[Unit]Description=Kubernetes API ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=network.targetAfter=etcd.service[Service]User=kubeEnvironmentFile=-/etc/kubernetes/kube-apiserver.confExecStart=/usr/local/bin/kube-apiserver \\$KUBE_APISERVER_ARGSRestart=on-failureType=notifyLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOFkube-controller-manager.service123456789101112131415cat &gt; kube-controller-manager.service &lt;&lt;EOF[Unit]Description=Kubernetes Controller ManagerDocumentation=https://github.com/GoogleCloudPlatform/kubernetes[Service]User=kubeEnvironmentFile=-/etc/kubernetes/kube-controller-manager.confExecStart=/usr/local/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_ARGSRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOFkube-scheduler.service123456789101112131415cat &gt; kube-scheduler.service &lt;&lt;EOF[Unit]Description=Kubernetes Scheduler PluginDocumentation=https://github.com/GoogleCloudPlatform/kubernetes[Service]User=kubeEnvironmentFile=-/etc/kubernetes/kube-scheduler.confExecStart=/usr/local/bin/kube-scheduler \\$KUBE_SCHEDULER_ARGSRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF分发配置文件到各master节点根据master节点的信息替换配置文件里面的字段1234567891011for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE $&#123;MasterArray[$NODE]&#125; ---\" rsync -avpt kube*service $NODE:/usr/lib/systemd/system/ sed -e \"s/&#123;PUBLIC_IP&#125;/$&#123;MasterArray[$NODE]&#125;/g\" kube-apiserver.conf.example &gt; kube-apiserver.conf.$&#123;NODE&#125; rsync -avpt kube-apiserver.conf.$&#123;NODE&#125; $NODE:/etc/kubernetes/kube-apiserver.conf rsync -avpt kube-controller-manager.conf.example $NODE:/etc/kubernetes/kube-controller-manager.conf rsync -avpt kube-scheduler.conf.example $NODE:/etc/kubernetes/kube-scheduler.conf rm -rf *conf.$&#123;NODE&#125; ssh $NODE systemctl daemon-reload ssh $NODE chown -R kube:kube /etc/kubernetesdone启动kubernetes服务可以先在k8s-m1上面启动服务，确认正常之后再在其他master节点启动123systemctl enable --now kube-apiserver.servicesystemctl enable --now kube-controller-manager.servicesystemctl enable --now kube-scheduler.service12345678910111213kubectl --kubeconfig=/etc/kubernetes/kube-admin.kubeconfig get cs# 输出示例NAME STATUS MESSAGE ERRORcontroller-manager Healthy ok scheduler Healthy ok etcd-2 Healthy &#123;\"health\":\"true\"&#125; etcd-0 Healthy &#123;\"health\":\"true\"&#125; etcd-1 Healthy &#123;\"health\":\"true\"&#125;kubectl --kubeconfig=/etc/kubernetes/kube-admin.kubeconfig get endpoints# 输出示例NAME ENDPOINTS AGEkubernetes 172.16.80.201:6443 27s123456for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE $&#123;MasterArray[$NODE]&#125; ---\" ssh $NODE \"systemctl enable --now kube-apiserver\" ssh $NODE \"systemctl enable --now kube-controller-manager\" ssh $NODE \"systemctl enable --now kube-scheduler\"done三台master节点的kube-apiserver、kube-controller-manager、kube-scheduler服务启动成功后可以测试一下1234kubectl --kubeconfig=/etc/kubernetes/kube-admin.kubeconfig get endpoints# 输出示例NAME ENDPOINTS AGEkubernetes 172.16.80.201:6443,172.16.80.202:6443,172.16.80.203:6443 12m设置kubectlkubectl命令默认会加载~/.kube/config文件，如果文件不存在则连接http://127.0.0.1:8080，这显然不符合预期，这里使用之前生成的kube-admin.kubeconfig在k8s-m1上操作12345for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE $&#123;MasterArray[$NODE]&#125; ---\" ssh $NODE mkdir -p /root/.kube rsync -avpt /root/pki/kube-admin.kubeconfig $NODE:/root/.kube/configdone设置命令补全设置kubectl 命令自动补全123456789for NODE in \"$&#123;!MasterArray[@]&#125;\";do echo \"--- $NODE $&#123;MasterArray[$NODE]&#125; ---\" echo \"--- kubectl命令自动补全 ---\" ssh $NODE kubectl completion bash &gt;&gt; /etc/bash_completion.d/kubectl echo \"--- kubeadm命令自动补全 ---\" ssh $NODE kubeadm completion bash &gt;&gt; /etc/bash_completion.d/kubeadmdonesource /etc/bash_completion.d/kubectl设置kubelet的bootstrap启动所需的RBAC当集群开启了 TLS 认证后，每个节点的 kubelet 组件都要使用由 apiserver 使用的 CA 签发的有效证书才能与apiserver 通讯；此时如果节点多起来，为每个节点单独签署证书将是一件非常繁琐的事情；TLS bootstrapping 功能就是让 kubelet 先使用一个预定的低权限用户连接到 apiserver，然后向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署；在其中一个master节点上执行就可以，以k8s-m1为例创建工作目录12mkdir -p /root/yaml/tls-bootstrapcd /root/yaml/tls-bootstrap/kubelet-bootstrap-rbac.yaml12345678910111213141516# 创建yaml文件cat &gt; kubelet-bootstrap-rbac.yaml &lt;&lt;EOF# 给予 kubelet-bootstrap 用户进行 node-bootstrapper 的权限apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: kubelet-bootstraproleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:node-bootstrappersubjects:- apiGroup: rbac.authorization.k8s.io kind: User name: kubelet-bootstrapEOFtls-bootstrap-clusterrole.yaml12345678910111213# 创建yaml文件cat &gt; tls-bootstrap-clusterrole.yaml &lt;&lt;EOF# A ClusterRole which instructs the CSR approver to approve a node requesting a# serving cert matching its client cert.kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata: name: system:certificates.k8s.io:certificatesigningrequests:selfnodeserverrules:- apiGroups: [\"certificates.k8s.io\"] resources: [\"certificatesigningrequests/selfnodeserver\"] verbs: [\"create\"]EOFnode-client-auto-approve-csr.yaml12345678910111213141516# 创建yaml文件cat &gt; node-client-auto-approve-csr.yaml &lt;&lt;EOF# 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: node-client-auto-approve-csrroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:certificates.k8s.io:certificatesigningrequests:nodeclientsubjects:- apiGroup: rbac.authorization.k8s.io kind: Group name: system:bootstrappersEOFnode-client-auto-renew-crt.yaml12345678910111213141516# 创建yaml文件cat &gt; node-client-auto-renew-crt.yaml &lt;&lt;EOF# 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: node-client-auto-renew-crtroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclientsubjects:- apiGroup: rbac.authorization.k8s.io kind: Group name: system:nodesEOFnode-server-auto-renew-crt.yaml12345678910111213141516# 创建yaml文件cat &gt; node-server-auto-renew-crt.yaml &lt;&lt;EOF# 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: node-server-auto-renew-crtroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:certificates.k8s.io:certificatesigningrequests:selfnodeserversubjects:- apiGroup: rbac.authorization.k8s.io kind: Group name: system:nodesEOF创建tls-bootstrap-rbac1kubectl apply -f .设置kube-apiserver获取node信息的权限说明本文部署的kubelet关闭了匿名访问，因此需要额外为kube-apiserver添加权限用于访问kubelet的信息若没添加此RBAC，则kubectl在执行logs、exec等指令的时候会提示401 Forbidden12kubectl -n kube-system logs calico-node-pc8lq Error from server (Forbidden): Forbidden (user=kube-apiserver, verb=get, resource=nodes, subresource=proxy) ( pods/log calico-node-pc8lq)参考文档：Kublet的认证授权创建yaml文件1234567891011121314151617181920212223242526272829303132333435cat &gt; /root/yaml/apiserver-to-kubelet-rbac.yaml &lt;&lt;EOFapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: annotations: rbac.authorization.kubernetes.io/autoupdate: \"true\" labels: kubernetes.io/bootstrapping: rbac-defaults name: system:kube-apiserver-to-kubeletrules: - apiGroups: - \"\" resources: - nodes/proxy - nodes/stats - nodes/log - nodes/spec - nodes/metrics verbs: - \"*\"---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: system:kube-apiserver namespace: \"\"roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:kube-apiserver-to-kubeletsubjects: - apiGroup: rbac.authorization.k8s.io kind: User name: kube-apiserverEOF创建RBAC1kubectl apply -f /root/yaml/apiserver-to-kubelet-rbac.yamlkubernetes worker节点worker节点说明安装Docker-ce，配置与master节点一致即可安装cni-plugins、kubelet、kube-proxy关闭防火墙和SELINUXkubelet和kube-proxy运行需要root权限这里是以k8s-m1、k8s-m2、k8s-m3作为Work节点加入集群kubelet管理容器生命周期、节点状态监控目前 kubelet 支持三种数据源来获取节点Pod信息：本地文件通过 url 从网络上某个地址来获取信息API Server：从 kubernetes master 节点获取信息使用kubeconfig与kube-apiserver通信这里启用TLS-Bootstrap实现kubelet证书动态签署证书，并自动生成kubeconfigkube-proxyKube-proxy是实现Service的关键插件，kube-proxy会在每台节点上执行，然后监听API Server的Service与Endpoint资源物件的改变，然后来依据变化调用相应的组件来实现网路的转发kube-proxy可以使用userspace（基本已废弃）、iptables（默认方式）和ipvs来实现数据报文的转发这里使用的是性能更好、适合大规模使用的ipvs使用kubeconfig与kube-apiserver通信切换工作目录在k8s-m1上操作1cd /root/workerworker组件配置模板kubelet.conf--bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig指定bootstrap启动时使用的kubeconfig--network-plugin=cni定义网络插件，Pod生命周期使用此网络插件--node-labels=node-role.kubernetes.io/node=&#39;&#39;kubelet注册当前Node时设置的Label，以key=value的格式表示，多个labe以逗号分隔--pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.1Pod的pause镜像123456789101112131415cat &gt; kubelet.conf &lt;&lt;EOFKUBELET_ARGS=\" \\\\--bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \\\\--cert-dir=/etc/kubernetes/ssl \\\\--config=/etc/kubernetes/kubelet.config.file \\\\--cni-conf-dir=/etc/cni/net.d \\\\--cni-bin-dir=/opt/cni/bin \\\\--kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\\\--logtostderr=true \\\\--network-plugin=cni \\\\--node-labels=node-role.kubernetes.io/node='' \\\\--pod-infra-container-image=gcrxio/pause:3.1 \\\\--v=2 \\\\\"EOFkubelet.config.file1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798cat &gt; kubelet.config.file &lt;&lt;EOFapiVersion: kubelet.config.k8s.io/v1beta1kind: KubeletConfigurationaddress: 0.0.0.0authentication: # 匿名访问 anonymous: enabled: false webhook: cacheTTL: 2m0s enabled: true x509: # 这里写kubernetes-ca证书的路径 clientCAFile: /etc/kubernetes/pki/kube-ca.pemauthorization: mode: Webhook webhook: cacheAuthorizedTTL: 5m0s cacheUnauthorizedTTL: 30s# cgroups的驱动，可选systemd和cgroupfscgroupDriver: cgroupfscgroupsPerQOS: true# 指定Pod的DNS服务器IP地址clusterDNS:- 10.96.0.10# 集群的域名clusterDomain: cluster.localcontainerLogMaxFiles: 5containerLogMaxSize: 10MicontentType: application/vnd.kubernetes.protobufcpuCFSQuota: truecpuManagerPolicy: nonecpuManagerReconcilePeriod: 10senableControllerAttachDetach: trueenableDebuggingHandlers: trueenforceNodeAllocatable:- podseventBurst: 10eventRecordQPS: 5# 达到某些阈值之后，kubelet会驱逐Pod# A set of eviction thresholds (e.g. memory.available&lt;1Gi) that if met would trigger a pod eviction.# (default imagefs.available&lt;15%,memory.available&lt;100Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5%)evictionHard: imagefs.available: 15% memory.available: 1000Mi nodefs.available: 10% nodefs.inodesFree: 10%evictionPressureTransitionPeriod: 5m0s# 检测到系统已启用swap分区时kubelet会启动失败failSwapOn: false# 定义feature gatesfeatureGates: # kubelet 在证书即将到期时会自动发起一个 renew 自己证书的 CSR 请求 # 其实rotate证书已经默认开启，这里显示定义是为了方便查看 RotateKubeletClientCertificate: true RotateKubeletServerCertificate: true# 检查kubelet配置文件变更的间隔fileCheckFrequency: 20s# 允许endpoint在尝试访问自己的服务时会被负载均衡分发到自身# 可选值\"promiscuous-bridge\", \"hairpin-veth\" and \"none\"# 默认值为promiscuous-bridgehairpinMode: promiscuous-bridgehealthzBindAddress: 127.0.0.1healthzPort: 10248httpCheckFrequency: 20s# 这里定义容器镜像触发回收空间的上限值和下限值imageGCHighThresholdPercent: 85imageGCLowThresholdPercent: 80imageMinimumGCAge: 2m0siptablesDropBit: 15iptablesMasqueradeBit: 14kubeAPIBurst: 10kubeAPIQPS: 5makeIPTablesUtilChains: true# kubelet进程最大能打开的文件数量，默认是1000000maxOpenFiles: 1000000# 当前节点kubelet所能运行的最大Pod数量maxPods: 110# node状态上报间隔nodeStatusUpdateFrequency: 10soomScoreAdj: -999podPidsLimit: -1# kubelet服务端口port: 10250registryBurst: 10registryPullQPS: 5# 指定域名解析文件resolvConf: /etc/resolv.confrotateCertificates: trueruntimeRequestTimeout: 2m0s# 拉镜像时，同一时间只拉取一个镜像# We recommend *not* changing the default value on nodes that run docker daemon with version &lt; 1.9 or an Aufs storage backend. Issue #10959 has more details. (default true)serializeImagePulls: truestaticPodPath: /etc/kubernetes/manifestsstreamingConnectionIdleTimeout: 4h0m0ssyncFrequency: 1m0svolumeStatsAggPeriod: 1m0sEOFkube-proxy.conf123456cat &gt; kube-proxy.conf &lt;&lt;EOFKUBE_PROXY_ARGS=\" \\\\--config=/etc/kubernetes/kube-proxy.config.file \\\\--v=2 \\\\\"EOFkube-proxy.config.file12345678910111213141516171819202122232425262728293031323334353637383940414243cat &gt; kube-proxy.config.file &lt;&lt;EOFapiVersion: kubeproxy.config.k8s.io/v1alpha1kind: KubeProxyConfigurationbindAddress: 0.0.0.0clientConnection: acceptContentTypes: \"\" burst: 10 contentType: application/vnd.kubernetes.protobuf kubeconfig: /etc/kubernetes/kube-proxy.kubeconfig qps: 5# 集群中pod的CIDR范围，从这个范围以外发送到服务集群IP的流量将被伪装，从POD发送到外部LoadBalanceIP的流量将被定向到各自的集群IPclusterCIDR: \"10.244.0.0/16\"configSyncPeriod: 15m0sconntrack: max: null # 每个核心最大能跟踪的NAT连接数，默认32768 maxPerCore: 32768 min: 131072 tcpCloseWaitTimeout: 1h0m0s tcpEstablishedTimeout: 24h0m0senableProfiling: falsehealthzBindAddress: 0.0.0.0:10256hostnameOverride: \"\"iptables: # SNAT所有通过服务集群ip发送的通信 masqueradeAll: false masqueradeBit: 14 minSyncPeriod: 0s syncPeriod: 30sipvs: excludeCIDRs: null minSyncPeriod: 0s # ipvs调度类型，默认是rr scheduler: \"rr\" syncPeriod: 30smetricsBindAddress: 127.0.0.1:10249mode: \"ipvs\"nodePortAddresses: nulloomScoreAdj: -999portRange: \"\"resourceContainer: /kube-proxyudpIdleTimeout: 250msEOFsystemd服务文件kubelet.service123456789101112131415161718cat &gt; kubelet.service &lt;&lt;EOF[Unit]Description=Kubernetes Kubelet ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=docker.serviceRequires=docker.service[Service]WorkingDirectory=/var/lib/kubeletEnvironmentFile=-/etc/kubernetes/kubelet.confExecStart=/usr/local/bin/kubelet \\$KUBELET_ARGSRestart=on-failureKillMode=processLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOFkube-proxy.service1234567891011121314151617cat &gt; kube-proxy.service &lt;&lt;EOF[Unit]Description=Kubernetes Kube-Proxy ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=network.target[Service]EnvironmentFile=-/etc/kubernetes/kube-proxy.conf# 这里启动时使用ipvsadm将TCP的keepalive时间设置，默认是900ExecStartPre=/usr/sbin/ipvsadm --set 900 120 300 ExecStart=/usr/local/bin/kube-proxy \\$KUBE_PROXY_ARGSRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF分发证书和kubeconfig文件在k8s-m1上操作在worker节点建立对应的目录123456789101112131415for NODE in \"$&#123;!WorkerArray[@]&#125;\";do echo \"--- $NODE ---\" echo \"--- 创建目录 ---\" ssh $NODE mkdir -p /opt/cni/bin \\ /etc/cni/net.d \\ /etc/kubernetes/pki \\ /etc/kubernetes/manifests \\ /var/lib/kubelet rsync -avpt /root/pki/kube-proxy.kubeconfig \\ /root/pki/bootstrap.kubeconfig \\ $NODE:/etc/kubernetes/ rsync -avpt /root/pki/kube-ca.pem \\ /root/pki/front-proxy-ca.pem \\ $NODE:/etc/kubernetes/pki/done分发二进制文件在k8s-m1上操作123456789for NODE in \"$&#123;!WorkerArray[@]&#125;\";do echo \"--- $NODE ---\" echo \"--- 分发kubernetes二进制文件 ---\" rsync -avpt /root/software/kubernetes/server/bin/kubelet \\ /root/software/kubernetes/server/bin/kube-proxy \\ $NODE:/usr/local/bin/ echo \"--- 分发CNI-Plugins ---\" rsync -avpt /root/software/cni-plugins/* $NODE:/opt/cni/bin/done分发配置文件和服务文件123456for NODE in \"$&#123;!WorkerArray[@]&#125;\";do echo \"--- $NODE ---\" rsync -avpt kubelet.conf kubelet.config.file kube-proxy.conf kube-proxy.config.file $NODE:/etc/kubernetes/ rsync -avpt kubelet.service kube-proxy.service $NODE:/usr/lib/systemd/system/ ssh $NODE systemctl daemon-reloaddone启动服务1234for NODE in \"$&#123;!WorkerArray[@]&#125;\";do echo \"--- $NODE ---\" ssh $NODE systemctl enable --now docker.service kubelet.service kube-proxy.servicedone获取节点信息此时由于未按照网络插件，所以节点状态为NotReady123456kubectl get node -o wide# 示例输出NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIMEk8s-m1 NotReady node 12s v1.11.5 172.16.80.201 &lt;none&gt; CentOS Linux 7 (Core) 3.10.0-957.1.3.el7.x86_64 docker://18.3.1k8s-m2 NotReady node 12s v1.11.5 172.16.80.202 &lt;none&gt; CentOS Linux 7 (Core) 3.10.0-957.1.3.el7.x86_64 docker://18.3.1k8s-m3 NotReady node 12s v1.11.5 172.16.80.203 &lt;none&gt; CentOS Linux 7 (Core) 3.10.0-957.1.3.el7.x86_64 docker://18.3.1kubernetes Core Addons网络组件部署（二选其一）只要符合CNI规范的网络组件都可以给kubernetes使用网络组件清单可以在这里看到Network Plugins这里只列举kube-flannel和calico，flannel和calico的区别可以自己去找资料网络组件只能选一个来部署本文使用kube-flannel部署网络组件，calico已测试可用在k8s-m1上操作创建工作目录1mkdir -p /root/yaml/network-plugin/&#123;kube-flannel,calico&#125;kube-flannel说明kube-flannel基于VXLAN的方式创建容器二层网络，使用端口8472/UDP通信flannel 第一次启动时，从 etcd 获取 Pod 网段信息，为本节点分配一个未使用的 /24 段地址，然后创建 flannel.1（也可能是其它名称，如 flannel1 等） 接口。官方提供yaml文件部署为DeamonSet若需要使用NetworkPolicy功能，可以关注这个项目canal架构图切换工作目录1cd /root/yaml/network-plugin/kube-flannel下载yaml文件1wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml官方yaml文件包含多个平台的daemonset，包括amd64、arm64、arm、ppc64le、s390x这里以amd64作为例子，其他的可以自行根据需要修改或者直接删除不需要的daemonset官方yaml文件已经配置好容器网络为10.244.0.0/16，这里需要跟kube-controller-manager.conf里面的--cluster-cidr匹配如果在kube-controller-manager.conf里面把--cluster-cidr改成了其他地址段，例如192.168.0.0/16，用以下命令替换kube-flannel.yaml相应的字段1sed -e 's,\"Network\": \"10.244.0.0/16\",\"Network\": \"192.168.0.0/16,\" -i kube-flannel.yml如果服务器有多个网卡，需要指定网卡用于flannel通信，以网卡ens33为例在args下面添加一行- --iface=ens33123456789containers:- name: kube-flannel image: quay.io/coreos/flannel:v0.10.0-amd64 command: - /opt/bin/flanneld args: - --ip-masq - --kube-subnet-mgr - --iface=ens33修改backendflannel支持多种后端实现，可选值为VXLAN、host-gw、UDP从性能上，host-gw是最好的，VXLAN和UDP次之默认值是VXLAN，这里以修改为host-gw为例，位置大概在75行左右1234567net-conf.json: | &#123; \"Network\": \"10.244.0.0/16\", \"Backend\": &#123; \"Type\": \"host-gw\" &#125; &#125;部署kube-flannel1kubectl apply -f kube-flannel.yml检查部署情况12345kubectl -n kube-system get pod -l k8s-app=flannelNAME READY STATUS RESTARTS AGEkube-flannel-ds-27jwl 2/2 Running 0 59skube-flannel-ds-4fgv6 2/2 Running 0 59skube-flannel-ds-mvrt7 2/2 Running 0 59s如果等很久都没Running，可能是quay.io对你来说太慢了可以替换一下镜像，重新apply12sed -e 's,quay.io/coreos/,zhangguanzhang/quay.io.coreos.,g' -i kube-flannel.ymlkubectl apply -f kube-flannel.yamlCalico说明Calico 是一款纯 Layer 3 的网络，节点之间基于BGP协议来通信。这里以calico-v3.4.0来作为示例部署文档架构图切换工作目录1cd /root/yaml/network-plugin/calico下载yaml文件这里使用kubernetes API来保存网络信息12wget https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yamlwget https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calicoctl.yaml官方yaml文件默认配置容器网络为192.168.0.0/16，这里需要跟kube-controller-manager.conf里面的--cluster-cidr匹配，需要替换相应字段1sed -e \"s,192.168.0.0/16,$&#123;POD_NET_CIDR&#125;,g\" -i calico.yaml官方yaml文件定义calicoctl为Pod，而不是deployment，所以需要调整一下修改kind: Pod为kind: Deployment并补充其他字段1234567891011121314151617181920212223242526272829303132333435apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: calicoctl namespace: kube-system labels: k8s-app: calicoctlspec: replicas: 1 selector: matchLabels: k8s-app: calicoctl template: metadata: name: calicoctl namespace: kube-system labels: k8s-app: calicoctl spec: tolerations: - effect: NoSchedule key: node-role.kubernetes.io/master - effect: NoSchedule key: node.cloudprovider.kubernetes.io/uninitialized value: \"true\" hostNetwork: true serviceAccountName: calicoctl containers: - name: calicoctl image: quay.io/calico/ctl:v3.4.0 command: [\"/bin/sh\", \"-c\", \"while true; do sleep 3600; done\"] tty: true env: - name: DATASTORE_TYPE value: kubernetes部署Calico1kubectl apply -f /root/yaml/network-plugin/calico/检查部署情况12345678910111213141516171819202122kubectl -n kube-system get pod -l k8s-app=calico-nodeNAME READY STATUS RESTARTS AGEcalico-node-fjcj4 2/2 Running 0 6mcalico-node-tzppt 2/2 Running 0 6mcalico-node-zdq64 2/2 Running 0 6mkubectl get pod -n kube-system -l k8s-app=calicoctlNAME READY STATUS RESTARTS AGEcalicoctl-58df8955f6-sp8q9 0/1 Running 0 38skubectl -n kube-system exec -it calicoctl-58df8955f6-sp8q9 -- /calicoctl get node -o wideNAME ASN IPV4 IPV6 k8s-m1 (unknown) 172.16.80.201/24 k8s-m2 (unknown) 172.16.80.202/24 k8s-m3 (unknown) 172.16.80.203/24kubectl -n kube-system exec -it calicoctl-58df8955f6-sp8q9 -- /calicoctl get profiles -o wideNAME LABELS kns.default map[] kns.kube-public map[] kns.kube-system map[]如果镜像pull不下来，可以替换一下替换完重新apply12sed -e 's,quay.io/calico/,zhangguanzhang/quay.io.calico.,g' -i *yamlkubectl apply -f .检查节点状态网络组件部署完成之后，可以看到node状态已经为Ready12345kubectl get node NAME STATUS ROLES AGE VERSIONk8s-m1 Ready node 1d v1.11.5k8s-m2 Ready node 1d v1.11.5k8s-m3 Ready node 1d v1.11.5服务发现组件部署kubernetes从v1.11之后，已经使用CoreDNS取代原来的KUBE DNS作为服务发现的组件CoreDNS 是由 CNCF 维护的开源 DNS 方案，前身是 SkyDNS在k8s-m1上操作创建工作目录1mkdir -p /root/yaml/coredns切换工作目录1cd /root/yaml/corednsCoreDNS创建yaml文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193cat &gt; coredns.yaml &lt;&lt;EOFapiVersion: v1kind: ServiceAccountmetadata: name: coredns namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRolemetadata: labels: kubernetes.io/bootstrapping: rbac-defaults name: system:corednsrules:- apiGroups: - \"\" resources: - endpoints - services - pods - namespaces verbs: - list - watch---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: annotations: rbac.authorization.kubernetes.io/autoupdate: \"true\" labels: kubernetes.io/bootstrapping: rbac-defaults name: system:corednsroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:corednssubjects:- kind: ServiceAccount name: coredns namespace: kube-system---apiVersion: v1kind: ConfigMapmetadata: name: coredns namespace: kube-systemdata: Corefile: | .:53 &#123; errors log health kubernetes cluster.local in-addr.arpa ip6.arpa &#123; pods insecure upstream fallthrough in-addr.arpa ip6.arpa &#125; prometheus :9153 proxy . /etc/resolv.conf cache 30 reload loadbalance &#125;---apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: coredns namespace: kube-system labels: k8s-app: kube-dns kubernetes.io/name: \"CoreDNS\"spec: replicas: 2 strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1 selector: matchLabels: k8s-app: kube-dns template: metadata: annotations: scheduler.alpha.kubernetes.io/critical-pod: \"\" labels: k8s-app: kube-dns spec: serviceAccountName: coredns priorityClassName: system-cluster-critical # 使用podAntiAffinity # CoreDNS的Pod不会被调度到同一台宿主机 affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: k8s-app operator: In values: - kube-dns topologyKey: kubernetes.io/hostname tolerations: - key: CriticalAddonsOnly operator: Exists - effect: NoSchedule key: node-role.kubernetes.io/master containers: - name: coredns image: gcrxio/coredns:1.2.6 imagePullPolicy: IfNotPresent args: [ \"-conf\", \"/etc/coredns/Corefile\" ] livenessProbe: httpGet: path: /health port: 8080 scheme: HTTP initialDelaySeconds: 60 timeoutSeconds: 10 successThreshold: 1 failureThreshold: 5 ports: - containerPort: 53 name: dns protocol: UDP - containerPort: 53 name: dns-tcp protocol: TCP - containerPort: 9153 name: metrics protocol: TCP resources: limits: memory: 200Mi requests: cpu: 100m memory: 70Mi securityContext: allowPrivilegeEscalation: false capabilities: add: - NET_BIND_SERVICE drop: - all readOnlyRootFilesystem: true volumeMounts: - name: config-volume mountPath: /etc/coredns readOnly: true - name: host-time mountPath: /etc/localtime dnsPolicy: Default volumes: - name: host-time hostPath: path: /etc/localtime - name: config-volume configMap: name: coredns items: - key: Corefile path: Corefile---apiVersion: v1kind: Servicemetadata: name: kube-dns namespace: kube-system annotations: prometheus.io/port: \"9153\" prometheus.io/scrape: \"true\" labels: k8s-app: kube-dns kubernetes.io/cluster-service: \"true\" kubernetes.io/name: \"CoreDNS\"spec: selector: k8s-app: kube-dns clusterIP: $&#123;POD_DNS_SERVER_IP&#125; ports: - name: dns port: 53 protocol: UDP - name: dns-tcp port: 53 protocol: TCP - name: metrics port: 9153 protocol: TCPEOF修改yaml文件yaml文件里面定义了clusterIP这里需要与kubelet.config.file里面定义的cluster-dns一致如果kubelet.conf里面的--cluster-dns改成别的，例如x.x.x.x，这里也要做相应变动，不然Pod找不到DNS，无法正常工作这里定义静态的hosts解析，这样Pod可以通过hostname来访问到各节点主机用下面的命令根据HostArray的信息生成静态的hosts解析12345678sed -e '57r '&lt;(\\ echo ' hosts &#123;'; \\ for NODE in \"$&#123;!HostArray[@]&#125;\";do \\ echo \" $&#123;HostArray[$NODE]&#125; $NODE\"; \\ done;\\ echo ' fallthrough'; \\ echo ' &#125;';) \\-i coredns.yaml上面的命令的作用是，通过HostArray的信息生成hosts解析配置，顺序是打乱的，可以手工调整顺序也可以手动修改coredns.yaml文件来添加对应字段12345678910111213141516171819202122232425262728apiVersion: v1kind: ConfigMapmetadata: name: coredns namespace: kube-systemdata: Corefile: | .:53 &#123; errors log health kubernetes cluster.local in-addr.arpa ip6.arpa &#123; pods insecure upstream fallthrough in-addr.arpa ip6.arpa &#125; hosts &#123; 172.16.80.202 k8s-m2 172.16.80.203 k8s-m3 172.16.80.201 k8s-m1 fallthrough in-addr.arpa ip6.arpa &#125; prometheus :9153 proxy . /etc/resolv.conf cache 30 reload loadbalance &#125;部署CoreDNS1kubectl apply -f coredns.yaml检查部署状态1234kubectl -n kube-system get pod -l k8s-app=kube-dnsNAME READY STATUS RESTARTS AGEcoredns-5566c96697-6gzzc 1/1 Running 0 45scoredns-5566c96697-q5slk 1/1 Running 0 45s验证集群DNS服务创建一个deployment测试DNS解析123456789101112131415161718192021222324252627282930# 创建一个基于busybox的deploymentcat &gt; /root/yaml/busybox-deployment.yaml &lt;&lt;EOFapiVersion: apps/v1kind: Deploymentmetadata: labels: app: busybox name: busybox namespace: defaultspec: replicas: 1 selector: matchLabels: app: busybox template: metadata: labels: app: busybox spec: containers: - name: busybox imagePullPolicy: IfNotPresent image: busybox:1.26 command: - sleep - \"3600\"EOF# 基于文件创建deploymentkubectl apply -f /root/yaml/busybox-deployment.yaml检查deployment部署情况123kubectl get podNAME READY STATUS RESTARTS AGEbusybox-7b9bfb5658-872gj 1/1 Running 0 6s验证集群DNS解析上一个命令获取到pod名字为busybox-7b9bfb5658-872gj通过kubectl命令连接到Pod运行nslookup命令测试使用域名来访问kube-apiserver和各节点主机123456789101112131415161718192021222324252627282930313233echo \"--- 通过CoreDNS访问kubernetes ---\"kubectl exec -it busybox-7b9bfb5658-4cz94 -- nslookup kubernetes# 示例输出Server: 10.96.0.10Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.localName: kubernetesAddress 1: 10.96.0.1 kubernetes.default.svc.cluster.localecho \"--- 通过CoreDNS访问k8s-m1 ---\"# 示例输出kubectl exec -it busybox-7b9bfb5658-4cz94 -- nslookup k8s-m1Server: 10.96.0.10Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.localName: k8s-m1Address 1: 172.16.80.201 k8s-m1echo \"--- 通过CoreDNS访问k8s-m2 ---\"kubectl exec -it busybox-7b9bfb5658-4cz94 -- nslookup k8s-m2# 示例输出Server: 10.96.0.10Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.localName: k8s-n2Address 1: 172.16.80.202 k8s-m2echo \"--- 通过CoreDNS访问并不存在的k8s-n3 ---\"kubectl exec -it busybox-7b9bfb5658-4cz94 -- nslookup k8s-n3# 示例输出Server: 10.96.0.10Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.localnslookup: can't resolve 'k8s-n3'Metrics ServerMetrics Server是实现了 Metrics API 的元件,其目标是取代 Heapster 作位 Pod 与 Node 提供资源的 Usagemetrics,该元件会从每个 Kubernetes 节点上的 Kubelet 所公开的 Summary API 中收集 MetricsHorizontal Pod Autoscaler（HPA）控制器用于实现基于CPU使用率进行自动Pod伸缩的功能。HPA控制器基于Master的kube-controller-manager服务启动参数–horizontal-pod-autoscaler-sync-period定义是时长（默认30秒）,周期性监控目标Pod的CPU使用率,并在满足条件时对ReplicationController或Deployment中的Pod副本数进行调整,以符合用户定义的平均PodCPU使用率。在新版本的kubernetes中 Pod CPU使用率不在来源于heapster,而是来自于metrics-server官网原话是 The –horizontal-pod-autoscaler-use-rest-clients is true or unset. Setting this to false switches to Heapster-based autoscaling, which is deprecated.在k8s-m1上操作额外参数设置kube-apiserver参数，这里在配置kube-apiserver阶段已经加进去了front-proxy证书，在证书生成阶段已经完成且已分发1234567--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem--requestheader-allowed-names=aggregator--requestheader-group-headers=X-Remote-Group--requestheader-extra-headers-prefix=X-Remote-Extra---requestheader-username-headers=X-Remote-User创建工作目录1mkdir -p /root/yaml/metrics-server切换工作目录1cd /root/yaml/metrics-server下载yaml文件123456wget https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/master/deploy/1.8%2B/aggregated-metrics-reader.yamlwget https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/master/deploy/1.8%2B/auth-delegator.yamlwget https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/master/deploy/1.8%2B/auth-reader.yamlwget https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/master/deploy/1.8%2B/metrics-apiservice.yamlwget https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/master/deploy/1.8%2B/metrics-server-service.yamlwget https://raw.githubusercontent.com/kubernetes-incubator/metrics-server/master/deploy/1.8%2B/resource-reader.yaml创建metrics-server-deployment.yaml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950cat &gt; metrics-server-deployment.yaml &lt;&lt;EOF---apiVersion: v1kind: ServiceAccountmetadata: name: metrics-server namespace: kube-system---apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: metrics-server namespace: kube-system labels: k8s-app: metrics-serverspec: selector: matchLabels: k8s-app: metrics-server template: metadata: name: metrics-server labels: k8s-app: metrics-server spec: serviceAccountName: metrics-server volumes: # mount in tmp so we can safely use from-scratch images and/or read-only containers - name: ca-ssl hostPath: path: /etc/kubernetes/pki containers: - name: metrics-server image: gcrxio/metrics-server-amd64:v0.3.1 imagePullPolicy: IfNotPresent command: - /metrics-server - --metric-resolution=30s - --kubelet-port=10250 - --kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem - --requestheader-username-headers=X-Remote-User - --requestheader-group-headers=X-Remote-Group - --requestheader-extra-headers-prefix=X-Remote-Extra- - --kubelet-insecure-tls - -v=2 volumeMounts: - name: ca-ssl mountPath: /etc/kubernetes/pkiEOF部署metrics-server1kubectl apply -f .查看pod状态123kubectl -n kube-system get pod -l k8s-app=metrics-serverNAME READY STATUS RESTARTS AGEpod/metrics-server-86bd9d7667-5hbn6 1/1 Running 0 1m验证metrics完成后,等待一段时间(约 30s - 1m)收集 Metrics12345678910111213# 请求metrics api的结果kubectl get --raw /apis/metrics.k8s.io/v1beta1&#123;\"kind\":\"APIResourceList\",\"apiVersion\":\"v1\",\"groupVersion\":\"metrics.k8s.io/v1beta1\",\"resources\":[&#123;\"name\":\"nodes\",\"singularName\":\"\",\"namespaced\":false,\"kind\":\"NodeMetrics\",\"verbs\":[\"get\",\"list\"]&#125;,&#123;\"name\":\"pods\",\"singularName\":\"\",\"namespaced\":true,\"kind\":\"PodMetrics\",\"verbs\":[\"get\",\"list\"]&#125;]&#125;kubectl get apiservice|grep metricsv1beta1.metrics.k8s.io 2018-12-09T08:17:26Z# 获取节点性能信息kubectl top nodeNAME CPU(cores) CPU% MEMORY(bytes) MEMORY% k8s-m1 113m 2% 1080Mi 14% k8s-m2 133m 3% 1086Mi 14% k8s-m3 100m 2% 1029Mi 13%至此集群已具备基本功能下面的Extra Addons就是一些额外的功能kubernetes Extra AddonsDashboardDashboard 是kubernetes社区提供的GUI界面，用于图形化管理kubernetes集群，同时可以看到资源报表。官方提供yaml文件直接部署，但是需要更改image以便国内部署在k8s-m1上操作创建工作目录1mkdir -p /root/yaml/kubernetes-dashboard切换工作目录1cd /root/yaml/kubernetes-dashboard获取yaml文件1wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml修改镜像地址1sed -e 's,k8s.gcr.io/kubernetes-dashboard-amd64,gcrxio/kubernetes-dashboard-amd64,g' -i kubernetes-dashboard.yaml创建kubernetes-Dashboard1kubectl apply -f kubernetes-dashboard.yaml创建ServiceAccount RBAC官方的yaml文件，ServiceAccount绑定的RBAC权限很低，很多资源无法查看需要创建一个用于管理全局的ServiceAccount123456789101112131415161718192021222324252627cat &gt; cluster-admin.yaml &lt;&lt;EOF---# 在kube-system中创建名为admin-user的ServiceAccountapiVersion: v1kind: ServiceAccountmetadata: name: admin-user namespace: kube-system---# 将admin-user和cluster-admin绑定在一起# cluster-admin是kubernetes内置的clusterrole，具有集群管理员权限# 其他内置的clusterrole可以通过kubectl get clusterrole查看apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: admin-userroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: admin-user namespace: kube-systemEOFkubectl apply -f cluster-admin.yaml获取ServiceAccount的Token1kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '&#123;print $1&#125;')查看部署情况1kubectl get all -n kube-system --selector k8s-app=kubernetes-dashboard访问Dashboardkubernetes-dashborad的svc默认是clusterIP，需要修改为nodePort才能被外部访问随机分配NodePort，分配范围由kube-apiserver的--service-node-port-range参数指定1kubectl patch -n kube-system svc kubernetes-dashboard -p '&#123;\"spec\":&#123;\"type\":\"NodePort\"&#125;&#125;'修改完之后，通过以下命令获取访问kubernetes-Dashboard的端口123kubectl -n kube-system get svc --selector k8s-app=kubernetes-dashboardNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkubernetes-dashboard NodePort 10.106.183.192 &lt;none&gt; 443:30216/TCP 12s可以看到已经将节点的30216端口暴露出来IP地址不固定，只要运行了kube-proxy组件，都会在节点上添加30216端口规则用于转发请求到Podhttps://172.16.80.200:30216https://172.16.80.201:30216https://172.16.80.202:30216https://172.16.80.203:30216登录Dashboard，上面已经获取了token，这里只需要把token的值填入输入框，点击SIGN IN即可登录Dashboard UI预览图Ingress ControllerIngress 是 Kubernetes 中的一个抽象资源，其功能是通过 Web Server 的 Virtual Host概念以域名(Domain Name)方式转发到內部 Service，这避免了使用 Service 中的 NodePort 与LoadBalancer 类型所带來的限制(如 Port 数量上限)，而实现 Ingress 功能则是通过 Ingress Controller来达成，它会负责监听 Kubernetes API 中的 Ingress 与 Service 资源，并在发生资源变化时，根据资源预期的结果来设置 Web Server。Ingress Controller 有许多实现可以选择，这里只是列举一小部分Ingress NGINX：Kubernetes 官方维护的方案，本次安装使用此方案kubernetes-ingress：由nginx社区维护的方案，使用社区版nginx和nginx-plustreafik：一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，可以实现自动化动态配置在k8s-m1上操作创建工作目录1mkdir -p /root/yaml/ingress/ingress-nginx切换工作目录1cd /root/yaml/ingress/ingress-nginx下载yaml文件12wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.20.0/deploy/mandatory.yamlwget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.20.0/deploy/provider/baremetal/service-nodeport.yaml修改镜像地址123sed -e 's,k8s.gcr.io/,zhangguanzhang/gcr.io.google_containers.,g' \\ -e 's,quay.io/kubernetes-ingress-controller/,zhangguanzhang/quay.io.kubernetes-ingress-controller.,g' \\ -i mandatory.yaml创建ingress-nginx1kubectl apply -f .检查部署情况1kubectl -n ingress-nginx get pod访问ingress默认的backend会返回404123456789kubectl -n ingress-nginx get svcNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEingress-nginx NodePort 10.96.250.140 &lt;none&gt; 80:32603/TCP,443:30083/TCP 1mcurl http://172.16.80.200:32603default backend - 404curl -k https://172.16.80.200:30083default backend - 404注意这里部署之后，是deployment，且通过nodePort暴露服务也可以修改yaml文件，将Ingress-nginx部署为DaemonSet使用labels和nodeSelector来指定运行ingress-nginx的节点使用hostNetwork=true来共享主机网络命名空间，或者使用hostPort指定主机端口映射如果使用hostNetwork共享宿主机网络栈或者hostPort映射宿主机端口，记得要看看有没有端口冲突，否则无法启动修改监听端口可以在ingress-nginx启动命令中添加--http-port=8180和--https-port=8543，还有下面的端口定义也相应变更即可创建kubernetes-Dashboard的Ingresskubernetes-Dashboard默认是开启了HTTPS访问的ingress-nginx需要以HTTPS的方式反向代理kubernetes-Dashboard以HTTP方式访问kubernetes-Dashboard的时候会被重定向到HTTPS需要创建HTTPS证书，用于访问ingress-nginx的HTTPS端口创建HTTPS证书这里的CN=域名/O=域名需要跟后面的ingress主机名匹配1234567openssl req -x509 \\ -nodes \\ -days 3650 \\ -newkey rsa:2048 \\ -keyout tls.key \\ -out tls.crt \\ -subj \"/CN=dashboard.k8s.local/O=dashboard.k8s.local\"创建secret对象这里将HTTPS证书创建为kubernetes的secret对象dashboard-tlsingress创建的时候需要加载这个作为HTTPS证书1kubectl -n kube-system create secret tls dashboard-tls --key ./tls.key --cert ./tls.crt创建dashboard-ingress.yaml123456789101112131415161718192021apiVersion: extensions/v1beta1kind: Ingressmetadata: name: dashboard-ingress namespace: kube-system annotations: nginx.ingress.kubernetes.io/ssl-passthrough: \"true\" nginx.ingress.kubernetes.io/secure-backends: \"true\"spec: tls: - hosts: - dashboard.k8s.local secretName: dashboard-tls rules: - host: dashboard.k8s.local http: paths: - path: / backend: serviceName: kubernetes-dashboard servicePort: 443创建ingress1kubectl apply -f dashboard-ingress.yaml检查ingress123kubectl -n kube-system get ingressNAME HOSTS ADDRESS PORTS AGEdashboard-ingress dashboard.k8s.local 80, 443 16m访问kubernetes-Dashboard修改主机hosts静态域名解析，以本文为例在hosts文件里添加172.16.80.200 dashboard.k8s.local使用https://dashboard.k8s.local:30083访问kubernetesDashboard了添加了TLS之后，访问HTTP会被跳转到HTTPS端口，这里比较坑爹，没法自定义跳转HTTPS的端口此处使用的是自签名证书，浏览器会提示不安全，请忽略建议搭配external-DNS和LoadBalancer一起食用，效果更佳HelmHelm是一个kubernetes应用的包管理工具，用来管理charts——预先配置好的安装包资源，有点类似于Ubuntu的APT和CentOS中的yum。Helm chart是用来封装kubernetes原生应用程序的yaml文件，可以在你部署应用的时候自定义应用程序的一些metadata，便与应用程序的分发。Helm和charts的主要作用：应用程序封装版本管理依赖检查便于应用程序分发环境要求kubernetes v1.6及以上的版本，启用RBAC集群可以访问到chart仓库helm客户端主机能访问kubernetes集群安装客户端安装方式二选一，需要科学上网直接脚本安装12echo '--- 使用脚本安装，默认是最新版 ---'curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash下载二进制文件安装12345echo '--- 下载二进制文件安装 ---'wget https://storage.googleapis.com/kubernetes-helm/helm-v2.12.0-linux-amd64.tar.gztar xzf helm-v2.12.0-linux-amd64.tar.gz linux-amd64/helmmv linux-amd64/helm /usr/local/bin/rm -rf linux-amd64创建工作目录1mkdir /root/yaml/helm/切换工作目录1cd /root/yaml/helm创建RBAC规则123456789101112131415161718192021222324cat &gt; /root/yaml/helm/helm-rbac.yaml &lt;&lt;EOF# 创建名为tiller的ServiceAccountapiVersion: v1kind: ServiceAccountmetadata: name: tiller namespace: kube-system---# 给tiller绑定cluster-admin权限apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: tiller-cluster-ruleroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: tiller namespace: kube-systemEOFkubectl apply -f /root/yaml/helm/helm-rbac.yaml安装服务端这里指定了helm的stable repo国内镜像地址具体说明请看这里123helm init --tiller-image gcrxio/tiller:v2.12.0 \\ --service-account tiller \\ --stable-repo-url http://mirror.azure.cn/kubernetes/charts/检查安装情况123456789kubectl -n kube-system get pod -l app=helm,name=tiller# 输出示例NAME READY STATUS RESTARTS AGEtiller-deploy-84fc6cd5f9-nz4m7 1/1 Running 0 1mhelm version# 输出示例Client: &amp;version.Version&#123;SemVer:\"v2.12.0\", GitCommit:\"d325d2a9c179b33af1a024cdb5a4472b6288016a\", GitTreeState:\"clean\"&#125;Server: &amp;version.Version&#123;SemVer:\"v2.12.0\", GitCommit:\"d325d2a9c179b33af1a024cdb5a4472b6288016a\", GitTreeState:\"clean\"&#125;添加命令行补全12helm completion bash &gt; /etc/bash_completion.d/helmsource /etc/bash_completion.d/helmRook（测试用途）说明Rook是一款云原生环境下的开源分布式存储编排系统，目前已进入CNCF孵化。Rook的官方网站是https://rook.ioRook将分布式存储软件转变为自我管理，自我缩放和自我修复的存储服务。它通过自动化部署，引导、配置、供应、扩展、升级、迁移、灾难恢复、监控和资源管理来实现。 Rook使用基础的云原生容器管理、调度和编排平台提供的功能来履行其职责。Rook利用扩展点深入融入云原生环境，为调度、生命周期管理、资源管理、安全性、监控和用户体验提供无缝体验。Ceph Custom Resource Definition（CRD）已经在Rook v0.8版本升级到Beta其他特性请查看项目文档这里只用作测试环境中提供StorageClass和持久化存储请慎重考虑是否部署在生产环境中Rook与kubernetes的集成Rook架构图安装这里以Rook v0.8.3作为示例这里默认使用/var/lib/rook/osd*目录来运行OSD需要最少3个节点，否则无足够的节点启动集群可以使用yaml文件部署和使用helm chart部署，这里使用yaml文件部署创建工作目录1mkdir -p /root/yaml/rook/进入工作目录1cd /root/yaml/rook/下载yaml文件1234# operator实现自定义API用于管理rook-cephwget https://raw.githubusercontent.com/rook/rook/v0.8.3/cluster/examples/kubernetes/ceph/operator.yaml# cluster用于部署rook-ceph集群wget https://raw.githubusercontent.com/rook/rook/v0.8.3/cluster/examples/kubernetes/ceph/cluster.yaml部署operator1kubectl apply -f operator.yaml检查operator安装情况1234567891011121314151617181920kubectl -n rook-ceph-system get all# 输出示例NAME READY STATUS RESTARTS AGEpod/rook-ceph-agent-4qwvd 1/1 Running 0 11mpod/rook-ceph-agent-v5ghj 1/1 Running 0 11mpod/rook-ceph-agent-zv8s6 1/1 Running 0 11mpod/rook-ceph-operator-745f756bd8-9gdpk 1/1 Running 0 12mpod/rook-discover-44lx5 1/1 Running 0 11mpod/rook-discover-4d6mn 1/1 Running 0 11mpod/rook-discover-mvqfv 1/1 Running 0 11mNAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGEdaemonset.apps/rook-ceph-agent 3 3 3 3 3 &lt;none&gt; 11mdaemonset.apps/rook-discover 3 3 3 3 3 &lt;none&gt; 11mNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEdeployment.apps/rook-ceph-operator 1 1 1 1 12mNAME DESIRED CURRENT READY AGEreplicaset.apps/rook-ceph-operator-745f756bd8 1 1 1 12m部署cluster1kubectl apply -f cluster.yaml检查cluster部署情况1234567891011121314151617181920212223242526272829303132333435363738394041kubectl -n rook-ceph get all# 输出示例NAME READY STATUS RESTARTS AGEpod/rook-ceph-mgr-a-7944d8d79b-pvrsf 1/1 Running 0 10mpod/rook-ceph-mon0-ll7fc 1/1 Running 0 11mpod/rook-ceph-mon1-cd2gb 1/1 Running 0 11mpod/rook-ceph-mon2-vlmfc 1/1 Running 0 10mpod/rook-ceph-osd-id-0-745486df7b-4dxdc 1/1 Running 0 10mpod/rook-ceph-osd-id-1-85fdf4cd64-ftmc4 1/1 Running 0 10mpod/rook-ceph-osd-id-2-6bc4fbb457-295pn 1/1 Running 0 10mpod/rook-ceph-osd-prepare-k8s-m1-klv5j 0/1 Completed 0 10mpod/rook-ceph-osd-prepare-k8s-m2-dt2pl 0/1 Completed 0 10mpod/rook-ceph-osd-prepare-k8s-m3-ndqpl 0/1 Completed 0 10mNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/rook-ceph-mgr ClusterIP 10.100.158.219 &lt;none&gt; 9283/TCP 10mservice/rook-ceph-mgr-dashboard ClusterIP 10.107.141.138 &lt;none&gt; 7000/TCP 10mservice/rook-ceph-mgr-dashboard-external NodePort 10.99.89.12 &lt;none&gt; 7000:30660/TCP 10mservice/rook-ceph-mon0 ClusterIP 10.100.50.229 &lt;none&gt; 6790/TCP 11mservice/rook-ceph-mon1 ClusterIP 10.110.105.207 &lt;none&gt; 6790/TCP 11mservice/rook-ceph-mon2 ClusterIP 10.103.223.166 &lt;none&gt; 6790/TCP 10mNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEdeployment.apps/rook-ceph-mgr-a 1 1 1 1 10mdeployment.apps/rook-ceph-osd-id-0 1 1 1 1 10mdeployment.apps/rook-ceph-osd-id-1 1 1 1 1 10mdeployment.apps/rook-ceph-osd-id-2 1 1 1 1 10mNAME DESIRED CURRENT READY AGEreplicaset.apps/rook-ceph-mgr-a-7944d8d79b 1 1 1 10mreplicaset.apps/rook-ceph-mon0 1 1 1 11mreplicaset.apps/rook-ceph-mon1 1 1 1 11mreplicaset.apps/rook-ceph-mon2 1 1 1 10mreplicaset.apps/rook-ceph-osd-id-0-745486df7b 1 1 1 10mreplicaset.apps/rook-ceph-osd-id-1-85fdf4cd64 1 1 1 10mreplicaset.apps/rook-ceph-osd-id-2-6bc4fbb457 1 1 1 10mNAME DESIRED SUCCESSFUL AGEjob.batch/rook-ceph-osd-prepare-k8s-m1 1 1 10mjob.batch/rook-ceph-osd-prepare-k8s-m2 1 1 10mjob.batch/rook-ceph-osd-prepare-k8s-m3 1 1 10m检查ceph集群状态上面命令已经获取ceph-mon0节点的pod名rook-ceph-mon0-ll7fc，以此pod为例运行以下命令12345678910111213141516kubectl -n rook-ceph exec -it rook-ceph-mon0-ll7fc -- ceph -s# 输出示例 cluster: id: 1fcee02c-fd98-4b13-bfed-de7b6605a237 health: HEALTH_OK services: mon: 3 daemons, quorum rook-ceph-mon0,rook-ceph-mon2,rook-ceph-mon1 mgr: a(active) osd: 3 osds: 3 up, 3 in data: pools: 1 pools, 100 pgs objects: 0 objects, 0 bytes usage: 22767 MB used, 96979 MB / 116 GB avail pgs: 100 active+clean暴露ceph-mgr的dashboard12wget https://raw.githubusercontent.com/rook/rook/v0.8.3/cluster/examples/kubernetes/ceph/dashboard-external.yamlkubectl apply -f dashboard-external.yaml访问已暴露的dashboard123456789kubectl -n rook-ceph get svc# 输出示例NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGErook-ceph-mgr ClusterIP 10.100.158.219 &lt;none&gt; 9283/TCP 12mrook-ceph-mgr-dashboard ClusterIP 10.107.141.138 &lt;none&gt; 7000/TCP 12mrook-ceph-mgr-dashboard-external NodePort 10.99.89.12 &lt;none&gt; 7000:30660/TCP 11mrook-ceph-mon0 ClusterIP 10.100.50.229 &lt;none&gt; 6790/TCP 13mrook-ceph-mon1 ClusterIP 10.110.105.207 &lt;none&gt; 6790/TCP 13mrook-ceph-mon2 ClusterIP 10.103.223.166 &lt;none&gt; 6790/TCP 12m可以见到这里暴露30660端口，通过此端口可以访问Dashboard添加StorageClass添加多副本存储池注释部分是创建纠删码存储池添加StorageClass指定使用多副本存储池，格式化为xfs12345678910111213141516171819202122232425262728293031cat &gt; rbd-storageclass.yaml &lt;&lt;EOFapiVersion: ceph.rook.io/v1beta1kind: Poolmetadata: name: replicapool namespace: rook-cephspec: replicated: size: 3 # For an erasure-coded pool, comment out the replication size above and uncomment the following settings. # Make sure you have enough OSDs to support the replica size or erasure code chunks. #erasureCoded: # dataChunks: 2 # codingChunks: 1---apiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: rook-ceph-blockprovisioner: ceph.rook.io/blockparameters: pool: replicapool # Specify the namespace of the rook cluster from which to create volumes. # If not specified, it will use `rook` as the default namespace of the cluster. # This is also the namespace where the cluster will be clusterNamespace: rook-ceph # Specify the filesystem type of the volume. If not specified, it will use `ext4`. fstype: xfsEOFkubectl apply -f rbd-storageclass.yaml还可以添加cephFS和object类型的存储池，然后创建对应的StorageClass具体可以看filesystem.yaml和object.yaml检查StorageClass创建sc时，会在rook-ceph上创建对应的Pool这里以rbd-storageclass.yaml为例123456789101112131415161718192021222324252627kubectl get sc# 输出示例NAME PROVISIONER AGErook-ceph-block ceph.rook.io/block 15mkubectl describe sc rook-ceph-block # 输出示例Name: rook-ceph-blockIsDefaultClass: NoAnnotations: kubectl.kubernetes.io/last-applied-configuration=&#123;\"apiVersion\":\"storage.k8s.io/v1\",\"kind\":\"StorageClass\",\"metadata\":&#123;\"annotations\":&#123;&#125;,\"name\":\"rook-ceph-block\",\"namespace\":\"\"&#125;,\"parameters\":&#123;\"clusterNamespace\":\"rook-ceph\",\"fstype\":\"xfs\",\"pool\":\"replicapool\"&#125;,\"provisioner\":\"ceph.rook.io/block\"&#125;Provisioner: ceph.rook.io/blockParameters: clusterNamespace=rook-ceph,fstype=xfs,pool=replicapoolAllowVolumeExpansion: &lt;unset&gt;MountOptions: &lt;none&gt;ReclaimPolicy: DeleteVolumeBindingMode: ImmediateEvents: &lt;none&gt;kubectl -n rook-ceph exec -it rook-ceph-mon0-ll7fc -- ceph df# 输出示例GLOBAL: SIZE AVAIL RAW USED %RAW USED 116G 96979M 22767M 19.01 POOLS: NAME ID USED %USED MAX AVAIL OBJECTS replicapool 1 0 0 29245M 0卸载Rook-ceph这里提供卸载的操作步骤，请按需操作！删除StorageClass1kubectl delete -f rbd-storageclass.yaml删除Rook-Ceph-Cluster1kubectl delete -f cluster.yaml删除Rook-Operator1kubectl delete -f operator.yaml清理目录注意！这里是所有运行rook-ceph集群的节点都需要做清理1rm -rf /var/lib/rookPrometheus Operator说明Prometheus Operator 是 CoreOS 开发的基于 Prometheus 的 Kubernetes 监控方案，也可能是目前功能最全面的开源方案。Prometheus Operator 通过 Grafana 展示监控数据，预定义了一系列的 Dashboard要求kubernetes版本大于等于1.8.0CoreOS/Prometheus-Operator项目地址PrometheusPrometheus 是一套开源的系统监控报警框架，启发于 Google 的 borgmon 监控系统，作为社区开源项目进行开发，并成为CNCF第二个毕业的项目（第一个是kubernetes）特点强大的多维度数据模型灵活而强大的查询语句（PromQL）易于管理，高效使用 pull 模式采集时间序列数据，这样不仅有利于本机测试而且可以避免有问题的服务器推送坏的 metrics。可以采用 push gateway 的方式把时间序列数据推送至 Prometheus server 端可以通过服务发现或者静态配置去获取监控的 targets有多种可视化图形界面易于伸缩Prometheus组成架构Prometheus Server: 用于收集和存储时间序列数据Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给Prometheus serverPush Gateway: 主要用于短期的 jobs。 jobs 可以直接向 Prometheus server 端推送它们的metrics。这种方式主要用于服务层面的 metrics。Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。Alertmanager: 从 Prometheus server 端接收到 alerts后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。架构图Operator架构Operator即 Prometheus Operator，在 Kubernetes 中以 Deployment 运行。其职责是部署和管理Prometheus Server，根据 ServiceMonitor 动态更新 Prometheus Server 的监控对象。Prometheus ServerPrometheus Server 会作为 Kubernetes 应用部署到集群中。为了更好地在 Kubernetes 中管理 Prometheus，CoreOS 的开发人员专门定义了一个命名为 Prometheus 类型的 Kubernetes 定制化资源。我们可以把 Prometheus看作是一种特殊的 Deployment，它的用途就是专门部署 Prometheus Server。Service这里的Service 就是 Cluster 中的 Service 资源，也是 Prometheus 要监控的对象，在 Prometheus 中叫做Target。每个监控对象都有一个对应的 Service。比如要监控 Kubernetes Scheduler，就得有一个与 Scheduler对应的 Service。当然，Kubernetes 集群默认是没有这个 Service 的，Prometheus Operator会负责创建。ServiceMonitorOperator能够动态更新 Prometheus 的 Target 列表，ServiceMonitor 就是 Target 的抽象。比如想监控Kubernetes Scheduler，用户可以创建一个与 Scheduler Service 相映射的 ServiceMonitor对象。Operator 则会发现这个新的 ServiceMonitor，并将 Scheduler 的 Target 添加到 Prometheus的监控列表中。ServiceMonitor 也是 Prometheus Operator 专门开发的一种 Kubernetes 定制化资源类型。Alertmanager除了 Prometheus 和 ServiceMonitor，Alertmanager 是 Operator 开发的第三种 Kubernetes 定制化资源。我们可以把 Alertmanager 看作是一种特殊的 Deployment，它的用途就是专门部署 Alertmanager 组件。部署Prometheus-Operator切换工作目录12mkdir -p /root/yaml/prometheus-operatorcd /root/yaml/prometheus-operator添加coreos源12# 添加coreos源helm repo add coreos https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/创建命名空间1kubectl create namespace monitoring部署prometheus-operator这里通过--set指定了image的地址1234567helm install coreos/prometheus-operator \\ --name coreos-prometheus-operator \\ --namespace monitoring \\ --set global.hyperkube.repository=zhangguanzhang/quay.io.coreos.hyperkube \\ --set image.repository=zhangguanzhang/quay.io.coreos.prometheus-operator \\ --set prometheusConfigReloader.repository=zhangguanzhang/quay.io.coreos.prometheus-config-reloader \\ --set rbacEnable=true部署kube-prometheus通过运行helm命令安装时，指定一些变量来达到自定义配置的目的定义grafana初始admin密码为password，默认值是admin定义alertmanager和prometheus使用名为rook-ceph-block的StorageClass，访问模式为ReadWriteOnce，大小5Gi，默认是50Gi定义grafana、alertmanager、prometheus的Service类型为NodePort，默认是ClusterIP这里的--set可以定义很多变量，具体可以在这里，查看里面每个文件夹的values.yaml这里配置的变量请自己根据情况修改12345678910111213141516171819202122232425262728293031helm install coreos/kube-prometheus \\ --name kube-prometheus \\ --namespace monitoring \\ --set alertmanager.image.repository=\"zhangguanzhang/quay.io.prometheus.alertmanager\" \\ --set alertmanager.service.type=\"NodePort\" \\ --set alertmanager.storageSpec.volumeClaimTemplate.spec.storageClassName=\"rook-ceph-block\" \\ --set alertmanager.storageSpec.volumeClaimTemplate.spec.accessModes[0]=\"ReadWriteOnce\" \\ --set alertmanager.storageSpec.volumeClaimTemplate.spec.resources.requests.storage=\"5Gi\" \\ --set grafana.adminPassword=\"password\" \\ --set grafana.service.type=\"NodePort\" \\ --set prometheus.image.repository=\"zhangguanzhang/quay.io.prometheus.prometheus\" \\ --set prometheus.service.type=\"NodePort\" \\ --set prometheus.storageSpec.volumeClaimTemplate.spec.storageClassName=\"rook-ceph-block\" \\ --set prometheus.storageSpec.volumeClaimTemplate.spec.accessModes[0]=\"ReadWriteOnce\" \\ --set prometheus.storageSpec.volumeClaimTemplate.spec.resources.requests.storage=\"5Gi\" \\ --set prometheus.deployCoreDNS=true \\ --set prometheus.deployKubeDNS=false \\ --set prometheus.deployKubeEtcd=true \\ --set exporter-kube-controller-manager.endpoints[0]=\"172.16.80.201\" \\ --set exporter-kube-controller-manager.endpoints[1]=\"172.16.80.202\" \\ --set exporter-kube-controller-manager.endpoints[2]=\"172.16.80.203\" \\ --set exporter-kube-etcd.etcdPort=2379 \\ --set exporter-kube-etcd.scheme=\"https\" \\ --set exporter-kube-etcd.endpoints[0]=\"172.16.80.201\" \\ --set exporter-kube-etcd.endpoints[1]=\"172.16.80.202\" \\ --set exporter-kube-etcd.endpoints[2]=\"172.16.80.203\" \\ --set exporter-kube-scheduler.endpoints[0]=\"172.16.80.201\" \\ --set exporter-kube-scheduler.endpoints[1]=\"172.16.80.202\" \\ --set exporter-kube-scheduler.endpoints[2]=\"172.16.80.203\" \\ --set exporter-kube-state.kube_state_metrics.image.repository=\"gcrxio/kube-state-metrics\" \\ --set exporter-kube-state.addon_resizer.image.repository=\"gcrxio/addon-resizer\"检查部署情况1234567891011121314151617181920212223242526272829303132333435363738kubectl -n monitoring get all# 输出示例NAME READY STATUS RESTARTS AGEpod/alertmanager-kube-prometheus-0 2/2 Running 0 43mpod/kube-prometheus-exporter-kube-state-66b8849c9b-cq5pp 2/2 Running 0 42mpod/kube-prometheus-exporter-node-p6z67 1/1 Running 0 43mpod/kube-prometheus-exporter-node-qnmjt 1/1 Running 0 43mpod/kube-prometheus-exporter-node-vr4sp 1/1 Running 0 43mpod/kube-prometheus-grafana-f869c754-x5x7n 2/2 Running 0 43mpod/prometheus-kube-prometheus-0 3/3 Running 1 43mpod/prometheus-operator-5db9df7ffc-dxtqh 1/1 Running 0 49mNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/alertmanager-operated ClusterIP None &lt;none&gt; 9093/TCP,6783/TCP 43mservice/kube-prometheus NodePort 10.97.183.252 &lt;none&gt; 9090:30900/TCP 43mservice/kube-prometheus-alertmanager NodePort 10.105.140.173 &lt;none&gt; 9093:30903/TCP 43mservice/kube-prometheus-exporter-kube-state ClusterIP 10.108.236.146 &lt;none&gt; 80/TCP 43mservice/kube-prometheus-exporter-node ClusterIP 10.96.14.75 &lt;none&gt; 9100/TCP 43mservice/kube-prometheus-grafana NodePort 10.109.4.170 &lt;none&gt; 80:30164/TCP 43mservice/prometheus-operated ClusterIP None &lt;none&gt; 9090/TCP 43mNAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGEdaemonset.apps/kube-prometheus-exporter-node 3 3 3 3 3 &lt;none&gt; 43mNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEdeployment.apps/kube-prometheus-exporter-kube-state 1 1 1 1 43mdeployment.apps/kube-prometheus-grafana 1 1 1 1 43mdeployment.apps/prometheus-operator 1 1 1 1 49mNAME DESIRED CURRENT READY AGEreplicaset.apps/kube-prometheus-exporter-kube-state-658f46b8dd 0 0 0 43mreplicaset.apps/kube-prometheus-exporter-kube-state-66b8849c9b 1 1 1 42mreplicaset.apps/kube-prometheus-grafana-f869c754 1 1 1 43mreplicaset.apps/prometheus-operator-5db9df7ffc 1 1 1 49mNAME DESIRED CURRENT AGEstatefulset.apps/alertmanager-kube-prometheus 1 1 43mstatefulset.apps/prometheus-kube-prometheus 1 1 43m访问Prometheus-Operator部署时已经定义alertmanager、prometheus、grafana的Service为NodePort根据检查部署的情况，得知kube-prometheus的NodePort为30900kube-prometheus-alertmanager的NodePort为30903kube-prometheus-grafana的NodePort为30164直接通过这些端口访问即可grafana已内嵌了基础的Dashboard模板，以admin用户登录即可见EFK说明官方提供简单的fluentd-elasticsearch样例，可以作为测试用途已经包含在kubernetes项目当中链接这里使用kubernetes-server-linux-amd64.tar.gz里面的kubernetes-src.tar.gz提供的Addons修改elasticsearch使用rook-ceph提供的StorageClass作为持久化存储，默认是使用emptyDir注意EFK集群部署之后，kibana和elasticsearch初始化过程会极大的消耗服务器资源请保证你的环境能撑的住！！！！配置不够，服务器真的会失去响应实测3节点4C 16G SSD硬盘，CPU持续十几分钟的满载解压源代码12345678910tar xzf kubernetes-server-linux-amd64.tar.gz kubernetes/kubernetes-src.tar.gzcd kubernetestar xzf kubernetes/kubernetes-src.tar.gztar xzf kubernetes-src.tar.gz \\cluster/addons/fluentd-elasticsearch/es-service.yaml \\cluster/addons/fluentd-elasticsearch/es-statefulset.yaml \\cluster/addons/fluentd-elasticsearch/fluentd-es-configmap.yaml \\cluster/addons/fluentd-elasticsearch/fluentd-es-ds.yaml \\cluster/addons/fluentd-elasticsearch/kibana-deployment.yaml \\cluster/addons/fluentd-elasticsearch/kibana-service.yaml切换工作目录1cd cluster/addons/fluentd-elasticsearch/修改yaml文件删除es-statefuleset.yaml里面的字段，位置大概在100行左右123volumes: - name: elasticsearch-logging emptyDir: &#123;&#125;添加volumeClaimTemplates字段，声明使用rook-ceph提供的StorageClass，大小5Gi位置在StatefulSet.spec，大概67行左右123456789volumeClaimTemplates:- metadata: name: elasticsearch-logging spec: accessModes: [ \"ReadWriteOnce\" ] storageClassName: \"rook-ceph-block\" resources: requests: storage: 5Gi修改后，es-statefulset.yaml内容如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119# RBAC authn and authzapiVersion: v1kind: ServiceAccountmetadata: name: elasticsearch-logging namespace: kube-system labels: k8s-app: elasticsearch-logging kubernetes.io/cluster-service: \"true\" addonmanager.kubernetes.io/mode: Reconcile---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata: name: elasticsearch-logging labels: k8s-app: elasticsearch-logging kubernetes.io/cluster-service: \"true\" addonmanager.kubernetes.io/mode: Reconcilerules:- apiGroups: - \"\" resources: - \"services\" - \"namespaces\" - \"endpoints\" verbs: - \"get\"---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata: namespace: kube-system name: elasticsearch-logging labels: k8s-app: elasticsearch-logging kubernetes.io/cluster-service: \"true\" addonmanager.kubernetes.io/mode: Reconcilesubjects:- kind: ServiceAccount name: elasticsearch-logging namespace: kube-system apiGroup: \"\"roleRef: kind: ClusterRole name: elasticsearch-logging apiGroup: \"\"---# Elasticsearch deployment itselfapiVersion: apps/v1kind: StatefulSetmetadata: name: elasticsearch-logging namespace: kube-system labels: k8s-app: elasticsearch-logging version: v5.6.4 kubernetes.io/cluster-service: \"true\" addonmanager.kubernetes.io/mode: Reconcilespec: serviceName: elasticsearch-logging replicas: 2 selector: matchLabels: k8s-app: elasticsearch-logging version: v5.6.4 volumeClaimTemplates: - metadata: name: elasticsearch-logging spec: accessModes: [ \"ReadWriteOnce\" ] storageClassName: rook-ceph-block resources: requests: storage: 5Gi template: metadata: labels: k8s-app: elasticsearch-logging version: v5.6.4 kubernetes.io/cluster-service: \"true\" spec: serviceAccountName: elasticsearch-logging containers: - image: gcrxio/elasticsearch:v5.6.4 name: elasticsearch-logging resources: # need more cpu upon initialization, therefore burstable class limits: cpu: 1000m requests: cpu: 100m ports: - containerPort: 9200 name: db protocol: TCP - containerPort: 9300 name: transport protocol: TCP volumeMounts: - name: elasticsearch-logging mountPath: /data env: - name: \"NAMESPACE\" valueFrom: fieldRef: fieldPath: metadata.namespace volumes: - name: elasticsearch-logging emptyDir: &#123;&#125; # Elasticsearch requires vm.max_map_count to be at least 262144. # If your OS already sets up this number to a higher value, feel free # to remove this init container. initContainers: - image: alpine:3.6 command: [\"/sbin/sysctl\", \"-w\", \"vm.max_map_count=262144\"] name: elasticsearch-logging-init securityContext: privileged: true注释kibana-deployment.yaml定义的环境变量大概在35行左右12# - name: SERVER_BASEPATH# value: /api/v1/namespaces/kube-system/services/kibana-logging/proxy修改镜像地址默认yaml定义的镜像地址是k8s.gcr.io，需要科学上网变更成gcrxio1sed -e 's,k8s.gcr.io,gcrxio,g' -i *yaml给节点打Labelfluentd-es-ds.yaml有nodeSelector字段定义了运行在带有beta.kubernetes.io/fluentd-ds-ready: &quot;true&quot;标签的节点上这里为了方便，直接给所有节点都打上标签1kubectl label node --all beta.kubernetes.io/fluentd-ds-ready=true部署EFK1kubectl apply -f .查看部署情况12345678910111213141516171819202122kubectl -n kube-system get pod -l k8s-app=elasticsearch-loggingNAME READY STATUS RESTARTS AGEelasticsearch-logging-0 1/1 Running 1 10melasticsearch-logging-1 1/1 Running 0 10mkubectl -n kube-system get pod -l k8s-app=kibana-loggingNAME READY STATUS RESTARTS AGEkibana-logging-56fb9d765-l95kj 1/1 Running 1 37mkubectl -n kube-system get pod -l k8s-app=fluentd-esNAME READY STATUS RESTARTS AGEfluentd-es-v2.0.4-2mwz7 1/1 Running 0 3mfluentd-es-v2.0.4-7mk4d 1/1 Running 0 3mfluentd-es-v2.0.4-zqtpc 1/1 Running 0 3mkubectl -n kube-system get svc -l k8s-app=elasticsearch-loggingNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEelasticsearch-logging ClusterIP 10.111.107.21 &lt;none&gt; 9200/TCP 39mkubectl -n kube-system get svc -l k8s-app=kibana-loggingNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkibana-logging ClusterIP 10.96.170.77 &lt;none&gt; 5601/TCP 39m访问EFK修改elasticsearch和kibana的svc为nodePort12kubectl patch -n kube-system svc elasticsearch-logging -p '&#123;\"spec\":&#123;\"type\":\"NodePort\"&#125;&#125;'kubectl patch -n kube-system svc kibana-logging -p '&#123;\"spec\":&#123;\"type\":\"NodePort\"&#125;&#125;'查看分配的nodePort1234567kubectl -n kube-system get svc -l k8s-app=elasticsearch-loggingNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEelasticsearch-logging NodePort 10.111.107.21 &lt;none&gt; 9200:30542/TCP 42mkubectl -n kube-system get svc -l k8s-app=kibana-loggingNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkibana-logging NodePort 10.96.170.77 &lt;none&gt; 5601:30998/TCP 42m可以看到端口分别为30542和30998在github上获取yaml文件如果不想用kubernetes-src.tar.gz里面的Addons可以直接下载github上面的文件，也是一样的123456wget https://raw.githubusercontent.com/kubernetes/kubernetes/$&#123;KUBERNETES_VERSION&#125;/cluster/addons/fluentd-elasticsearch/es-service.yamlwget https://raw.githubusercontent.com/kubernetes/kubernetes/$&#123;KUBERNETES_VERSION&#125;/cluster/addons/fluentd-elasticsearch/es-statefulset.yamlwget https://raw.githubusercontent.com/kubernetes/kubernetes/$&#123;KUBERNETES_VERSION&#125;/cluster/addons/fluentd-elasticsearch/fluentd-es-configmap.yamlwget https://raw.githubusercontent.com/kubernetes/kubernetes/$&#123;KUBERNETES_VERSION&#125;/cluster/addons/fluentd-elasticsearch/fluentd-es-ds.yamlwget https://raw.githubusercontent.com/kubernetes/kubernetes/$&#123;KUBERNETES_VERSION&#125;/cluster/addons/fluentd-elasticsearch/kibana-deployment.yamlwget https://raw.githubusercontent.com/kubernetes/kubernetes/$&#123;KUBERNETES_VERSION&#125;/cluster/addons/fluentd-elasticsearch/kibana-service.yaml本文至此结束","categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://luanlengli.github.io/tags/Kubernetes/"},{"name":"Docker","slug":"Docker","permalink":"https://luanlengli.github.io/tags/Docker/"}]},{"title":"CentOS-7.6(1810)虚拟机模板制作","slug":"CentOS-7-6-1810-虚拟机模板制作","date":"2018-12-05T04:23:05.000Z","updated":"2019-04-17T02:45:49.000Z","comments":true,"path":"2018/12/05/CentOS-7-6-1810-虚拟机模板制作.html","link":"","permalink":"https://luanlengli.github.io/2018/12/05/CentOS-7-6-1810-虚拟机模板制作.html","excerpt":"","text":"CentOS-7.6(1810)虚拟机模板制作基于RHEL7.6的CentOS-7.6(1810)在12月初正式发布了发行注记顺便更新一下虚拟机模板，这里记录一下操作过程。下载镜像可以在CentOS官网下载，也可以通过国内镜像源下载下载镜像名CentOS-7-x86_64-Minimal-1810.isoCentOS官网下载链接阿里云下载链接创建虚拟机这里使用VMware Workstation 14 Pro 版本号14.1.3 build-9474260虚拟机规格客户机操作系统版本Red Hat Enterprise Linux 7 64 位处理器数量1内存2GB硬盘40GB网络适配器NAT模式安装操作系统语言选择English软件包选择Minimal Install硬盘分区/dev/sda1boot分区、1GB、EXT4/dev/sda2/分区、39GB、XFS这里不使用swap分区，有需要可以自己增加swap分区网络设置NAT地址段为172.16.80.0/24这里设置为IP地址172.16.80.200子网掩码255.255.255.0网关172.16.80.2DNS114.114.114.114时区选择Asia/Shanghai打开网络对时KDUMP看情况选择打开或者关闭，这里我选择关闭设置ROOT密码操作系统启动后初始化设置关闭SELINUX12sed -i 's,SELINUX=enforcing,SELINUX=disabled,' /etc/selinux/configsetenforce 0关闭防火墙123systemctl stop firewalldsystemctl disable firewalldsystemctl mask firewalld清空iptables规则1234iptables -Ziptables -P INPUT ACCEPTiptables -P FORWARD ACCEPTiptables -P OUTPUT ACCEPT配置ssh证书登录通过ssh命令生成密钥对将~/.ssh/id_rsa.pub提取出来1ssh-keygen -t rsa -b 2048 -N \"\" -f ~/.ssh/id_rsa添加sysctl参数1234567891011121314151617181920212223242526272829303132333435cat &gt; /etc/sysctl.d/99-centos.conf &lt;&lt;EOF # 最大文件句柄数fs.file-max=1024000# 在CentOS7.4引入了一个新的参数来控制内核的行为。 # /proc/sys/fs/may_detach_mounts 默认设置为0# 当系统有容器运行的时候，需要将该值设置为1。fs.may_detach_mounts = 1# 最大文件打开数fs.nr_open=1024000# 二层的网桥在转发包时也会被iptables的FORWARD规则所过滤net.bridge.bridge-nf-call-arptables=1net.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1# 关闭严格校验数据包的反向路径net.ipv4.conf.default.rp_filter=0net.ipv4.conf.all.rp_filter=0# 修改动态NAT跟踪记录参数net.netfilter.nf_conntrack_max = 655350net.netfilter.nf_conntrack_tcp_timeout_established = 1200# 加快系统关闭处于 FIN_WAIT2 状态的 TCP 连接net.ipv4.tcp_fin_timeout = 30# 系统中处于 SYN_RECV 状态的 TCP 连接数量net.ipv4.tcp_max_syn_backlog = 8192# 内核中管理 TIME_WAIT 状态的数量net.ipv4.tcp_max_tw_buckets = 5000# 端口最大的监听队列的长度net.core.somaxconn=4096# 打开ipv4数据包转发net.ipv4.ip_forward=1# 允许应用程序能够绑定到不属于本地网卡的地址net.ipv4.ip_nonlocal_bind=1 # 内存耗尽才使用swap分区vm.swappiness = 0vm.panic_on_oom = 0EOF修改limits参数123456cat &gt; /etc/security/limits.d/99-centos.conf &lt;&lt;EOF* soft nproc 1024000* hard nproc 1024000* soft nofile 1024000* hard nofile 1024000EOF修改journal设置12345sed -e 's,^#Compress=yes,Compress=yes,' \\ -e 's,^#SystemMaxUse=,SystemMaxUse=1G,' \\ -e 's,^#Seal=yes,Seal=yes,' \\ -e 's,^#RateLimitBurst=1000,RateLimitBurst=2000,' \\ -i /etc/systemd/journald.conf修改终端提示符1234export PS1='[\\t]\\[\\033[1;31m\\]&lt;\\u@\\h:\\w&gt;\\[\\033[0m\\]\\$ 'cat &gt;&gt; /root/.bashrc &lt;&lt; EOFexport PS1='[\\t]\\[\\033[1;31m\\]&lt;\\u@\\h:\\w&gt;\\[\\033[0m\\]\\\\$ 'EOF修改网卡配置信息CentOS安装设置网卡后，会添加很多不需要的字段，例如UUID、HWADDR什么的删减后字段信息如下123456789101112cat /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=EthernetBOOTPROTO=noneNAME=ens33DEVICE=ens33ONBOOT=yesIPADDR=172.16.80.200NETMASK=255.255.255.0GATEWAY=172.16.80.2DNS1=114.114.114.114NM_CONTROLLED=noUSERCTL=no更新软件包通常来说，安装完操作系统，都需要更新一下软件包1yum update -y安装常用软件包CentOS最小化安装不能满足我的使用，需要额外安装一些软件包123yum groups install base -yyum install epel-release -yyum install redhat-lsb vim ipvsadm tree dstat iotop htop socat ipset conntrack bash-completion-extras -y添加vim设置（可选）将vim设置写入~/.vimrc文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859cat &gt; ~/.vimrc &lt;&lt;EOF\" 显示行号set number\" 高亮光标所在行set cursorline\" 打开语法显示syntax on\" 关闭备份set nobackup\" 没有保存或文件只读时弹出确认set confirm\" tab缩进set tabstop=4set shiftwidth=4set expandtabset smarttab\" 默认缩进4个空格大小 set shiftwidth=4 \" 文件自动检测外部更改set autoread\" 高亮查找匹配set hlsearch\" 显示匹配set showmatch\" 背景色设置为黑色set background=dark\" 浅色高亮显示当前行autocmd InsertLeave * se nocul\" 显示输入的命令set showcmd\" 字符编码set encoding=utf-8\" 开启终端256色显示set t_Co=256\" 增量式搜索 set incsearch\" 设置默认进行大小写不敏感查找set ignorecase\" 如果有一个大写字母，则切换到大小写敏感查找set smartcase\" 不产生swap文件set noswapfile\" 关闭提示音set noerrorbells\" 历史记录set history=10000\" 显示行尾空格set listchars=tab:»■,trail:■\" 显示非可见字符set list\" c文件自动缩进set cindent\" 文件自动缩进set autoindent\" 检测文件类型filetype on\" 智能缩进set smartindentEOF编写ipvs模块启动关闭脚本（可选）12345678910111213# 启动脚本cat &gt; /usr/local/bin/enable_ipvs.sh &lt;&lt;EOF#!/bin/bashipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"for kernel_module in \\$&#123;ipvs_modules&#125;; do /sbin/modinfo -F filename \\$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1 if [ $? -eq 0 ]; then /sbin/modprobe \\$&#123;kernel_module&#125; fidoneEOFchmod 755 /usr/local/bin/enable_ipvs.sh12345678910111213# 关闭脚本cat &gt; /usr/local/bin/disable_ipvs.sh &lt;&lt;EOF#!/bin/bashipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"for kernel_module in \\$&#123;ipvs_modules&#125;; do /sbin/modinfo -F filename \\$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1 if [ $? -eq 0 ]; then /sbin/modprobe -r \\$&#123;kernel_module&#125; fidoneEOFchmod 755 /usr/local/bin/disable_ipvs.sh123456789101112# 开机启动脚本cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF#!/bin/bashipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"for kernel_module in \\$&#123;ipvs_modules&#125;; do /sbin/modinfo -F filename \\$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1 if [ $? -eq 0 ]; then /sbin/modprobe \\$&#123;kernel_module&#125; fidoneEOFchmod 755 /etc/sysconfig/modules/ipvs.modules安装docker（可选）版本可以自行选择自带的Docker1.13或者docker-ce这里以docker-ce 18.03版本为例1234# 删除原有的Docker包# 安装依赖包yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine -yyum install -y yum-utils device-mapper-persistent-data lvm2 -y1234# 添加Docker-CE YUM源yum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo# 修改Docker—CE源地址sed -e 's,https://download.docker.com,https://mirrors.ustc.edu.cn/docker-ce,g' -i /etc/yum.repos.d/docker-ce.repo12# 安装Docker-CE 18.03yum install docker-ce-18.03.1.ce -y1234567891011121314# 配置dockermkdir -p /etc/dockercat&gt;/etc/docker/daemon.json&lt;&lt;EOF&#123; \"registry-mirrors\": [\"https://registry.docker-cn.com\"], \"insecure-registries\": [], \"log-driver\": \"json-file\", \"log-opts\": &#123; \"max-size\": \"10m\", \"max-file\": \"3\" &#125;, \"max-concurrent-downloads\": 10&#125;EOF修改HISTORY参数1234567cat &gt;&gt; /etc/profile &lt;&lt;EOFexport HISTSIZE=10000export HISTFILESIZE=10000export HISTCONTROL=ignoredupsexport HISTTIMEFORMAT=\"`whoami` %F %T \"export HISTIGNORE=\"ls:pwd:\"EOF清理现场清理yum缓存1yum clean all关闭操作系统1history -c &amp;&amp; sys-unconfig","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://luanlengli.github.io/tags/linux/"}]},{"title":"hello world~","slug":"hello-world","date":"2018-12-01T04:50:07.000Z","updated":"2018-12-09T06:07:41.000Z","comments":true,"path":"2018/12/01/hello-world.html","link":"","permalink":"https://luanlengli.github.io/2018/12/01/hello-world.html","excerpt":"","text":"参考了Hexo文档，简单搭建完hexo之后，又花了一些时间来调整主题什么的。慢慢会将以前积累的文档，放到这里来。用输出倒逼输入","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://luanlengli.github.io/tags/杂谈/"}]}]}